<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fannnnnn</title>
  <icon>https://www.gravatar.com/avatar/ed6b615e75b896440945740d4d4ab38c</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lcf12307.github.io/"/>
  <updated>2021-06-22T15:55:01.011Z</updated>
  <id>http://lcf12307.github.io/</id>
  
  <author>
    <name>chavey Liu</name>
    <email>lcf12307@sina.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试/复盘/4.27其他面试</title>
    <link href="http://lcf12307.github.io/2021/06/22/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/4.27%E5%85%B6%E4%BB%96%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2021/06/22/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/4.27%E5%85%B6%E4%BB%96%E9%9D%A2%E8%AF%95/</id>
    <published>2021-06-22T15:55:01.011Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<p>go的内存管理</p><p>go和php的区别</p><p>go项目的调用过程</p><p>es的日志量</p><p>每一行一个单词</p><p>1：cookie与session的区别<br>2：mysql性能优化（慢日志，explain，索引，内存碎片化）<br>3：聚簇索引与非聚簇索引（B+树与B树，覆盖索引，普通索引，主键索引）<br>4：redis主从同步（日志&amp;&amp;rdb）<br>5：redis实现延时队列<br>6：令牌桶&amp;&amp;漏斗限流<br>7：进程间通信的几种方式与限制条件<br>8：项目<br>9：三道LeetCode的esay难度题目</p><p>MySQL的存储引擎的区别<br>B树与B+树的区别<br>Join与In的查询效率<br>有没有使用分布式或者微服务<br>为什么使用SpringBoot而不使用SSM，区别是啥？<br>Redis里面使用的Hash算法是什么？<br>Redis不设置过期时间，他的过期时间是多久？<br>你在系统开发中上从宏观角度有没有一些设计？<br>JDK8里面的一些新东西是？<br>两个List怎么去重？<br>Limit 分页会有什么效率问题？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;go的内存管理&lt;/p&gt;
&lt;p&gt;go和php的区别&lt;/p&gt;
&lt;p&gt;go项目的调用过程&lt;/p&gt;
&lt;p&gt;es的日志量&lt;/p&gt;
&lt;p&gt;每一行一个单词&lt;/p&gt;
&lt;p&gt;1：cookie与session的区别&lt;br&gt;2：mysql性能优化（慢日志，explain，索引，内存碎片化）&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>股票/股票初级</title>
    <link href="http://lcf12307.github.io/2021/06/22/%E8%82%A1%E7%A5%A8/%E8%82%A1%E7%A5%A8%E5%88%9D%E7%BA%A7/"/>
    <id>http://lcf12307.github.io/2021/06/22/%E8%82%A1%E7%A5%A8/%E8%82%A1%E7%A5%A8%E5%88%9D%E7%BA%A7/</id>
    <published>2021-06-22T15:55:01.009Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="股票初级"><a href="#股票初级" class="headerlink" title="股票初级"></a>股票初级</h1><h2 id="股票入门"><a href="#股票入门" class="headerlink" title="股票入门"></a>股票入门</h2><h3 id="股票投资五大流派"><a href="#股票投资五大流派" class="headerlink" title="股票投资五大流派"></a>股票投资五大流派</h3><ul><li>技术投资派：通过分析股票的价格走势，来预测股票未来涨跌</li><li>宏观投资派：逻辑是整个市场经济向好，股市就会向好，研究经济就可以指导股票投资</li><li>有效市场派：认为市场大部分时候对股票的定价是正确的</li><li>成长投资派（预测未来）：更关注公司未来是否有足够高的增长</li><li>价值投资派（把握现在）：看重现在公司是否有足够低的价格，低价高卖就是价值投资的本质<h3 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h3><h4 id="价值投资方法"><a href="#价值投资方法" class="headerlink" title="价值投资方法"></a>价值投资方法</h4><h5 id="捡烟蒂投资法"><a href="#捡烟蒂投资法" class="headerlink" title="捡烟蒂投资法"></a>捡烟蒂投资法</h5></li><li>本杰明.格雷厄姆：100%价值投资法，独创安全边际理论</li><li>烟蒂股：毫不起眼，甚至被抛弃的公司</li><li>需要的成本远低于本身的价值，继续下跌概率小，上涨概率大于下跌概率<h5 id="好公司投资法"><a href="#好公司投资法" class="headerlink" title="好公司投资法"></a>好公司投资法</h5></li><li>巴菲特：喜欢买好公司，偏爱食品行业</li><li>投资核心：找到好公司，低价买入</li><li>好公司的价值最终一定会显现在股价上</li><li>天时：看准入场时机，在股票市场便宜的时候进场买买买</li><li>一家公司的价值=现在公司的价值+未来公司能赚取的价值</li><li>市盈率(PE)=市值/净利润=买下公司需要的钱/每年能赚到的钱<br>PE越小，回本年限越短，越有投资价值</li><li>市净率（PB)=市值/净资产=买下公司需要的钱/属于公司自己的资产</li><li>PB越小，价格越低，越有投资价值</li><li>A股3000=沪深300+中证500+其他各类股票</li><li>找准入场时机：用沪深300和中证500估值处于低估，此时可入场<br>当沪深300和中证500中任一个PE，PB同时满足：</li></ul><p>1.PE处于近十年数值的0-50%<br>2.PB处于近十年数值的0-20%</p><ul><li>可入场投资的三种情况：<br>沪深300PE，PB同时满足条件，中证500没有满足<br>中证500PE，PB同时满足条件，沪深300没有满足<br>沪深300和中证500的PE，PB都同时满足条件</li><li>实操<br>理杏仁官网-搜索框输入“沪深300”查询该指数的数据<br>选“PE-TTM，加权平均值，十年”，可以看到PE图<br>PE－TTM：就是PE，TTM是一种更为精确计算PE的方式<br>加权平均值：把沪深３００的所有公司的市值相加除以净利润之和，相当于把这３００家公司“合并”成一家大公司计算PE<br>１０年：通常７－１０年，中国股市会经过一个完整的涨跌大周期，选择十年，能较客观地判断当前估值相对于过去１０年是高还是低<br>PE分位点：把过去１０年PE从小到大排序，当前PE所处位置<br>１００％表示当前PE是最大值，５０％表示当前PE处于中间位置<br>点击PB，可以查看PB图<br>搜索中证５００，查看PE，PB<br>判断某天是否适合入场，满足其中一个即可<br>沪深３００当天PE分位点＜５０％且PB分位点＜２０％，十年加权平均值<br>中证５００当天PE分位点＜５０％且PB分位点＜２０％，十年，加权平均值<br>地利：合理布局资金，建立自己的投资组合，规避风险<br>股市风险<br>系统性风险:整个股票市场存在的下跌风险，我们需先估值再入市<br>政策风险:政策改变导致企业生存条件变化<br>购买力风险:通货膨胀的风险<br>利率风险:市场利率会不断波动<br>非系统性风险:单只股票本身的风险<br>经营风险:公司经营的错误决策可能导致公司业绩大幅下滑<br>信用风险:公司违背信用所产生的风险<br>道德风险:违背道德事件，如三鹿的“毒奶粉事件”<br>规避风险<br>规避系统风险:先估值再入市<br>规避非系统风险:构建组合投资，资金分散到多个行业的多个股票上，鸡蛋不要放在同一个篮子里<br>回避风险时，并不是买的股票越多越科学，持有4-8只股票是比较经济，有效的做法<br>分散行业：同行业资金占比不要超过30%<br>人和：学会建设过硬的心理素质<br>白马组合<br>“好公司”投资法：赚业绩提升的钱<br>初筛白马股<br>买股票的条件<br>资金：投资的必要条件<br>心态：优秀投资者必备的素质<br>选股：开始买股票最重要的事情，一个好的股票，上涨的时候更多的回报，下跌的时候更大的耐心<br>头脑清晰，理性看待价格上涨<br>可能跟随价值上涨<br>可能只是围绕价值波动<br>白马股票：信息相对可靠，长期业绩优秀，投资回报率高<br>投资回报率：投资多少和能赚多少的比例<br>股票投资回报率就是投资收益率=[（卖出价格/买入价格）-1]<em>100%<br>年化复合收益率=【（卖出价格/买入价格）^（1/n）-1】</em>100%，n是投资年限<br>净资产收益率（ROE）=净利润/净资产，代表了企业赚钱能力<br>ROE越高，股票的年化收益率就越高<br>初筛条件<br>ROE连续7年&gt;=15%<br>上市时间&gt;5年，因为上市时间太短的话，业绩不够稳定<br>初筛方法</li></ul><p>1.打开同花顺旗下“i问财”网站（<a href="https://www.iwencai.com）" target="_blank" rel="noopener">https://www.iwencai.com）</a><br>2.文本框输入查询条件：2012年到2018年ROE大于等于15%，2019年06月30日ROE大于等于7.5%，上市时间大于5年，点击按钮“问一下财”，系统自动识别条件，并把输入的条件用“且”的关系关联起来，查出股票数据<br>3.初步筛选出了43个白马股了，可以导出数据<br>注意：财报披露是有延迟的（速记：1214）<br>第一季度结束后一个月内公布<br>第二个季度结束后两个月内公布<br>第三季度结束后一个月内公布<br>第四季度即年报是结束后4个月内公布<br>剔除周期股<br>经济周期：国民经济呈现扩张与紧缩交替波动变化<br>必然发生<br>循环往复：复苏，繁荣，衰退，萧条，类似四季循环<br>周期性行业：业绩紧跟经济周期起起伏伏，比如：汽车行业<br>非周期性行业：受经济周期影响较小，经营业绩更稳定，比如：医药行业，食品行业<br>周期股：受经济周期影响大，所处行业属于周期性行业<br>四类要避开的行业（周期性行业）<br>作为工业基础原材料的大宗商品相关行业（主要用于经济发展）<br>比如：采掘服务，钢铁，化工合成材料，化工新材料，石油矿业开采，化学制品等<br>航运业（运输货物）<br>比如：远洋运输，港口航运，机场航运，交通设备服务等<br>非生活必需品行业，及与之相关的行业（非必需）<br>如：国防军工，汽车零件，汽车，建筑材料，建筑装饰，房地产等<br>非银行的金融行业<br>如：证券，保险及其他<br>方法<br>1.“i问财”中初筛白马股，输入查询条件：2012年到2018年ROE大于等于15%，2019年06月30日ROE大于等于7.5%，上市时间大于5年，行业。点击按钮“问一下财”，查询数据并导出<br>2.剔除周期股，打开表格，把所属行业是周期性行业的数据剔除<br>剔除基本面转坏的股票<br>评估业绩下滑，四个指标有一个为负数就剔除该股<br>最近年度营收增长率 = （本年营业收入 - 去年营业收入） / 去年营业收入<br>最近年度净利润增长率 = （本年净利润 - 去年净利润） / 去年净利润<br>最近季度营收增长率 = （本季度营业收入 - 去年同季度营业收入） / 去年同季度营业收入<br>最近季度净利润增长率 = （本季度净利润 - 去年同季度净利润） / 去年同季度净利润<br>方法<br>1.“i问财”输入查询条件：2012年到2018年ROE大于等于15%，2019年6月30日ROE大于等于7.5%，营收增长率和净利润增长率，上市时间大于5年，行业，2018年营收增长率和净利润增长率<br>2.去掉不必要的列，导出数据<br>3.导出的表格筛选行业，去掉周期性行业<br>4.筛选出最近季度和最近年度的营收增长率和净利润增长率大于0，排除掉小于0的即业绩下滑的股<br>财报三表分析<br>财报：记录公司所有经营事务的报表，分为季度报表，半年报表，年度报表<br>利润表（损益表）：体现公司在一段时间内是赚钱还是亏钱<br>营业利润=营业收入 - 营业成本 - 三费<br>营业收入：卖东西的收入，只要卖出东西，无论是否收到钱都计入<br>营业成本：购买生产货物的原材料等所付出的钱<br>三费：管理费用，销售费用，财务费用<br>净利润 = 营业利润 - 所得税<br>资产负债表<br>记录某时公司有多少钱，财，物以及欠别人多少钱<br>现金流量表<br>公司现金流入流出情况，开支流水账，记录花出去多少钱，收到多少钱<br>经营活动现金流量<br>利润表<br>投资现金流量<br>资产<br>筹资活动现金流量<br>负债<br>识别信息相对可靠<br>如何识别收入美化，识别真货假卖<br>小熊定理1：识别真货假卖，是否存在连续两年应收账款增长幅度大于营收增长幅度，存在则不通过检验<br>实操方法<br>理杏仁-输入查询的某股票<br>利润表-我们需要了解最近3年增长情况，所以查询最近4年数据<br>找到营业收入，把数据复制进表格中,计算每年营业收入增长金额<br>资产负债表-应收账款-数据复制进表格，计算每年应收账款增长金额<br>每年应收账款增长金额-营业收入增长金额算出结果，如果连续两年结果大于0，表示连续两年应收账款增长幅度大于营业收入增长幅度，则不通过小熊定理1，要当心<br>如何识别资产美化<br>资产负债表：记录公司某时有多少钱财物，欠多少钱<br>资产<br>货币资金（现金）：顾客找零，临时补货等<br>应收账款：白条，别人欠你的钱<br>存货：原材料和耗材等<br>预付款项：预先支出房租等<br>固定资产：设备，厂房，土地等<br>负债<br>应付款项：欠供应商的贷款<br>短期借款：如借朋友的钱，一年内还<br>长期借款：如借银行的钱，为期5年<br>所有者权益（净资产）：属于公司自己的<br>资本公积金<br>未分配利润<br>核心：资产=负债+所有者权益<br>问题主要在存货上，存货不仅指生产出的货物，还包括生产用的原材料，生产过程中的半成品，财报的存货只能看到资金总额，这就给了别有用心的公司一个机会<br>识别存货造假<br>小熊定理2：连续两年存货增长大于营业收入增长，这家公司存货可能有问题<br>实操方法<br>1.理杏仁网站查询某股票信息，在利润表中找到连续4年的营业收入数据，并计算出营业收入增长金额<br>2.在资产负债表中找到连续4年的存货数据，并计算存货增长金额<br>3.验证小熊定理2，比较每年营业收入增长金额和存货增长的差异，用当年存货增长减去营业收入增长金额<br>结果大于0，说明存货涨幅更大，小于0则说明营业收入丈夫更大<br>当出现连续2年结果都大于0，说明公司连续两年存货增长金额大于营业收入增长金额，不通过小熊定理2，要当心了<br>识别资产安全（鉴别公司是否有破产的风险）<br>小熊定理3：如果一家公司的流动负债远大于流动资产的话，说明这家公司已经非常接近破产了<br>流动资产：一年内可以变现的资产，如货币资金，存货，预付款项<br>流动负债：一年内必须要还的钱，如应付账款，短期借款<br>流动比率 = 流动资产 / 流动负债<br>如果流动比率小于1，说明流动资产小于流动负债，危险的信号<br>实操方法<br>理杏仁-查询股票资产负债表中最近3年的流动比率，最近3年有2年都小于1就要当心了<br>i问财也可以查询<br>除银行股外，所选公司只要有一个定理不能通过检验，就要剔除<br>小熊定理1能看出公司是否有美化收入嫌疑<br>小熊定理2能看出公司是否有美化资产的嫌疑<br>小熊定理3能轻松鉴别公司是否有破产风险<br>自由现金流如此重要，加分项<br>小熊定理4：当一家公司经营活动现金流量净额远大于净利润，说明这家公司可能有隐藏的盈利能力，有可能是座金矿<br>理杏仁-查询公司-现金流量表-近三年经营活动产生的现金流量净额-和净利润对比<br>小熊定理5：自由现金流是衡量公司现金流情况的指标，代表公司真正能自由运用的资金，比净利润更真实，更难作假<br>自由现金流=经营活动产生的现金流量净额-资本开支<br>资本开支是现金流量表中的购建固定资产，无形资产和其他长期资产支付的现金<br>理杏仁-查询公司-财务指标-现金流量里面的自由现金流大于0就加分了<br>实操：构建白马组合<br>筛选步骤<br>投资回报率高<br>ROE连续7年大于等于15%，上市时间大于5年<br>长期业绩优秀<br>剔除周期股，看行业<br>剔除当下业绩显现下滑迹象的公司<br>信息相对可靠<br>小熊三大定理检验经过筛选的股票，财报信息是否可靠<br>判断股票价格<br>股票的贵与便宜相对价值而言的，估值体现价格和价值的关系<br>PE分位点和PB分位点小于50%<br>理杏仁-查询公司-价值分析-PE分位点和PB分位点（10年数据）历史看前复权，现在看股价<br>怎么买<br>PE分位点升序排列，优先买PE分位点低的，平均分配资金<br>PE升序，整理筛选出来的公司<br>找出它们当时的股价，计算购买一手的价格<br>根据资金量分配选择股票数量，同行业不能超过30%，行业看二级行业<br>同行业股票数量不超过30%，即公司数量不超过30%<br>同行业资金占比也不超过30%<br>卖出<br>股票价格高于价值了，你贵了<br>基本面转坏了，你变了，每年一次筛选对比<br>发现更好更便宜的，别人比你更好了<br>稳住心态，长期持有<br>短期可能下跌，长期价格回归价值<br>总结<br>PE分位点升序排列，优先买PE分位点低的，平均分配资金<br>每年筛选一次对比调仓，贵了，变了就剔除<br>干货补充<br>容易出白马股的行业，一般来说，有护城河的公司都会有较高的投资回报率，也有不错的业绩。<br>护城河<br>无形资产护城河：看不见摸不到的资产<br>品牌护城河：大家耳熟能详的各种品牌，就是公司想要打造的品牌护城河<br>品牌溢价护城河：可以卖得比同类产品贵的能力，就是品牌溢价能力，这种公司就有品牌 溢价护城河。<br>有这种护城河的公司产品，即使价格卖得高卖得贵，消费者为了这个牌子也 会买，比如说贵州茅台，比如说苹果手机。<br>品牌搜索护城河：有这种护城河的公司产品，在我们想买什么的时候，会出现在我们脑子里。<br>比如说我们想买牛奶，第一反应可能是伊利，可能是蒙牛<br>专利护城河：专利就是只有我有的权利<br>有专利护城河的公司，就是那种可以持续性研发出产品，并且申请出专利的 公司，比如说大型药厂<br>政府授权护城河:政府授权的是你能不能进入这个行业<br>比较典型的有这个护城河的公司是赌场，在内地，赌场就禁止经营，而澳门现在也不会批准建新的赌场，所以，澳门那几家赌场的竞争对手并不会增加！<br>转换成本护城河<br>如果一个产品的用户，更换这个产品时需要付出很多代价或成本，我们就说 这个产品具有转换成本，这家公司具有转换成本护城河。<br>如果一家医院要换信息系统，它会面临怎样的麻 烦？<br>数据转移<br>医生，护士学习新系统<br>核对旧病例，导入是否完整<br>网络效应护城河<br>严格来说是转换成本的一种。 因为互联网的日益发达，受到了越来越多的重视，很典型的公司就是腾讯控股。<br>像微信这种，随着使用人数的增多，产品价值越高的公司，就是有网络效应 护城河的公司。<br>规模效应护城河<br>规模带来的效应，生产数量越多固定资产成本越低<br>固定成本（厂房设备等固定资产）的总额不会随着成品数量变化，但是 随着生产数量的增多，每个产品中固定成本的量会变小。<br>易出护城河的行业（速记：白衣小软妹），可以优先选择好行业里的公司<br>白酒行业、医药行业、软件行业、媒体行业、消费行业<br>通过估值四象限快速判断一家公司的状态<br>PE 是从企业盈利的角度考察现在的股价是不是合理，而 PB 是从企业的净资产角度考察现在的股价是不是合理。粗略来分，我们可以把大于 50%的分位点称为高，把小于 50%的分位点称 为低。<br>估值四象限<br>第一象限：高 PB，高 PE<br>泡沫象限，远离<br>pe、pb 越高，说明整个 市场越贵，下跌的可能越大。<br>被疯狂炒作的个股，比方说 2015 年妖股第一名暴风集团。<br>第二象限：低 PB，高 PE，分析公司业绩未来是否有变好的可能<br>企业自身运营不善，避开<br>周期性行业低估期，买入持有至行业回暖，也有可观的收益<br>第三象限：低 PB，低 PE，大概率是比较合适的投资机会，辨别PE是真低还是价低（盈利能力下降，财报是否体现）<br>市场处于熊市的末期，此时由于熊市长期的下跌导致大家的投 资情绪都过于悲观，会使得很多股票的价格跌到实际价值以下，出现大量的低 PB、低 PE 股票，这时候意味着，投资的机会来了。<br>企业遭遇经营困境、或行业政策、竞争态势等外部环境发生 不利变化。由于市场有时会提前并且迅速做出反应，导致公司股价下降，市 值变得很低，自然的 PB 就会很低。<br>PE“真低”<br>财报中的数据已经显示出公司盈利能力的下降，投资者们 看到公司盈利下降了，纷纷卖出，公司市值必然下降，市值与净利润同时下降导 致的低 PE，就是 PE“真低”。只要公司未来盈利能力可以恢复，就是好的入场 时机。<br>PE“假低”<br>公司业绩的披露有滞后性，而 PE 的计算又是基于最近披露的净利润， 所以当最近一期公司财报并没有显示出业绩下滑，也就是说净利润仍然是高的， pe=市值/净利润，公司的 PE 依然很低。<br>一旦未来公司财报显示出公司的盈利能力快速下滑，那很可能会出现股价越 跌，PE 越高的情况。<br>因为虽然股价在下跌，但盈利下跌速度更快，可能直接跌成负的了。 这就是我们必须尽力避免的低价值陷阱，也就是 PE“假低”。<br>第四象限：高 PB，低 PE<br>英雄象限，避开<br>PB 高，意味着投资者们特别看好公司的发展，对公司的盈利能力有着很高的期待，毕竟市场给予了比净资产高很多倍的溢价嘛！<br>一旦公司盈利不达预期，曾经追捧的那些投资者们就会纷纷弃他而去， 导致股价下跌。<br>PB高，不用管PE低不低，直接避开<br>分红过后需要除权除息，所以股价必然下降<br>分红<br>一种是上市公司直接给股东送股票，这种称为“股票股利”<br>公司的股价=总市值/总股数，总股数增加了，每股的价格当然也会减少，这种行为就叫做除权。<br>另外一种是现金分红，就是公司直接给股东发现金，这种称为“现金股利”<br>发现金股利的时候，会从股价中将这一部分股利扣除，这就叫做除息<br>填权<br>公司的价值短期内变动幅度有限，只要大家看好公司的价值，股 价降低了公司价值没有变，当然会有人去买，因此，除权除息后，股价都会涨回 和原来差不多，这个过程称之为填权。<br>红利税<br>红利税并不是在分红派息那天扣除的，而是在卖出股票的时候 扣除，只要持股超过一年，就不需要缴纳，可见，咱们股市的监管方，也是希望 大家做长期的价值投资者，而非炒作的投机者。<br>什么公司不能碰<br>第一种，大品牌更可靠<br>首先，知名企业有着很大的曝光率，更容易被发现财务造假。<br>其次，他们财务造假的成本太高。<br>第二种，不要 ST。股票名称前带有“ST”、“<em>ST”、“SST”、“S</em>ST”、“NST”标识的， 一定不要投！<br>有上述标识的股票意味着，该公司至少连续两年亏损，将被证监会处理，面 临整改或者退市。<br>ST 代表的就是亏损股<br>第三种，曾经出现过违反道德规范、财报作假等重大丑闻的，被证监会立案调查 还未有结果的公司不要买。<br>只要在百度中用“公司名+证监会”， 这一组关键词搜索，就能看到相关的信息。<br>便宜组合<br>“捡烟蒂”投资法<br>便宜组合：赚股价回升的钱，不太挑剔股票质量，主要看折扣<br>筛选指标<br>双低组合，低PE低PB<br>0&lt;PE&lt;10<br>0&lt;PB&lt;1.5<br>大方分钱<br>股息率&gt;3%<br>股息率=公司过去一年的累计现金分红/公司市值，A股公司平均股息率约为3%<br>实操筛选<br>理杏仁-选股-基本面选股<br>选择范围-A股市场-沪深两市<br>条件设置-基本指标-点击筛选便宜组合的三个指标<br>市盈率选PE-TTM（扣非）<br>扣非：扣除非经常性损益（利润表中一部分和公司正经运营业务无关）<br>不含商誉的PB<br>公司收购其他公司时超过净资产的部分，是资产的一部分，但本质不是真正的资产<br>股息率<br>两个选股条件<br>PB（不含商誉）分位点（10年），股价<br>时间选择最近时间<br>按照筛选条件，选好最大值最小值，开始选股，最后导出文件<br>排序筛选法<br>PE，PB升序排列，股息率降序排列，三个指标排名加总，算出总排名<br>实操<br>分别在PE，PB，股息率右边增加列PE排名，PB排名，股息率排名。再加一列综合排名<br>用RANK.EQ函数计算PE排名，PB排名，股息率排名<br>数值-想要排序的那个数值<br>引用-数值所在的数据集合<br>排序方式<br>1：升序<br>0：降序<br>计算综合排名：把PE排名，PB排名，股息率排名三个排名相加<br>综合排名升序排列<br>具体筛选<br>8-10只构建便宜组合<br>根据综合排名从低到高依次挑选，行业要分散：同一行业公司不要超过30%<br>用PB分位点进一步挑选低估股票，PB分位点&lt;20%加入组合<br>PB（不含商誉）分位点（10年）：把过去10年的PB从小到大排列，现在PB所在的位置<br>PB分位点&lt;20%，现在是低估，适合买入<br>PB分位点&gt;50%，现在是高估，不适合买入<br>资金分配<br>根据资金量确定便宜组合的股票数量<br>同一行业股票数量和资金不超过30%<br>资金均分<br>确定价格最高的买一手，其余股票金额往这个金额上靠就可以了<br>筛选数量不够时<br>放宽筛选条件<br>寻找别的投资机会<br>持币观望，等待入场时机<br>被动投资<br>每隔半年调仓一次，将组合整体估值降低<br>每隔半年重新筛一次便宜组合<br>将最新筛出的便宜组合和原来组合对比<br>新旧组合重合部分保留<br>卖掉旧组合里有，但新组合里没有的股票<br>补入就组合里没有，但新组合里有的股票<br>清楚投资原理，投资方法<br>了解攀升强度，明白回撤幅度<br>具备耐心和坚持才配得上优厚的回报<br>轻松实践<br>买股票常识<br>A股交易时间：周一到周五每天4小时交易时间（法定休假日除外），上午9:30-11:30，下午13:00-15:00<br>K线图（蜡炬图）<br>蜡炬图<br>阳线：红色的，代表股价上涨，当天收盘价大于开盘价即收盘价在上开盘价在下<br>阴线：绿色的，代表股价下跌，当天收盘价小于开盘价即开盘价在上收盘价在下<br>阳线和阴线都有上影线和下影线分部表示最高价和最低价<br>计算周期<br>日K线：最常用，以当天开盘价，收盘价，最高价，最低价来画的Ｋ线图<br>周K线：以周一开盘价，周五收盘价，全周最高价和最低价来画的K线图<br>月K线：以一个月第一个交易日的开盘价，最后一个交易日收盘价，全月最高价和最低价来画的K线图<br>季K线<br>年K线<br>每根Ｋ线下面对应有一条红色或绿色的条形图，代表交易量（一段时间内成交的股票数量，受供求关系影响）<br>交易单位<br>以“手”为单位，１手＝100股, 1-99股称为零股<br>买入最低单位为手<br>分红送股可能有零股，卖出可以有零股，但是零股必须一次性卖出<br>A股交易费用（沪市和深市）<br>无论是基金开的还是咱们股初扫码开的华泰优惠开户，都是调整成股票万分之1.8，起点5元， 基金万分之1，起点0.1元<br>印花税<br>国家税务局<br>卖出收，成交金额的千分之一<br>过户费<br>中登公司<br>买入和卖出都收，成交金额的千分之0.02<br>佣金<br>证交所证券公司<br>买入和卖出都收，最高千分之3，最低5元<br>报价方式<br>限价委托（常用）<br>用户限定价格，价格可控，交易时间不可控<br>好处：价格可控，当股价到达了设置的价格成交<br>坏处：如果股价始终高于限定的价格，就需要耐心等待，也可能当天成交不了<br>市价委托（不常用）<br>只指定交易数量，价格不可控，交易时间可控<br>好处：即时成交<br>坏处：成交价格可能偏贵<br>特色<br>涨跌停板制度<br>股票上涨幅度和下跌幅度只能是上一个交易日收盘价的10%<br>ST开头的股票，每日涨跌停幅度限制只有5%<br>新股首日上市股价涨幅不受10%限制，但是最高幅度不能超过发行价的44%<br>交易制度：T+1交易，忌频繁交易<br>当天买入的证券不能当天卖出，第二天才可以卖出<br>当天卖出股票收回的资金只能用来买新的股票，不能提取。第二天才可提取<br>人和：股海沉浮，锦囊妙计<br>1.贪多嚼不烂<br>入门简单，严格执行投资计划，会获得合理收益的。精通难，想要超额收益，需要付出超额努力<br>2.笑看涨跌，波澜不惊<br>面对股价大幅度下跌，要相信组合的力量，不要每天看盘，一个月一次就够了<br>3.保持耐心，长期持有<br>时间是财富自由的基本条件#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;股票初级&quot;&gt;&lt;a href=&quot;#股票初级&quot; class=&quot;headerlink&quot; title=&quot;股票初级&quot;&gt;&lt;/a&gt;股票初级&lt;/h1&gt;&lt;h2 id=&quot;股票入门&quot;&gt;&lt;a href=&quot;#股票入门&quot; class=&quot;headerlink&quot; title=&quot;股票入门&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>商业/行业调研步骤</title>
    <link href="http://lcf12307.github.io/2021/06/22/%E5%95%86%E4%B8%9A/%E8%A1%8C%E4%B8%9A%E8%B0%83%E7%A0%94%E6%AD%A5%E9%AA%A4/"/>
    <id>http://lcf12307.github.io/2021/06/22/%E5%95%86%E4%B8%9A/%E8%A1%8C%E4%B8%9A%E8%B0%83%E7%A0%94%E6%AD%A5%E9%AA%A4/</id>
    <published>2021-06-22T15:55:01.006Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本的研究框架"><a href="#基本的研究框架" class="headerlink" title="基本的研究框架"></a>基本的研究框架</h2><p>一般常见的研究框架包括以下这些：</p><p>产品</p><p>这个行业的主要产品是什么？</p><p>产品的主要形态是什么？</p><p>满足了用户哪一方面的需求？</p><p>产品的替代品包括什么？</p><p>产品的关键技术是哪一项？</p><p>产品的成本结构如何？</p><p>市场</p><p>公司的市场定位？</p><p>公司的主要用户？</p><p>市场空间有多大？</p><p>近几年的市场增长率有多高？</p><p>预计未来几年的市场增速如何？</p><p>市场的主要玩家是谁？</p><p>行业概括</p><p>基本的行业术语</p><p>行业的发展历程和变迁</p><p>行业的监管情况和主要政策是什么？</p><p>行业发展的有利因素和不利因素</p><p>行业发展的瓶颈</p><p>行业目前所处的周期</p><p>行业的供应链情况</p><p>用PESTEL模型分析，这个行业如何？（PESTEL模型如下）</p><p><em>P</em>：政治因素，是否是公有设施行业？是否受到政策和监控的严控？如房地产</p><p><em>E</em>：经济因素，哪些经济因素影响了这个行业的发展？如奢侈品</p><p><em>S</em>：社会因素，社会风俗和思想开放程度对这个行业有多大的影响？如医美</p><p><em>T</em>：技术因素，技术是如何影响这个行业的？如手机</p><p><em>E</em>：环境因素，环保政策和环保理念如何影响行业发展？如新能源汽车</p><p><em>L</em>：法律因素，某些法律法规的出台对行业的影响，如广告法影响自媒体等。</p><p>竞争</p><p>行业的竞争情况如何，是完全竞争？寡头垄断？还是寡头竞争？</p><p>业内几个主要玩家的盈利模式分别是怎样的？</p><p>在竞争胜出的关键行业因素是什么？</p><p>该行业是否受到海外竞争的压力</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本的研究框架&quot;&gt;&lt;a href=&quot;#基本的研究框架&quot; class=&quot;headerlink&quot; title=&quot;基本的研究框架&quot;&gt;&lt;/a&gt;基本的研究框架&lt;/h2&gt;&lt;p&gt;一般常见的研究框架包括以下这些：&lt;/p&gt;
&lt;p&gt;产品&lt;/p&gt;
&lt;p&gt;这个行业的主要产品是什么？&lt;/p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【第一课】etcd&amp;zookeeper</title>
    <link href="http://lcf12307.github.io/2020/03/23/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/etcd&amp;zookeeper/"/>
    <id>http://lcf12307.github.io/2020/03/23/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/etcd&amp;zookeeper/</id>
    <published>2020-03-23T08:14:00.000Z</published>
    <updated>2021-06-22T15:55:01.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd-和zookeeper"><a href="#etcd-和zookeeper" class="headerlink" title="etcd 和zookeeper"></a>etcd 和zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现。etcd是由CoreOS开发并维护的，灵感来自于 ZooKeeper 和 Doozer，它使用Go语言编写，并通过Raft一致性算法处理日志复制以保证强一致性。Raft是一个来自Stanford的新的一致性算法，适用于分布式系统的日志复制，Raft通过选举的方式来实现一致性，在Raft中，任何一个节点都可能成为Leader。Google的容器集群管理系统Kubernetes、开源PaaS平台Cloud Foundry和CoreOS的Fleet都广泛使用了etcd。</span><br><span class="line"></span><br><span class="line">etcd 集群的工作原理基于 raft 共识算法 (The Raft Consensus Algorithm)。etcd 在 0.5.0 版本中重新实现了 raft 算法，而非像之前那样依赖于第三方库 (https:&#x2F;&#x2F;github.com&#x2F;goraft&#x2F;raft) 。raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Zookeeper是一个用户维护配置信息、命名、分布式同步以及分组服务的集中式服务框架，它使用Java语言编写，通过(http:&#x2F;&#x2F;www.stanford.edu&#x2F;class&#x2F;cs347&#x2F;reading&#x2F;zab.pdf)协议来保证节点的一致性。因为Zookeeper是一个CP型系统，所以当网络分区问题发生时，系统就不能注册或查找服务。</span><br><span class="line"></span><br><span class="line">etcd是一个用于共享配置和服务发现的高可用的键值存储系统，使用Go语言编写，通过Raft来保证一致性，有基于HTTP+JSON的API接口。etcd也是一个强一致性系统，但是etcd似乎支持从non-leaders中读取数据以提高可用性；另外，写操作仍然需要leader的支持，所以在网络分区时，写操作仍可能失败。</span><br><span class="line"></span><br><span class="line">在原生接口和提供服务方式方面，etcd更适合作为集群配置服务器，用来存储集群中的大量数据。方便的REST接口也可以让集群中的任意一个节点在使用Key&#x2F;Value服务时获取方便。ZooKeeper则更加的适合于提供分布式协调服务，他在实现分布式锁模型方面较etcd要简单的多。所以在实际使用中应该根据自身使用情况来选择相应的服务。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">并且在面对网络分区的时候，为了保持一致性，读取的可用性是可以牺牲的。</span><br></pre></td></tr></table></figure><h3 id="能否用redis替代etcd"><a href="#能否用redis替代etcd" class="headerlink" title="能否用redis替代etcd"></a>能否用redis替代etcd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">不能 </span><br><span class="line">1、redis 没有版本的概念，历史版本数据在大规模微服务中非常有必要，对于状态回滚和故障排查，甚至定锅都很重要</span><br><span class="line">2、redis 的注册和发现目前只能通过 pub 和 sub 来实现，这两个命令完全不能满足生产环境的要求，具体原因可以 gg 或看源码实现</span><br><span class="line">3、etcd 在 2.+版本时，watch 到数据官方文档均建议再 get 一次，因为会存在数据延迟，3.+版本不再需要，可想 redis 的 pub 和 sub 能否达到此种低延迟的要求</span><br><span class="line">4、楼主看到的微服务架构应该都是将 etcd 直接暴露给 client 和 server 的，etcd 的性能摆在那，能够承受多少的 c&#x2F;s 直连呢，更好的做法应该是对 etcd 做一层保护，当然这种做法会损失一些功能</span><br><span class="line">5、redis 和 etcd 的集群实现方案是不一致的，etcd 采用的是 raft 协议，一主多从，只能写主，底层采用 boltdb 作为 k&#x2F;v 存储，直接落盘</span><br><span class="line">6、redis 的持久化方案有 aof 和 rdb，这两种方案在宕机的时候都或多或少的会丢失数据</span><br><span class="line"></span><br><span class="line">总结，瑞迪斯从来没有想过抢 etcd 在服务注册和发现的饭碗，目前的架构来说也抢不动，在缓存方面目前在性能和功能也无出其右； etcd 只关注在服务注册与发现方面，非要当做 k&#x2F;v 存储来用（丢弃 watch 特性而言）也可以用，性能也不错，但只能说你选错对象了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pubsub 不会保留历史信息, 收到就行, 收不到也不会重复通知, 换句话说, 你必须客户端永远在线, 才能收到 sub 的信息, 一旦客户端网络短时间出问题, 就收不到变更通知了, redis 可以做, 但是不是用 pubsub 做, 而是要自己做一个定时的轮询, 时刻保持客户端信息最新</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CAP： </span><br><span class="line">C：Consistency 即一致性</span><br><span class="line">A：Availability 即可用性</span><br><span class="line">P：Partiton tolerence 即分区容忍性</span><br><span class="line"></span><br><span class="line">etcd是CP的 而redis是AP的</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;etcd-和zookeeper&quot;&gt;&lt;a href=&quot;#etcd-和zookeeper&quot; class=&quot;headerlink&quot; title=&quot;etcd 和zookeeper&quot;&gt;&lt;/a&gt;etcd 和zookeeper&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="golang" scheme="http://lcf12307.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】golang常考知识点</title>
    <link href="http://lcf12307.github.io/2020/03/19/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/go/"/>
    <id>http://lcf12307.github.io/2020/03/19/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/go/</id>
    <published>2020-03-19T08:14:00.000Z</published>
    <updated>2021-06-22T15:55:01.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组和切片的区别"><a href="#数组和切片的区别" class="headerlink" title="数组和切片的区别"></a>数组和切片的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组类型的值（以下简称数组）的长度是固定的，而切片类型的值（以下简称切片）是可变长的。</span><br><span class="line">我们其实可以把切片看做是对数组的一层简单的封装，因为在每个切片的底层数据结构中，一定会包含一个数组。数组可以被叫做切片的底层数组，而切片也可以被看作是对数组的某个连续片段的引用。</span><br></pre></td></tr></table></figure><h3 id="golang中的引用类型"><a href="#golang中的引用类型" class="headerlink" title="golang中的引用类型"></a>golang中的引用类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在golang中只有三种引用类型它们分别是切片slice、字典map、管道channel。其它的全部是值类型，引用类型可以简单的理解为指针类型，它们都是通过make完成初始化</span><br></pre></td></tr></table></figure><h3 id="进程-线程-和-协程"><a href="#进程-线程-和-协程" class="headerlink" title="进程 线程 和 协程"></a>进程 线程 和 协程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 进程、线程(内核级线程)、协程(用户级线程)</span><br><span class="line"></span><br><span class="line">协程是一种用户态的轻量级线程，协程的调度完全由用户控制（进程和线程都是由cpu 内核进行调度）。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</span><br><span class="line">对于 进程、线程，都是有内核进行调度，有 CPU 时间片的概念，进行 抢占式调度（有多种调度算法）</span><br><span class="line">对于 协程(用户级线程)，这是对内核透明的，也就是系统并不知道有协程的存在，是完全由用户自己的程序进行调度的，因为是由用户程序自己控制，那么就很难像抢占式调度那样做到强制的 CPU 控制权切换到其他进程&#x2F;线程，通常只能进行 协作式调度，需要协程自己主动把控制权转让出去之后，其他协程才能被执行到。</span><br><span class="line"></span><br><span class="line">内存消耗方面</span><br><span class="line">每个 goroutine (协程) 默认占用内存远比 Java 、C 的线程少。</span><br><span class="line">goroutine：2KB（官方）</span><br><span class="line">线程：8MB（参考网络）</span><br><span class="line"></span><br><span class="line">线程和 goroutine 切换调度开销方面</span><br><span class="line">线程&#x2F;goroutine 切换开销方面，goroutine 远比线程小</span><br><span class="line">线程：涉及模式切换(从用户态切换到内核态)、16个寄存器、PC、SP...等寄存器的刷新等。</span><br><span class="line">goroutine：只有三个寄存器的值修改 - PC &#x2F; SP &#x2F; DX.</span><br></pre></td></tr></table></figure><h3 id="Go-语言对测试函数的名称和签名都有哪些规定？"><a href="#Go-语言对测试函数的名称和签名都有哪些规定？" class="headerlink" title="Go 语言对测试函数的名称和签名都有哪些规定？"></a>Go 语言对测试函数的名称和签名都有哪些规定？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明。</span><br><span class="line">对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。</span><br><span class="line">对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。</span><br></pre></td></tr></table></figure><h3 id="go的性能分析"><a href="#go的性能分析" class="headerlink" title="go的性能分析"></a>go的性能分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">runtime&#x2F;pprof；net&#x2F;http&#x2F;pprof；runtime&#x2F;trace；</span><br><span class="line">$ go tool pprof cpuprofile.out</span><br><span class="line">Type: cpu</span><br><span class="line">Time: Nov 9, 2018 at 4:31pm (CST)</span><br><span class="line">Duration: 7.96s, Total samples &#x3D; 6.88s (86.38%)</span><br><span class="line">Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)(pprof)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组和切片的区别&quot;&gt;&lt;a href=&quot;#数组和切片的区别&quot; class=&quot;headerlink&quot; title=&quot;数组和切片的区别&quot;&gt;&lt;/a&gt;数组和切片的区别&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="golang" scheme="http://lcf12307.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】消息队列</title>
    <link href="http://lcf12307.github.io/2020/03/17/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://lcf12307.github.io/2020/03/17/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-03-17T08:14:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消息队列的使用场景"><a href="#消息队列的使用场景" class="headerlink" title="消息队列的使用场景"></a>消息队列的使用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 解耦</span><br><span class="line">2. 异步</span><br><span class="line">3. 削峰</span><br></pre></td></tr></table></figure><h3 id="怎么保证消息不会丢失"><a href="#怎么保证消息不会丢失" class="headerlink" title="怎么保证消息不会丢失"></a>怎么保证消息不会丢失</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保证消息的幂等性</span><br></pre></td></tr></table></figure><h3 id="推和拉模式分别有什么优势和劣势"><a href="#推和拉模式分别有什么优势和劣势" class="headerlink" title="推和拉模式分别有什么优势和劣势"></a>推和拉模式分别有什么优势和劣势</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Push方式：</span><br><span class="line">优点：有消息就推给消费者。延迟小,几乎可以做到实时。等等。。。。</span><br><span class="line"></span><br><span class="line">缺点：Server端接收到消息后，主动把消息推送给Client端，实时性高。对于一个提供队列服务的Server来说，用Push方式主动推送有很多弊端；首先是加大Server端的工作量，进而影响Server的性能，其次Client的处理能力各不相同，Client的状态不受Server控制，如果Client不能及时处理Server推送过来的消息，会造成各种潜在问题。</span><br><span class="line"></span><br><span class="line">菠萝科技注：意思是1 加大server(broker)工作量,影响性能。2 有的消费者机器配置好处理能力强,有的配置低处理能力低,但是server推相同数量级消息给消费者，就会导致消费者强的等待,弱的处理效率跟不上,从而导致崩溃。3server资源相比消费者的资源肯定是更宝贵  4总结下就是客户端慢消费(设计到io等耗时操作)时会放大缺点。</span><br><span class="line"></span><br><span class="line">Pull方式：</span><br><span class="line">优点：对比push优点就是消费者可以根据自己能力拉取消息处理。。。</span><br><span class="line"></span><br><span class="line">缺点：Client端循环地从Server端拉取消息，主动权在Client手里，自己拉取到一定量消息后，处理妥当了再接着取。Pull方式的问题是循环拉取消息的间隔不好设定，间隔太短就处在一个“忙等”的状态，浪费资源；每个Pull的时间间隔太长，Server端有消息到来有可能没有被及时处理。</span><br><span class="line"></span><br><span class="line">菠萝科技注：假如处理完消息后，现在空闲，设定多久去server再拉消息？主要问题就是消息处理延迟忙等。server没消息时,但是消费者因为是定时去pull，导致空pull。</span><br></pre></td></tr></table></figure><h3 id="设计一个消息队列"><a href="#设计一个消息队列" class="headerlink" title="设计一个消息队列"></a>设计一个消息队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Producer(消息生产者)：发送消息到Broker。</span><br><span class="line">2.Broker(服务端)：Broker这个概念主要来自于Apache的ActiveMQ，特指消息队列的服务端。主要功能就是：把消息从发送端传送到接收端，这里会涉及到消息的存储、消息通讯机制等。</span><br><span class="line">3.Consumer(消息消费者)：从消息队列接收消息，consumer回复消费确认。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">为了实现上述消息队列的基础功能：</span><br><span class="line">1）消息的传输</span><br><span class="line">2）存储</span><br><span class="line">3）消费</span><br><span class="line"></span><br><span class="line">就需要涉及到如下三个方面的设计：</span><br><span class="line">1）通信协议 统一格式</span><br><span class="line">2）存储选择 速度来看，文件系统&gt;分布式KV（持久化）&gt;分布式文件系统&gt;数据库，而可靠性却截然相反。</span><br><span class="line">3）消费关系维护 单播，就是点到点；而广播，是一点对多点。</span><br><span class="line"></span><br><span class="line">消息的顺序</span><br><span class="line">投递可靠性保证</span><br><span class="line">消息持久化</span><br><span class="line">支持不同消息模型</span><br><span class="line">多实例集群功能</span><br><span class="line">事务特性等</span><br></pre></td></tr></table></figure><h3 id="rabbit-MQ"><a href="#rabbit-MQ" class="headerlink" title="rabbit MQ"></a>rabbit MQ</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">由Erlang语言开发，继承其天生的并发性，稳定性和安全性有保障</span><br><span class="line">协议： AMQP（Advanced Message Queuing Protocol）高级消息队列协议，是一个异步消息传递所使用应用层协议规范，</span><br><span class="line"></span><br><span class="line">Server : 又称Broker, 接受客户端连接, 实现AMQP实体服务</span><br><span class="line">Connection : 连接, 应用程序与Broker的网络连接</span><br><span class="line">Channel : 网络信道, 几乎所有的操作都在Channel中进行, Channel是进行消息读写的通道。客户端可以建立多个Channel, 每个Channel代表一个会话任务。</span><br><span class="line">Message : 消息, 服务器和应用程序之间传送的数据, 有Properties和Body组成。Properties可以对消息进行修饰, 比如消息的优先级, 延迟等高级特性; Body就是消息体内容。</span><br><span class="line">Virtual Host : 虚拟地址, 用于进行逻辑隔离, 最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue, 同一个Virtual Host里面不能有相同名称的Exchange或Queue</span><br><span class="line">Exchange : 交换机, 用于接收消息, 根据路由键转发消息到绑定的队列</span><br><span class="line">Binding : Exchange和Queue之间的虚拟连接, binding中可以包含routing key</span><br><span class="line">Routing Key : 一个路由规则, 虚拟机可用它来确定如何路由一个特定消息</span><br><span class="line">Queue : 也成Message Queue, 消息队列, 用于保存消息并将它们转发给消费者</span><br><span class="line"></span><br><span class="line">消息的可靠性传递或回退</span><br><span class="line">重试机制和幂等性保障</span><br><span class="line">自动确认与手动确认</span><br><span class="line">RabbitMQ提供了一种qos(服务质量保证)功能, 即在非自动确认消息的前提下, 如果一定数目的消息(通过consumer或者channel设置qos的值)未被确认前, 不进行消费新的消息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">消息落库, 对消息状态进行标记</span><br><span class="line">消息的延迟投递, 做二次确认, 回调检查</span><br><span class="line"></span><br><span class="line">step1:消息入库</span><br><span class="line">step2:消息发送</span><br><span class="line">step3:消费端消息确认</span><br><span class="line">step4:更新库中消息状态为已确认</span><br><span class="line">step5:定时任务读取数据库中未确认的消息</span><br><span class="line">step6:未收到确认结果的消息重新发送</span><br><span class="line">step7:如果重试几次之后仍然失败, 则将消息状态更改为投递失败的终态, 后面需要人工介入</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消息队列的使用场景&quot;&gt;&lt;a href=&quot;#消息队列的使用场景&quot; class=&quot;headerlink&quot; title=&quot;消息队列的使用场景&quot;&gt;&lt;/a&gt;消息队列的使用场景&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="数据库" scheme="http://lcf12307.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MYSQL" scheme="http://lcf12307.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】腾讯面试</title>
    <link href="http://lcf12307.github.io/2020/03/14/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.14%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/14/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.14%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-13T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-常用数据类型"><a href="#redis-常用数据类型" class="headerlink" title="redis 常用数据类型"></a>redis 常用数据类型</h3><h3 id="redis的删除机制"><a href="#redis的删除机制" class="headerlink" title="redis的删除机制"></a>redis的删除机制</h3><h3 id="mysql-查询数据量较大的时候"><a href="#mysql-查询数据量较大的时候" class="headerlink" title="mysql 查询数据量较大的时候"></a>mysql 查询数据量较大的时候</h3><h3 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis-常用数据类型&quot;&gt;&lt;a href=&quot;#redis-常用数据类型&quot; class=&quot;headerlink&quot; title=&quot;redis 常用数据类型&quot;&gt;&lt;/a&gt;redis 常用数据类型&lt;/h3&gt;&lt;h3 id=&quot;redis的删除机制&quot;&gt;&lt;a href=&quot;#red
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】腾讯面试</title>
    <link href="http://lcf12307.github.io/2020/03/13/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.13%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/13/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.13%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-12T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;where a&#x3D;1 and b&#x3D;2 and c&#x3D;3</span><br><span class="line">   &#x2F;&#x2F;where a&#x3D;1 and b&lt;2 and c&#x3D;3</span><br><span class="line">   &#x2F;&#x2F;where a&lt;2 and b&#x3D;2</span><br><span class="line">   &#x2F;&#x2F;where b&#x3D;1 and c&#x3D;2</span><br><span class="line">   &#x2F;&#x2F;where a&#x3D;1 and b&#x3D;2 order by c&lt;3</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;var funcList []func()</span><br><span class="line">   &#x2F;&#x2F;for i :&#x3D; 0; i &lt; 3; i++ &#123;</span><br><span class="line">   &#x2F;&#x2F; funcList &#x3D; append(funcList, func() &#123;</span><br><span class="line">   &#x2F;&#x2F;    println(i)</span><br><span class="line">   &#x2F;&#x2F; &#125;)</span><br><span class="line">   &#x2F;&#x2F;</span><br><span class="line">   &#x2F;&#x2F;&#125;</span><br><span class="line">   &#x2F;&#x2F;</span><br><span class="line">   &#x2F;&#x2F;for j :&#x3D; 0; j &lt; 3; j++ &#123;</span><br><span class="line">   &#x2F;&#x2F; funcList[j]()</span><br><span class="line">   &#x2F;&#x2F;&#125;</span><br></pre></td></tr></table></figure><h3 id="消息队列推拉分别的利弊"><a href="#消息队列推拉分别的利弊" class="headerlink" title="消息队列推拉分别的利弊"></a>消息队列推拉分别的利弊</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Push方式：</span><br><span class="line">优点：有消息就推给消费者。延迟小,几乎可以做到实时。等等。。。。</span><br><span class="line"></span><br><span class="line">缺点：Server端接收到消息后，主动把消息推送给Client端，实时性高。对于一个提供队列服务的Server来说，用Push方式主动推送有很多弊端；首先是加大Server端的工作量，进而影响Server的性能，其次Client的处理能力各不相同，Client的状态不受Server控制，如果Client不能及时处理Server推送过来的消息，会造成各种潜在问题。</span><br><span class="line"></span><br><span class="line">菠萝科技注：意思是1 加大server(broker)工作量,影响性能。2 有的消费者机器配置好处理能力强,有的配置低处理能力低,但是server推相同数量级消息给消费者，就会导致消费者强的等待,弱的处理效率跟不上,从而导致崩溃。3server资源相比消费者的资源肯定是更宝贵  4总结下就是客户端慢消费(设计到io等耗时操作)时会放大缺点。</span><br><span class="line"></span><br><span class="line">Pull方式：</span><br><span class="line">优点：对比push优点就是消费者可以根据自己能力拉取消息处理。。。</span><br><span class="line"></span><br><span class="line">缺点：Client端循环地从Server端拉取消息，主动权在Client手里，自己拉取到一定量消息后，处理妥当了再接着取。Pull方式的问题是循环拉取消息的间隔不好设定，间隔太短就处在一个“忙等”的状态，浪费资源；每个Pull的时间间隔太长，Server端有消息到来有可能没有被及时处理。</span><br><span class="line"></span><br><span class="line">菠萝科技注：假如处理完消息后，现在空闲，设定多久去server再拉消息？主要问题就是消息处理延迟忙等。server没消息时,但是消费者因为是定时去pull，导致空pull。</span><br><span class="line"></span><br><span class="line">长轮询：</span><br><span class="line">CMQ (腾讯)提供了长轮询的优化方法，用以平衡 Pull&#x2F;Push 模型各自的缺点。</span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h3 id="Golang-在-runtime、系统调用等多方面对-goroutine-调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前-goroutine-的CPU-P-转让出去，让其他-goroutine-能被调度并执行，也就是-Golang-从语言层面支持了协程。"><a href="#Golang-在-runtime、系统调用等多方面对-goroutine-调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前-goroutine-的CPU-P-转让出去，让其他-goroutine-能被调度并执行，也就是-Golang-从语言层面支持了协程。" class="headerlink" title="Golang 在 runtime、系统调用等多方面对 goroutine 调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前 goroutine 的CPU (P) 转让出去，让其他 goroutine 能被调度并执行，也就是 Golang 从语言层面支持了协程。"></a>Golang 在 runtime、系统调用等多方面对 goroutine 调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前 goroutine 的CPU (P) 转让出去，让其他 goroutine 能被调度并执行，也就是 Golang 从语言层面支持了协程。</h3><h3 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis cluster"></a>redis cluster</h3><p>Codis 需要通过 Proxy 来定位目标节点，RedisCluster 是直接定位。客户端为了可以直接定位某个具体的 key 所在的节点，它就需要缓存槽位相关信息，这样才可以准确快速地定位到相应的节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。</p><h3 id="线程-进程和携程"><a href="#线程-进程和携程" class="headerlink" title="线程 进程和携程"></a>线程 进程和携程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">协程是一种用户态的轻量级线程，协程的调度完全由用户控制（进程和线程都是由cpu 内核进行调度）。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</span><br><span class="line">对于 进程、线程，都是有内核进行调度，有 CPU 时间片的概念，进行 抢占式调度（有多种调度算法）</span><br><span class="line">对于 协程(用户级线程)，这是对内核透明的，也就是系统并不知道有协程的存在，是完全由用户自己的程序进行调度的，因为是由用户程序自己控制，那么就很难像抢占式调度那样做到强制的 CPU 控制权切换到其他进程&#x2F;线程，通常只能进行 协作式调度，需要协程自己主动把控制权转让出去之后，其他协程才能被执行到。</span><br><span class="line"></span><br><span class="line">内存消耗方面</span><br><span class="line">每个 goroutine (协程) 默认占用内存远比 Java 、C 的线程少。</span><br><span class="line">goroutine：2KB（官方）</span><br><span class="line">线程：8MB（参考网络）</span><br><span class="line"></span><br><span class="line">线程和 goroutine 切换调度开销方面</span><br><span class="line">线程&#x2F;goroutine 切换开销方面，goroutine 远比线程小</span><br><span class="line">线程：涉及模式切换(从用户态切换到内核态)、16个寄存器、PC、SP...等寄存器的刷新等。</span><br><span class="line">goroutine：只有三个寄存器的值修改 - PC &#x2F; SP &#x2F; DX.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】头条面试</title>
    <link href="http://lcf12307.github.io/2020/03/12/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.12%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/12/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.12%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-11T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-主从同步"><a href="#redis-主从同步" class="headerlink" title="redis 主从同步"></a>redis 主从同步</h3><h3 id="判断是否是一个完全二叉树"><a href="#判断是否是一个完全二叉树" class="headerlink" title="判断是否是一个完全二叉树"></a>判断是否是一个完全二叉树</h3><h3 id="消息队列-推和拉的优劣"><a href="#消息队列-推和拉的优劣" class="headerlink" title="消息队列 推和拉的优劣"></a>消息队列 推和拉的优劣</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis-主从同步&quot;&gt;&lt;a href=&quot;#redis-主从同步&quot; class=&quot;headerlink&quot; title=&quot;redis 主从同步&quot;&gt;&lt;/a&gt;redis 主从同步&lt;/h3&gt;&lt;h3 id=&quot;判断是否是一个完全二叉树&quot;&gt;&lt;a href=&quot;#判断是否是一个完全
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】腾讯面试</title>
    <link href="http://lcf12307.github.io/2020/03/10/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.10%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/10/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.10%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="哪种索引的性能最好"><a href="#哪种索引的性能最好" class="headerlink" title="哪种索引的性能最好"></a>哪种索引的性能最好</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">索引的选择性是指，不重复的索引值（也称为基数）和数据表的记录总数（rows）的比值，范围从1&#x2F;rows到1之间。索引的选择性越高则查询效率越高，因为选择性高的索引可以让Mysql在查找时过滤掉更多的行。唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。而假如我们是按某个表的性别字段作为索引列，这样选择性就很低，索引效果就不是很明显。</span><br></pre></td></tr></table></figure><h3 id="什么时候用不到索引"><a href="#什么时候用不到索引" class="headerlink" title="什么时候用不到索引"></a>什么时候用不到索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以%开头的 like 查询不能利用 B-Tree 索引，执行计划中 key 的值为 null 表示没有使用索引</span><br><span class="line">数据类型出现隐式转换的时候也不会使用索引，例如，where &#39;age&#39; 10&#x3D;30</span><br><span class="line">对索引列进行函数运算，原因同上</span><br><span class="line">正则表达式不会使用索引</span><br><span class="line">字符串和数据比较不会使用索引</span><br><span class="line">复合索引的情况下，假如查询条件不包含索引列最左边部分，即不满足最左原则 leftmost，是不会使用复合索引的</span><br><span class="line">如果 MySQL 估计使用索引比全表扫描更慢，则不使用索引</span><br><span class="line">用 or 分割开的条件，如果 or 前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到</span><br><span class="line">使用负向查询（not ，not in， not like ，&lt;&gt; ,!&#x3D; ,!&gt; ,!&lt; ） 不会使用索引</span><br></pre></td></tr></table></figure><h3 id="redis-压缩列表-跳表"><a href="#redis-压缩列表-跳表" class="headerlink" title="redis 压缩列表 跳表"></a>redis 压缩列表 跳表</h3><h3 id="aof日志量过大的时候重写，瘦身"><a href="#aof日志量过大的时候重写，瘦身" class="headerlink" title="aof日志量过大的时候重写，瘦身"></a>aof日志量过大的时候重写，瘦身</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;哪种索引的性能最好&quot;&gt;&lt;a href=&quot;#哪种索引的性能最好&quot; class=&quot;headerlink&quot; title=&quot;哪种索引的性能最好&quot;&gt;&lt;/a&gt;哪种索引的性能最好&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】跟谁学面试</title>
    <link href="http://lcf12307.github.io/2020/03/02/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.2%E8%B7%9F%E8%B0%81%E5%AD%A6%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/02/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.2%E8%B7%9F%E8%B0%81%E5%AD%A6%E9%9D%A2%E8%AF%95/</id>
    <published>2020-03-01T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="grpc和thrift"><a href="#grpc和thrift" class="headerlink" title="grpc和thrift"></a>grpc和thrift</h3><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h3 id="golang-append-的原理"><a href="#golang-append-的原理" class="headerlink" title="golang append 的原理"></a>golang append 的原理</h3><h3 id="chan的底层"><a href="#chan的底层" class="headerlink" title="chan的底层"></a>chan的底层</h3><h3 id="方法interface和变量interface的区别"><a href="#方法interface和变量interface的区别" class="headerlink" title="方法interface和变量interface的区别"></a>方法interface和变量interface的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">具有一组方法的类型</span><br><span class="line">interface 变量存储的是实现者的值</span><br><span class="line">interface 的重要用途就体现在函数 f 的参数中，如果有多种类型实现了某个 interface，这些类型的值都可以直接使用 interface 的变量存储。</span><br><span class="line">interface&#123;&#125; 是一个空的 interface 类型，根据前文的定义：一个类型如果实现了一个 interface 的所有方法就说该类型实现了这个 interface，空的 interface 没有方法，所以可以认为所有的类型都实现了 interface&#123;&#125;。如果定义一个函数参数是 interface&#123;&#125; 类型，这个函数应该可以接受任何类型作为它的参数。</span><br><span class="line"></span><br><span class="line">go 可以使用 comma, ok 的形式做区分 value, ok :&#x3D; em.(T)：em 是 interface 类型的变量，T代表要断言的类型，value 是 interface 变量存储的值，ok 是 bool 类型表示是否为该断言的类型 T。</span><br></pre></td></tr></table></figure><h3 id="【算法题】"><a href="#【算法题】" class="headerlink" title="【算法题】"></a>【算法题】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 合并链表</span><br><span class="line">func merge(a, b *ListNode) *ListNode &#123;</span><br><span class="line">var c *ListNode</span><br><span class="line"></span><br><span class="line">if a !&#x3D; nil &amp;&amp; b !&#x3D; nil &#123;</span><br><span class="line">if a.Val &gt; b.Val &#123;</span><br><span class="line">c, b.Next, b &#x3D; b, nil, b.Next</span><br><span class="line">b &#x3D; b.Next</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c, a.Next, a &#x3D; a, nil, a.Next</span><br><span class="line">a &#x3D; a.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if a !&#x3D; nil &#123;</span><br><span class="line">if c &#x3D;&#x3D; nil &#123;</span><br><span class="line">return a</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c.Next &#x3D; a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; else if b !&#x3D; nil &#123;</span><br><span class="line">if c &#x3D;&#x3D; nil &#123;</span><br><span class="line">return b</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c.Next &#x3D; b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="消息队列幂等性"><a href="#消息队列幂等性" class="headerlink" title="消息队列幂等性"></a>消息队列幂等性</h3><h3 id="http和tcp-和http2-0"><a href="#http和tcp-和http2-0" class="headerlink" title="http和tcp 和http2.0"></a>http和tcp 和http2.0</h3><h3 id="golang实现支持并发的单例模式"><a href="#golang实现支持并发的单例模式" class="headerlink" title="golang实现支持并发的单例模式"></a>golang实现支持并发的单例模式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exa *example</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">example</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> exa != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> exa</span><br><span class="line">  &#125;</span><br><span class="line">  mu.Lock()</span><br><span class="line">  <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">  exa = &amp;example&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> exa</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> example <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance *example</span><br><span class="line"><span class="keyword">var</span> once Sync.Once</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">example</span></span> &#123;</span><br><span class="line">  Once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    instance = &amp;example&#123;&#125;</span><br><span class="line">    instance.name = <span class="string">"test"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;h3 id=&quot;grpc和thrift&quot;&gt;&lt;a href=&quot;#grpc和thrift&quot; class=&quot;headerlink&quot; title=&quot;grp
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】百度面试</title>
    <link href="http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.18%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.18%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="etcd和redis"><a href="#etcd和redis" class="headerlink" title="etcd和redis"></a>etcd和redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库版本控制</span><br><span class="line"></span><br><span class="line">高可用</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;etcd和redis&quot;&gt;&lt;a href=&quot;#etcd和redis&quot; class=&quot;headerlink&quot; title=&quot;etcd和redis&quot;&gt;&lt;/a&gt;etcd和redis&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】百度面试</title>
    <link href="http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.19%E6%90%9C%E7%8B%90%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.19%E6%90%9C%E7%8B%90%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="聚簇索引和非聚簇索引的区别"><a href="#聚簇索引和非聚簇索引的区别" class="headerlink" title="聚簇索引和非聚簇索引的区别"></a>聚簇索引和非聚簇索引的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">聚集索引与非聚集索引的区别是：叶节点是否存放一整行记录</span><br><span class="line"></span><br><span class="line">InnoDB 主键使用的是聚簇索引，MyISAM 不管是主键索引，还是二级索引使用的都是非聚簇索引。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引的优点</span><br><span class="line">1.当你需要取出一定范围内的数据时，用聚簇索引也比用非聚簇索引好。</span><br><span class="line">2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I&#x2F;O。</span><br><span class="line">3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</span><br><span class="line">2.更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</span><br><span class="line">3.二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</span><br><span class="line">4.采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I&#x2F;O代价。</span><br></pre></td></tr></table></figure><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。</span><br><span class="line">并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。</span><br><span class="line"></span><br><span class="line">前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生．</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;聚簇索引和非聚簇索引的区别&quot;&gt;&lt;a href=&quot;#聚簇索引和非聚簇索引的区别&quot; class=&quot;headerlink&quot; title=&quot;聚簇索引和非聚簇索引的区别&quot;&gt;&lt;/a&gt;聚簇索引和非聚簇索引的区别&lt;/h3&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】头条面试</title>
    <link href="http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.1%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/3.1%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="具体的rpc调用过程"><a href="#具体的rpc调用过程" class="headerlink" title="具体的rpc调用过程"></a>具体的rpc调用过程</h3><h3 id="消息队列的使用过程"><a href="#消息队列的使用过程" class="headerlink" title="消息队列的使用过程"></a>消息队列的使用过程</h3><h3 id="如果一个事务里想要操作两个不同数据库的数据，怎么操作"><a href="#如果一个事务里想要操作两个不同数据库的数据，怎么操作" class="headerlink" title="如果一个事务里想要操作两个不同数据库的数据，怎么操作"></a>如果一个事务里想要操作两个不同数据库的数据，怎么操作</h3><h3 id="redis-分布式锁-的使用"><a href="#redis-分布式锁-的使用" class="headerlink" title="redis 分布式锁 的使用"></a>redis 分布式锁 的使用</h3><h3 id="redis-过期机制的"><a href="#redis-过期机制的" class="headerlink" title="redis 过期机制的"></a>redis 过期机制的</h3><h3 id="sql：找出一个班里的哪个年龄的人最多"><a href="#sql：找出一个班里的哪个年龄的人最多" class="headerlink" title="sql：找出一个班里的哪个年龄的人最多"></a>sql：找出一个班里的哪个年龄的人最多</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> age  <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(age) <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="算法：-给定一个数组，0i单调递增，in单调递减，其中n为数组长度，i未知。"><a href="#算法：-给定一个数组，0i单调递增，in单调递减，其中n为数组长度，i未知。" class="headerlink" title="算法： 给定一个数组，0i单调递增，in单调递减，其中n为数组长度，i未知。"></a>算法： 给定一个数组，0<del>i单调递增，i</del>n单调递减，其中n为数组长度，i未知。</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">去重后元素的个数</span><br><span class="line">input: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">output: <span class="number">5</span></span><br><span class="line">不使用额外的空间，不改变原数组</span><br><span class="line">input: <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">output: <span class="number">0</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findT</span><span class="params">(target <span class="keyword">int</span>, arr []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    l, r := <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> l &lt;= r &#123;</span><br><span class="line">        mid := l + (r-l)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == arr[mid] &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">        d := IsD(arr, mid)</span><br><span class="line">        <span class="keyword">if</span> d = <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> target &gt; arr[l] &amp;&amp; arr[mid] &gt; target &#123;</span><br><span class="line">                r = mid - <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> d == <span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> target &lt; arr[mid] &amp;&amp; arr[r] &lt; target &#123;</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid <span class="number">-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res := findTInArea(arr, l, mid<span class="number">-1</span>, target, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> res != <span class="number">-1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            &#125;</span><br><span class="line">            res = findTInArea(arr, mid+<span class="number">1</span>, r, target, <span class="number">-1</span> )</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> arr[mid] == target &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否单调 且单调的方向</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsD</span><span class="params">(arr []<span class="keyword">int</span>, index <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index &gt; <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">len</span>(arr) - <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> arr[index] &gt; arr[index<span class="number">-1</span>] &amp;&amp; arr[index] &lt; arr[index + <span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> arr[index] &lt; arr[index<span class="number">-1</span>] &amp;&amp; arr[index] &gt; arr[index + <span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">0</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> index == <span class="built_in">len</span>(arr) - <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 常规二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findTInArea</span><span class="params">(arr <span class="keyword">int</span>[], l, r , target, ty <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    l, r := <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> l &lt;= r &#123;</span><br><span class="line">        mid = l + (r-l)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="context使用-及简单代码"><a href="#context使用-及简单代码" class="headerlink" title="context使用 及简单代码"></a>context使用 及简单代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, deadline time.Time)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key, val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Context</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Background</span><span class="params">()</span> <span class="title">Context</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">go</span> watch(ctx,<span class="string">"【监控1】"</span>)</span><br><span class="line"><span class="keyword">go</span> watch(ctx,<span class="string">"【监控2】"</span>)</span><br><span class="line"><span class="keyword">go</span> watch(ctx,<span class="string">"【监控3】"</span>)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"可以了，通知监控停止"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="comment">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">watch</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(name,<span class="string">"监控退出，停止了..."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(name,<span class="string">"goroutine监控中..."</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现简单的消息队列-并说出优化方向"><a href="#实现简单的消息队列-并说出优化方向" class="headerlink" title="实现简单的消息队列 并说出优化方向"></a>实现简单的消息队列 并说出优化方向</h3><p>优化方向</p><ul><li>增加消息的容量</li><li>消息存入硬盘，保证高可用</li><li>如果消费阻塞的话，另一方面，增加消费者数目</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Producer <span class="keyword">struct</span> &#123;</span><br><span class="line">    messages [<span class="number">9</span>]<span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Consumer <span class="keyword">struct</span> &#123;</span><br><span class="line">    messages [<span class="number">9</span>]<span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Producer)</span> <span class="title">init</span><span class="params">(message [9]<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    p.messages = message</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Producer)</span> <span class="title">send</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    p.messages &lt;- message</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Consumer)</span> <span class="title">init</span> <span class="params">(message [9]<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c.messages = message</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Receive)</span> <span class="title">receive</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-c.message: </span><br><span class="line">            <span class="keyword">return</span> c.message</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    message := [<span class="number">9</span>]<span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">var</span> prod Producer</span><br><span class="line">    <span class="keyword">var</span> cons Consumer</span><br><span class="line">    prod.init(message)</span><br><span class="line">    cons.init(message)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">100</span>;i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            prod.send(<span class="string">"test"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s := cons.receive()</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防刷的做法"><a href="#防刷的做法" class="headerlink" title="防刷的做法"></a>防刷的做法</h3><p>时间维度和ip维度</p><h3 id="【算法题】-k个一组-反转链表"><a href="#【算法题】-k个一组-反转链表" class="headerlink" title="【算法题】 k个一组 反转链表"></a>【算法题】 k个一组 反转链表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><h3 id="【系统设计题】设计一个抢红包的结构"><a href="#【系统设计题】设计一个抢红包的结构" class="headerlink" title="【系统设计题】设计一个抢红包的结构"></a>【系统设计题】设计一个抢红包的结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">页面-后端</span><br><span class="line">- 长连接 </span><br><span class="line">- 短链接 </span><br><span class="line">- 每次点击时提交 or 出完结果后提交</span><br><span class="line">- API</span><br><span class="line">- Redis</span><br><span class="line">- MQ -&gt; 使用mq消费，异步，削峰，解耦</span><br></pre></td></tr></table></figure><h3 id="【系统设计题】-设计一个唯一ID生成器"><a href="#【系统设计题】-设计一个唯一ID生成器" class="headerlink" title="【系统设计题】 设计一个唯一ID生成器"></a>【系统设计题】 设计一个唯一ID生成器</h3><ul><li>int64的数字</li><li>唯一</li><li>高并发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">雪花算法</span><br><span class="line">32位秒级时间戳+16位自增id+5位机器码</span><br><span class="line">42位毫秒级时间戳+10机器码+12bit序列号</span><br></pre></td></tr></table></figure><h3 id="【算法题】给定m个不重复的字符-a-b-c-d-，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3"><a href="#【算法题】给定m个不重复的字符-a-b-c-d-，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3" class="headerlink" title="【算法题】给定m个不重复的字符 [a, b, c, d]，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3"></a>【算法题】给定m个不重复的字符 [a, b, c, d]，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> location [<span class="number">256</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexOfStringNoRepeat</span><span class="params">(s <span class="keyword">string</span>, target <span class="keyword">rune</span>[])</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> location &#123;</span><br><span class="line">        location[i] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    rs := []<span class="keyword">rune</span>(s)</span><br><span class="line">    ma := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> target &#123;</span><br><span class="line">        ma[target] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// shooted 目前已有的未重复字符</span></span><br><span class="line">    left, shooted := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="built_in">len</span>(rs); i++ &#123;</span><br><span class="line">        <span class="comment">// 不存在该字符</span></span><br><span class="line">        <span class="keyword">if</span> _, ok := ma[rs[i]]; !ok &#123;</span><br><span class="line">            before = left </span><br><span class="line">            left = location[rs[i]] + <span class="number">1</span></span><br><span class="line">            updateLocation(rs, before, left)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 该字符</span></span><br><span class="line">        <span class="keyword">if</span> location[rs[i]] != <span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> location[rs[i]] &gt;= left &#123;</span><br><span class="line">                before = left</span><br><span class="line">                left = location[rs[i]] + <span class="number">1</span></span><br><span class="line">                shooted</span><br><span class="line">                updateLocation(rs, before, left)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            shooted ++</span><br><span class="line">            <span class="keyword">if</span> shooted == <span class="built_in">len</span>(target) &#123;</span><br><span class="line">                <span class="keyword">return</span> left</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        location[rs[i]] ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateLocations</span><span class="params">(rs []<span class="keyword">rune</span>, l, r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">        location[rs[l]] = <span class="number">-1</span></span><br><span class="line">        l ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;h3 id=&quot;具体的rpc调用过程&quot;&gt;&lt;a href=&quot;#具体的rpc调用过程&quot; class=&quot;headerlink&quot; title=&quot;具体的rp
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】高频面试点</title>
    <link href="http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%82%B9/"/>
    <id>http://lcf12307.github.io/2020/03/01/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%82%B9/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.014Z</updated>
    
    <content type="html"><![CDATA[<p>排序</p><p>二分变形</p><p>递归搜索</p><p>二叉树遍历</p><p>排序可以扩展出多种排序 如堆排序 合并排序</p><p>go的sync包和 多线程 多协程并发控制</p><p>网络编程 NIO 网络模型</p><p>高并发系统设计， API层设计 存储设计 容灾设计 数据流 模块设计</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;排序&lt;/p&gt;
&lt;p&gt;二分变形&lt;/p&gt;
&lt;p&gt;递归搜索&lt;/p&gt;
&lt;p&gt;二叉树遍历&lt;/p&gt;
&lt;p&gt;排序可以扩展出多种排序 如堆排序 合并排序&lt;/p&gt;
&lt;p&gt;go的sync包和 多线程 多协程并发控制&lt;/p&gt;
&lt;p&gt;网络编程 NIO 网络模型&lt;/p&gt;
&lt;p&gt;高并发系统设计， AP
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】腾讯面试</title>
    <link href="http://lcf12307.github.io/2020/02/29/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.29%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/29/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.29%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="M-G-P"><a href="#M-G-P" class="headerlink" title="M G P"></a>M G P</h3><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><h3 id="go对象的过程"><a href="#go对象的过程" class="headerlink" title="go对象的过程"></a>go对象的过程</h3><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【气球游戏】小Q在进行射击气球的游戏，</span></span><br><span class="line"><span class="comment">// 如果小Q在连续T枪中打爆了所有颜色的气球，将得到一只QQ公仔作为奖励。</span></span><br><span class="line"><span class="comment">//（每种颜色的气球至少被打爆一只）。这个游戏中有m种不同颜色的气球，编号1到m。</span></span><br><span class="line"><span class="comment">// 小Q一共有n发子弹，然后连续开了n枪。小Q想知道在这n枪中，打爆所有颜色的气球最少用了连续几枪？</span></span><br><span class="line"><span class="comment">// 输入描述： 第一行两个空格间隔的整数数n，m。n&amp;lt;=1000000 m&amp;lt;=2000 第二行一共n个空格间隔的整数，分别表示每一枪打中的气球的颜色,0表示没打中任何颜色的气球。</span></span><br><span class="line"><span class="comment">// 输出描述： 一个整数表示小Q打爆所有颜色气球用的最少枪数。如果小Q无法在这n枪打爆所有颜色的气球，则输出-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ma  <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shootGame</span><span class="params">(n, m <span class="keyword">int</span>, arr []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; m &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">ma = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">min := n+<span class="number">1</span></span><br><span class="line"><span class="comment">// t 已击中气球 s 射击数 最左数</span></span><br><span class="line">t , s, l  := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> arr &#123;</span><br><span class="line"><span class="comment">// 如果气球不存在存在</span></span><br><span class="line"><span class="keyword">if</span> _, ok := ma[k]; !ok || ma[k] == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> k != <span class="number">0</span> &#123;</span><br><span class="line">t++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果已击中气球的颜色</span></span><br><span class="line"><span class="keyword">if</span> t == m &#123;</span><br><span class="line"><span class="keyword">if</span> min &gt; s &#123;</span><br><span class="line">min = s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到下一个点</span></span><br><span class="line">ma[l] --</span><br><span class="line"><span class="comment">// 射击气球数目为0 t--</span></span><br><span class="line"><span class="keyword">if</span> ma[l] == <span class="number">0</span> &amp;&amp; l != <span class="number">0</span> &#123;</span><br><span class="line">t --</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左移一位</span></span><br><span class="line">l ++</span><br><span class="line"><span class="comment">// 射击数减yi</span></span><br><span class="line">s --</span><br><span class="line"><span class="keyword">if</span> t==m &amp;&amp; min &gt; s &#123;</span><br><span class="line">min = s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给当前数目加一</span></span><br><span class="line"><span class="comment">// 射击数加一</span></span><br><span class="line">ma[k] ++</span><br><span class="line">s ++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> min == n+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;M-G-P&quot;&gt;&lt;a href=&quot;#M-G-P&quot; class=&quot;headerlink&quot; title=&quot;M G P&quot;&gt;&lt;/a&gt;M G P&lt;/h3&gt;&lt;h3 id=&quot;context&quot;&gt;&lt;a href=&quot;#context&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】滴滴面试</title>
    <link href="http://lcf12307.github.io/2020/02/28/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.28%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/28/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.28%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用非递归去二分查找一个数"><a href="#使用非递归去二分查找一个数" class="headerlink" title="使用非递归去二分查找一个数"></a>使用非递归去二分查找一个数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// arr []</span></span><br><span class="line"><span class="comment">// arr [1]</span></span><br><span class="line"><span class="comment">// arr [1,2,3]</span></span><br><span class="line"><span class="comment">// arr [2,3,4]</span></span><br><span class="line"><span class="comment">// 3, 9999,</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findX</span><span class="params">(target <span class="keyword">int</span>, arr []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左右两个节点</span></span><br><span class="line">l, r := <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span></span><br><span class="line"><span class="keyword">var</span> mid <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">mid = l + (r-l)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> arr[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> arr[mid] &gt; target &#123;</span><br><span class="line">r = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[l] == target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用递归的方式-二分查找"><a href="#使用递归的方式-二分查找" class="headerlink" title="使用递归的方式 二分查找"></a>使用递归的方式 二分查找</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findX</span><span class="params">(target <span class="keyword">int</span>, arr []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> findXInArea(target, arr, <span class="number">0</span>, <span class="built_in">len</span>(right)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findXInArea</span><span class="params">(target <span class="keyword">int</span> , arr []<span class="keyword">int</span>, left, right <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> left &gt; right &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  mid := left + (right-left)/<span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> arr[mid] &gt; target &#123;</span><br><span class="line">    <span class="keyword">return</span> findXInArea(target, arr, left, mid - <span class="number">1</span>)</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span> arr[mid] &lt; target &#123;</span><br><span class="line">    <span class="keyword">return</span> findXInArea(target, arr, mid + <span class="number">1</span>, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用非递归去二分查找一个数&quot;&gt;&lt;a href=&quot;#使用非递归去二分查找一个数&quot; class=&quot;headerlink&quot; title=&quot;使用非递归去二分查找一个数&quot;&gt;&lt;/a&gt;使用非递归去二分查找一个数&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】映客面试</title>
    <link href="http://lcf12307.github.io/2020/02/28/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.28%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/28/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.28%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="秒杀过程中里的远近不同影响用户的秒杀成功-解决方案"><a href="#秒杀过程中里的远近不同影响用户的秒杀成功-解决方案" class="headerlink" title="秒杀过程中里的远近不同影响用户的秒杀成功 解决方案"></a>秒杀过程中里的远近不同影响用户的秒杀成功 解决方案</h3><h3 id="http和https和http2-0-spdy"><a href="#http和https和http2-0-spdy" class="headerlink" title="http和https和http2.0 spdy"></a>http和https和http2.0 spdy</h3><h4 id="http1-0的缺点是安全不足和性能不足"><a href="#http1-0的缺点是安全不足和性能不足" class="headerlink" title="http1.0的缺点是安全不足和性能不足"></a>http1.0的缺点是安全不足和性能不足</h4><h4 id="http2-0-更安全的http，-更快的https"><a href="#http2-0-更安全的http，-更快的https" class="headerlink" title="http2.0 更安全的http， 更快的https"></a>http2.0 更安全的http， 更快的https</h4><ul><li>二进制传输（解析更高效）</li><li>header压缩</li><li>spdy 多路复用</li><li>服务器端推送</li><li>提高安全性 </li></ul><pre><code>- 队头阻塞- TCP+TLS延时</code></pre><h4 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h4><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>对称加密和非对称加密</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h3 id="http2-0-有哪些优化的方向"><a href="#http2-0-有哪些优化的方向" class="headerlink" title="http2.0 有哪些优化的方向"></a>http2.0 有哪些优化的方向</h3><p>解决队头阻塞的问题</p><h3 id="gopath-goroot-gobin都是什么"><a href="#gopath-goroot-gobin都是什么" class="headerlink" title="gopath goroot gobin都是什么"></a>gopath goroot gobin都是什么</h3><h3 id="命令行实现查找日志文件中的qps"><a href="#命令行实现查找日志文件中的qps" class="headerlink" title="命令行实现查找日志文件中的qps"></a>命令行实现查找日志文件中的qps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk '&#123;print $2&#125;' | uniq -c</span><br></pre></td></tr></table></figure><h3 id="两个链表-求他们是否有公共节点-并求出他们的交点位置"><a href="#两个链表-求他们是否有公共节点-并求出他们的交点位置" class="headerlink" title="两个链表 求他们是否有公共节点 并求出他们的交点位置"></a>两个链表 求他们是否有公共节点 并求出他们的交点位置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求尾部唯一</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接ab 判断存在环</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;秒杀过程中里的远近不同影响用户的秒杀成功-解决方案&quot;&gt;&lt;a href=&quot;#秒杀过程中里的远近不同影响用户的秒杀成功-解决方案&quot; class=&quot;headerlink&quot; title=&quot;秒杀过程中里的远近不同影响用户的秒杀成功 解决方案&quot;&gt;&lt;/a&gt;秒杀过程中里的远近不同
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】映客面试</title>
    <link href="http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E6%98%A0%E5%AE%A2%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E6%98%A0%E5%AE%A2%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-26T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="访问mi-com-的过程"><a href="#访问mi-com-的过程" class="headerlink" title="访问mi.com 的过程"></a>访问mi.com 的过程</h3><h3 id="rpc的协议"><a href="#rpc的协议" class="headerlink" title="rpc的协议"></a>rpc的协议</h3><h3 id="除了pb-http怎么返回数据"><a href="#除了pb-http怎么返回数据" class="headerlink" title="除了pb http怎么返回数据"></a>除了pb http怎么返回数据</h3><p>ASCII码</p><h3 id="怎么保证消息队列不会重复处理"><a href="#怎么保证消息队列不会重复处理" class="headerlink" title="怎么保证消息队列不会重复处理"></a>怎么保证消息队列不会重复处理</h3><p>唯一keyid</p><h3 id="mysql调优-的方法"><a href="#mysql调优-的方法" class="headerlink" title="mysql调优 的方法"></a>mysql调优 的方法</h3><h3 id="使用redis来实现定时器-如果所有用户等待时间相同-或者不同"><a href="#使用redis来实现定时器-如果所有用户等待时间相同-或者不同" class="headerlink" title="使用redis来实现定时器 如果所有用户等待时间相同 或者不同"></a>使用redis来实现定时器 如果所有用户等待时间相同 或者不同</h3><ul><li>list  rpush lpop</li><li>zset zrangebyscore key min max</li></ul><h3 id="mysql-主库写入还没有更新到读库的时候-怎么保证读的数据是最新的"><a href="#mysql-主库写入还没有更新到读库的时候-怎么保证读的数据是最新的" class="headerlink" title="mysql 主库写入还没有更新到读库的时候 怎么保证读的数据是最新的"></a>mysql 主库写入还没有更新到读库的时候 怎么保证读的数据是最新的</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;访问mi-com-的过程&quot;&gt;&lt;a href=&quot;#访问mi-com-的过程&quot; class=&quot;headerlink&quot; title=&quot;访问mi.com 的过程&quot;&gt;&lt;/a&gt;访问mi.com 的过程&lt;/h3&gt;&lt;h3 id=&quot;rpc的协议&quot;&gt;&lt;a href=&quot;#rpc的协议&quot;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】滴滴面试</title>
    <link href="http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-26T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树最长叶子结点路径之和"><a href="#二叉树最长叶子结点路径之和" class="headerlink" title="二叉树最长叶子结点路径之和"></a>二叉树最长叶子结点路径之和</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">  Val <span class="keyword">int</span></span><br><span class="line">  Left  *TreeNode</span><br><span class="line">  Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestWaySum</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(root *TreeNode, level, before <span class="keyword">int</span>)</span> <span class="params">(depth, sum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大文件如何对字符串计数"><a href="#大文件如何对字符串计数" class="headerlink" title="大文件如何对字符串计数"></a>大文件如何对字符串计数</h3><h3 id="数据库的四种隔离级别-并举例说明"><a href="#数据库的四种隔离级别-并举例说明" class="headerlink" title="数据库的四种隔离级别 并举例说明"></a>数据库的四种隔离级别 并举例说明</h3><h3 id="mysql的非sql命令"><a href="#mysql的非sql命令" class="headerlink" title="mysql的非sql命令"></a>mysql的非sql命令</h3><h3 id="binlog的格式"><a href="#binlog的格式" class="headerlink" title="binlog的格式"></a>binlog的格式</h3><p>binlog分为三种格式</p><ol><li>statement 用来记录每一条修改的语句</li><li>Row 不记录具体的语句 只记录哪条记录被修改 缺点 有些语句修改量过大， 记录不了</li><li>Mixedlevel 混合使用，仅特殊语句 会记录 如sleep()函数， last_insert_id()，以及user-defined functions(udf</li></ol><h3 id="为什么使用b-树"><a href="#为什么使用b-树" class="headerlink" title="为什么使用b+树"></a>为什么使用b+树</h3><p><strong>hash：</strong>虽然可以快速定位，但是没有顺序，IO复杂度高。</p><p><strong>二叉树：</strong>树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。</p><p><strong>红黑树：</strong>树的高度随着数据量增加而增加，IO代价高。</p><h3 id="为什么树的高度影响IO代价"><a href="#为什么树的高度影响IO代价" class="headerlink" title="为什么树的高度影响IO代价"></a>为什么树的高度影响IO代价</h3><p>尽管内存上读取速度快， 但是会可能因为断电等原因造成数据丢失，存在硬盘上可以保证数据的持久化，而每个数据节点代表一个磁盘块。</p><h3 id="b-树范围查询"><a href="#b-树范围查询" class="headerlink" title="b+树范围查询"></a>b+树范围查询</h3><p>有序的链表</p><h3 id="为什么使用连续自增主键"><a href="#为什么使用连续自增主键" class="headerlink" title="为什么使用连续自增主键"></a>为什么使用连续自增主键</h3><p>结合B+Tree的特点，自增主键是连续的，在插入过程中尽量减少页分裂，即使要进行页分裂，也只会分裂很少一部分。并且能减少数据的移动，每次插入都是插入到最后。总之就是减少分裂和移动的频率</p><h3 id="统计日志的qps"><a href="#统计日志的qps" class="headerlink" title="统计日志的qps"></a>统计日志的qps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实时统计</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 方式一</span></span></span><br><span class="line">tail -f access.log | awk -F '[' '&#123;print $2&#125;' | awk 'BEGIN&#123;key="";count=0&#125;&#123;if(key==$1)&#123;count++&#125;else&#123;printf("%s\t%d\r\n", key, count);count=1;key=$1&#125;&#125;'</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 方式二</span></span></span><br><span class="line">tail -f access.log | awk -F '[' '&#123;print $2&#125;' | awk '&#123;print $1&#125;' | uniq -c</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 非实时按秒统计QPS</span></span><br><span class="line">cat access.log | awk -F '[' '&#123;print $2&#125;' | awk '&#123;print $1&#125;' | sort | uniq -c |sort -k1,1nr</span><br></pre></td></tr></table></figure><h3 id="http四种方法-以及header头里会携带什么参数"><a href="#http四种方法-以及header头里会携带什么参数" class="headerlink" title="http四种方法 以及header头里会携带什么参数"></a>http四种方法 以及header头里会携带什么参数</h3><ul><li>put</li><li>get</li><li>post</li><li>delete</li><li>head</li><li>…</li></ul><h4 id="head头参数"><a href="#head头参数" class="headerlink" title="head头参数"></a>head头参数</h4><ul><li>reffer</li><li>accept</li><li>cookie</li><li>Host</li><li>User-agent</li></ul><h4 id="请求报文包括"><a href="#请求报文包括" class="headerlink" title="请求报文包括"></a>请求报文包括</h4><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体</li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>200</li><li>301</li><li>302</li><li>500</li><li>404</li></ul><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><h3 id="访问mi-com的过程"><a href="#访问mi-com的过程" class="headerlink" title="访问mi.com的过程"></a>访问mi.com的过程</h3><h4 id="url缓存"><a href="#url缓存" class="headerlink" title="url缓存"></a>url缓存</h4><ul><li>浏览器进行安全检查和访问控制</li></ul><h4 id="dns查询"><a href="#dns查询" class="headerlink" title="dns查询"></a>dns查询</h4><ul><li>检查浏览器缓存</li><li>检查host文件</li><li>路由器缓存</li><li>首选dns解析服务器 </li><li>根域名服务器查询</li></ul><h4 id="tcp连接"><a href="#tcp连接" class="headerlink" title="tcp连接"></a>tcp连接</h4><ul><li><p>应用层 发送网络请求</p></li><li><p>传输层 TCP传输报文</p></li><li><p>网络层 ip查询mac地址</p></li><li><p>链路层 以太网协议</p></li><li><p>到达服务器时反转上述操作</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树最长叶子结点路径之和&quot;&gt;&lt;a href=&quot;#二叉树最长叶子结点路径之和&quot; class=&quot;headerlink&quot; title=&quot;二叉树最长叶子结点路径之和&quot;&gt;&lt;/a&gt;二叉树最长叶子结点路径之和&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】映客面试</title>
    <link href="http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E7%9F%A5%E4%B9%8E%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/27/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.27%E7%9F%A5%E4%B9%8E%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-26T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="raft的应用场景-同类的算法"><a href="#raft的应用场景-同类的算法" class="headerlink" title="raft的应用场景 同类的算法"></a>raft的应用场景 同类的算法</h3><p>Etched</p><h3 id="hash的时候一个节点链表过长怎么处理"><a href="#hash的时候一个节点链表过长怎么处理" class="headerlink" title="hash的时候一个节点链表过长怎么处理"></a>hash的时候一个节点链表过长怎么处理</h3><ul><li>更换算法</li><li>更换数据结构</li></ul><h3 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h3><p>AOF</p><p>RDB</p><h3 id="b-树在保存唯一索引的时候的生成"><a href="#b-树在保存唯一索引的时候的生成" class="headerlink" title="b+树在保存唯一索引的时候的生成"></a>b+树在保存唯一索引的时候的生成</h3><h3 id="mysql-读到从库未更新数据-如何解决"><a href="#mysql-读到从库未更新数据-如何解决" class="headerlink" title="mysql 读到从库未更新数据 如何解决"></a>mysql 读到从库未更新数据 如何解决</h3><ul><li>主从使用一个数据库 （pass）</li><li>写完库后更新缓存 设置过期时间</li><li>使用数据库中间件</li></ul><h3 id="golang里-make-和-a-int-的区别"><a href="#golang里-make-和-a-int-的区别" class="headerlink" title="golang里 make 和 a := []int{} 的区别"></a>golang里 make 和 a := []int{} 的区别</h3><h3 id="归并排序的时间复杂度和空间复杂度（空间复杂度的计算）"><a href="#归并排序的时间复杂度和空间复杂度（空间复杂度的计算）" class="headerlink" title="归并排序的时间复杂度和空间复杂度（空间复杂度的计算）"></a>归并排序的时间复杂度和空间复杂度（空间复杂度的计算）</h3><p>排序算法比较表格</p><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>冒泡排序</td><td>o(n2)</td><td>o(n2)</td><td>o(1)</td><td>是</td></tr></tbody></table><p>|选择排序    |O（n2）|O（n2）|    O（n2）|O（n2）|    O（1）|O（1）    |不是|<br>|直接插入排序|    O（n2）|O（n2）|    O（n2）|O（n2）|    O（1）|O（1）    |是|<br>|归并排序|    O(nlogn)|O(nlogn)    |O(nlogn)|O(nlogn)    |O（n）|O（n）|    是|<br>|快速排序    |O(nlogn)|O(nlogn)|    O（n2）|O（n2）|    O（logn）|O（logn）|    不是|<br>|堆排序    |O(nlogn)|O(nlogn)|    O(nlogn)|O(nlogn)    |O（1）|O（1）    |不是|<br>|希尔排序|    O(nlogn|)O(nlogn)|    O（ns）|O（ns）|    O（1）|O（1）|    不是|<br>|计数排序|    O(n+k)|O(n+k)|    O(n+k)|O(n+k)|    O(n+k)|O(n+k)    是|<br>|基数排序|    O(N∗M|)O(N∗M)|    O(N∗M)|O(N∗M)    |O(M)|O(M)    |是|</p><h3 id="n个有序数组-合并"><a href="#n个有序数组-合并" class="headerlink" title="n个有序数组 合并"></a>n个有序数组 合并</h3><h3 id="dns使用的协议"><a href="#dns使用的协议" class="headerlink" title="dns使用的协议"></a>dns使用的协议</h3><p>Udp协议</p><h3 id="内网ip访问到公网ip的路径"><a href="#内网ip访问到公网ip的路径" class="headerlink" title="内网ip访问到公网ip的路径"></a>内网ip访问到公网ip的路径</h3><p>内网ip在局域网内是唯一的， 但是可以通过该局域网对应的公网ip来实现对其他公网IP的访问</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;raft的应用场景-同类的算法&quot;&gt;&lt;a href=&quot;#raft的应用场景-同类的算法&quot; class=&quot;headerlink&quot; title=&quot;raft的应用场景 同类的算法&quot;&gt;&lt;/a&gt;raft的应用场景 同类的算法&lt;/h3&gt;&lt;p&gt;Etched&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】作业帮面试</title>
    <link href="http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.25%E4%BD%9C%E4%B8%9A%E5%B8%AE%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.25%E4%BD%9C%E4%B8%9A%E5%B8%AE%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作业帮的面试相对会问很多业务相关的东西， 并且会有很多mysql的代码提问</span><br></pre></td></tr></table></figure><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="在数据库主库和从库不一致的时候，怎么保证数据正确"><a href="#在数据库主库和从库不一致的时候，怎么保证数据正确" class="headerlink" title="在数据库主库和从库不一致的时候，怎么保证数据正确"></a>在数据库主库和从库不一致的时候，怎么保证数据正确</h3><ul><li>读写都在主库</li><li>在写入sql的时候，同时更新缓存，过期时间可以根据自己的经验设置</li><li>数据库中间件 （成本较高）读取走读库， 写走写库， 判断如果这个key最近修改过， 也走写库</li></ul><h3 id="怎么保证数据库和redis数据一致性"><a href="#怎么保证数据库和redis数据一致性" class="headerlink" title="怎么保证数据库和redis数据一致性"></a>怎么保证数据库和redis数据一致性</h3><ul><li>延时双删 超时时间内还是会有问题</li><li>异步更新 binlog增量订阅 + 消息队列 + 更新redis</li></ul><h3 id="rabbitMQ比redis作为消息队列的优点"><a href="#rabbitMQ比redis作为消息队列的优点" class="headerlink" title="rabbitMQ比redis作为消息队列的优点"></a>rabbitMQ比redis作为消息队列的优点</h3><h3 id="mysql的锁的类型"><a href="#mysql的锁的类型" class="headerlink" title="mysql的锁的类型"></a>mysql的锁的类型</h3><h3 id="事务隔离的级别"><a href="#事务隔离的级别" class="headerlink" title="事务隔离的级别"></a>事务隔离的级别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据库提供的四种隔离级别：</span><br><span class="line">01：Read uncommitted(读未提交)：最低级别，任何情况都会发生。</span><br><span class="line">02：Read Committed(读已提交)：可避免脏读的发生。</span><br><span class="line">03：Repeatable read(可重复读)：可避免脏读、不可重复读的发生。</span><br><span class="line">04：Serializable(串行化)：避免脏读、不可重复读，幻读的发生。</span><br></pre></td></tr></table></figure><h3 id="下面代码关键字的执行顺序"><a href="#下面代码关键字的执行顺序" class="headerlink" title="下面代码关键字的执行顺序"></a>下面代码关键字的执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">tables</span> <span class="keyword">where</span> <span class="literal">true</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="怎么保证增减积分的时候不会多扣"><a href="#怎么保证增减积分的时候不会多扣" class="headerlink" title="怎么保证增减积分的时候不会多扣"></a>怎么保证增减积分的时候不会多扣</h3><ul><li>消息队列</li><li>设锁（悲观锁）</li><li>where </li></ul><h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h3><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="rabbitMQ是一种怎么样的形式，-推还是订阅"><a href="#rabbitMQ是一种怎么样的形式，-推还是订阅" class="headerlink" title="rabbitMQ是一种怎么样的形式， 推还是订阅"></a>rabbitMQ是一种怎么样的形式， 推还是订阅</h3><h3 id="联合索引的执行顺序"><a href="#联合索引的执行顺序" class="headerlink" title="联合索引的执行顺序"></a>联合索引的执行顺序</h3><p>最左匹配原则</p><h3 id="为什么要使用联合索引"><a href="#为什么要使用联合索引" class="headerlink" title="为什么要使用联合索引"></a>为什么要使用联合索引</h3><ul><li>减少开销 建一个联合索引等于建很多索引</li><li></li></ul><h3 id="like能否用索引-呢-in呢"><a href="#like能否用索引-呢-in呢" class="headerlink" title="like能否用索引 !=呢 in呢"></a>like能否用索引 !=呢 in呢</h3><ul><li><p>like的前模糊和全模糊不会走索引 即 %j j j 或%j j j%</p></li><li><p>使用&lt;&gt; 或者 != 也不走索引</p></li><li><p>in走索引</p></li></ul><h3 id="分段有序的数组，-查找指定数"><a href="#分段有序的数组，-查找指定数" class="headerlink" title="分段有序的数组， 查找指定数"></a>分段有序的数组， 查找指定数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findX</span><span class="params">(x <span class="keyword">int</span>, a []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  l, r := <span class="number">0</span>, <span class="built_in">len</span>(a)<span class="number">-1</span></span><br><span class="line">  <span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">    mid = l + (r-l)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> a[mid] == x &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> a[mid<span class="number">-1</span>] &gt; a[l] &#123;</span><br><span class="line">      <span class="keyword">if</span> a[mid - <span class="number">1</span>] &gt; x &amp;&amp; x &gt; a[l] &#123;</span><br><span class="line">      r= mid <span class="number">-1</span> </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l = mid + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> a[mid+<span class="number">1</span>] &lt; x &amp;&amp; x &lt; a[r] &#123;</span><br><span class="line">        l = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】来也面试</title>
    <link href="http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.25%E6%9D%A5%E4%B9%9F%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.25%E6%9D%A5%E4%B9%9F%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<p>该部门只是对一个微信公众号的网站进行维护 因此兴趣不大</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="并列排行榜的实现"><a href="#并列排行榜的实现" class="headerlink" title="并列排行榜的实现"></a>并列排行榜的实现</h3><p>使用浮点数 如果分数是整数的时候，直接大于x.1即可</p><h3 id="hash的底层实现"><a href="#hash的底层实现" class="headerlink" title="hash的底层实现"></a>hash的底层实现</h3><ul><li><p>数组加链表的数据结构</p></li><li><p>通过算法计算hash_code （可能会有hash冲突）</p></li><li><p>hash冲突的时候使用链表</p></li></ul><h3 id="评论的时候怎么保证幂等性"><a href="#评论的时候怎么保证幂等性" class="headerlink" title="评论的时候怎么保证幂等性"></a>评论的时候怎么保证幂等性</h3><h3 id="mysql-线上有1000万个数据，怎么加索引"><a href="#mysql-线上有1000万个数据，怎么加索引" class="headerlink" title="mysql 线上有1000万个数据，怎么加索引"></a>mysql 线上有1000万个数据，怎么加索引</h3><p>新建另外的数据库来加</p><h3 id="mysql-1000万个数据，怎么分页"><a href="#mysql-1000万个数据，怎么分页" class="headerlink" title="mysql 1000万个数据，怎么分页"></a>mysql 1000万个数据，怎么分页</h3><p>加一个子查询 id&gt;= limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">id</span> &gt;= (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">limit</span> <span class="number">9000000</span>,<span class="number">1</span>)<span class="keyword">limit</span> <span class="number">0</span>,<span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="grpc的底层协议"><a href="#grpc的底层协议" class="headerlink" title="grpc的底层协议"></a>grpc的底层协议</h3><p>grpc底层使用的是http2.0  传输的数据结构是protocolbuf 是二进制的格式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该部门只是对一个微信公众号的网站进行维护 因此兴趣不大&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;并列排行榜的实现&quot;&gt;&lt;a href=&quot;#并列排行榜的实现&quot; 
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】来也面试</title>
    <link href="http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.26%E5%A5%BD%E6%9C%AA%E6%9D%A5%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.26%E5%A5%BD%E6%9C%AA%E6%9D%A5%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<p>这个部门的面试好水啊….</p><p>主要业务 小猴语文</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h3><h3 id="redis中的string和c中的string"><a href="#redis中的string和c中的string" class="headerlink" title="redis中的string和c中的string"></a>redis中的string和c中的string</h3><p>相似， 因为c里的string时字符数组的格式， 而c++里的是一个指针加上长度</p><h3 id="rabbitMQ和talos的模式-是推还是拉"><a href="#rabbitMQ和talos的模式-是推还是拉" class="headerlink" title="rabbitMQ和talos的模式 是推还是拉"></a>rabbitMQ和talos的模式 是推还是拉</h3><h3 id="grpc和thrift的区别"><a href="#grpc和thrift的区别" class="headerlink" title="grpc和thrift的区别"></a>grpc和thrift的区别</h3><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="逐行遍历数，-求列数"><a href="#逐行遍历数，-求列数" class="headerlink" title="逐行遍历数， 求列数"></a>逐行遍历数， 求列数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dfs</span></span><br></pre></td></tr></table></figure><h3 id="数组里-找重复元素"><a href="#数组里-找重复元素" class="headerlink" title="数组里 找重复元素"></a>数组里 找重复元素</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. hash</span></span><br><span class="line"><span class="comment">// 2. 排序</span></span><br></pre></td></tr></table></figure><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="mvcc"><a href="#mvcc" class="headerlink" title="mvcc"></a>mvcc</h3><h3 id="lru"><a href="#lru" class="headerlink" title="lru"></a>lru</h3><h3 id="数据库千万级为什么会慢"><a href="#数据库千万级为什么会慢" class="headerlink" title="数据库千万级为什么会慢"></a>数据库千万级为什么会慢</h3><h3 id="请求一个连接的访问过程"><a href="#请求一个连接的访问过程" class="headerlink" title="请求一个连接的访问过程"></a>请求一个连接的访问过程</h3><h3 id="go的热加载实现"><a href="#go的热加载实现" class="headerlink" title="go的热加载实现"></a>go的热加载实现</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个部门的面试好水啊….&lt;/p&gt;
&lt;p&gt;主要业务 小猴语文&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;redis的数据类型&quot;&gt;&lt;a href=&quot;#redis的
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】滴滴面试</title>
    <link href="http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.26%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/25/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.26%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-24T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.010Z</updated>
    
    <content type="html"><![CDATA[<p>滴滴一面老哥人比较好，会帮忙思考一些问题</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="发现cpu异常，应该如何处理"><a href="#发现cpu异常，应该如何处理" class="headerlink" title="发现cpu异常，应该如何处理"></a>发现cpu异常，应该如何处理</h3><h3 id="go程序有没有办法使用工具检测"><a href="#go程序有没有办法使用工具检测" class="headerlink" title="go程序有没有办法使用工具检测"></a>go程序有没有办法使用工具检测</h3><p>还有一个go自己的工具 <code>go tool trace</code>, 它有一个UI, 允许你查看你的程序和运行时的状况</p><h3 id="linux-干掉占用内存过高的程序"><a href="#linux-干掉占用内存过高的程序" class="headerlink" title="linux 干掉占用内存过高的程序"></a>linux 干掉占用内存过高的程序</h3><p> Top &amp;&amp; sudo kill -9 pid</p><p>Pid 的ppid有可能还没被杀死</p><p>-9 表示强制的参数</p><h3 id="mysql有什么分库分表的中间件"><a href="#mysql有什么分库分表的中间件" class="headerlink" title="mysql有什么分库分表的中间件"></a>mysql有什么分库分表的中间件</h3><h3 id="go的context"><a href="#go的context" class="headerlink" title="go的context"></a>go的context</h3><p>上下文 主要是对协程进行统一管理</p><p>context包中还包含了四个用于繁衍Context值的函数，即：WithCancel、WithDeadline、WithTimeout和WithValue。</p><h3 id="go的协程与线程的区别"><a href="#go的协程与线程的区别" class="headerlink" title="go的协程与线程的区别"></a>go的协程与线程的区别</h3><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><ul><li>协程由一个或者多个线程管理， 且协程调度发生在线程中</li><li>可以被调度，调度策略由应用层代码实现</li><li>高效， 节省了线程切换的成本</li><li>占用内存少 线程的内存供多个goroutine使用</li></ul><h3 id="锁和channel的区别"><a href="#锁和channel的区别" class="headerlink" title="锁和channel的区别"></a>锁和channel的区别</h3><h3 id="go的mutex是否是可重入锁"><a href="#go的mutex是否是可重入锁" class="headerlink" title="go的mutex是否是可重入锁"></a>go的mutex是否是可重入锁</h3><h3 id="go的mutex是不是公平锁"><a href="#go的mutex是不是公平锁" class="headerlink" title="go的mutex是不是公平锁"></a>go的mutex是不是公平锁</h3><h3 id="测试包的使用"><a href="#测试包的使用" class="headerlink" title="测试包的使用"></a>测试包的使用</h3><p>对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个<em>testing.T类型的参数声明。</em></p><p>对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的。</p><p>对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定。</p><h3 id="MPG"><a href="#MPG" class="headerlink" title="MPG"></a>MPG</h3><h3 id="快排的稳定性为什么差"><a href="#快排的稳定性为什么差" class="headerlink" title="快排的稳定性为什么差"></a>快排的稳定性为什么差</h3><p>因为每次都随机选择快排子</p><h3 id="优化快排"><a href="#优化快排" class="headerlink" title="优化快排"></a>优化快排</h3><h3 id="多列索引的实现"><a href="#多列索引的实现" class="headerlink" title="多列索引的实现"></a>多列索引的实现</h3><p>q</p><h3 id="rabbitMQ底层怎么做存储"><a href="#rabbitMQ底层怎么做存储" class="headerlink" title="rabbitMQ底层怎么做存储"></a>rabbitMQ底层怎么做存储</h3><h3 id="waitGroup的缺点"><a href="#waitGroup的缺点" class="headerlink" title="waitGroup的缺点"></a>waitGroup的缺点</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;滴滴一面老哥人比较好，会帮忙思考一些问题&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;发现cpu异常，应该如何处理&quot;&gt;&lt;a href=&quot;#发现cpu异常，应该如
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】伴鱼面试</title>
    <link href="http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E4%BC%B4%E9%B1%BC%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E4%BC%B4%E9%B1%BC%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用一个 M×N 的矩阵表示一个未知星球的地表，0 表示该区域为海洋，1 表示该区域为陆地，每块陆地只可能与上、下、左、右相邻的四块陆地接壤，请找到这个星球上面积最大的岛屿。</span></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="comment">// 输入：</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   [1, 1, 0],</span></span><br><span class="line"><span class="comment">//   [1, 0, 0],</span></span><br><span class="line"><span class="comment">//   [0, 0, 1]</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  max := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(grid); i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">        area := dfs(grid, i, j)</span><br><span class="line">        <span class="keyword">if</span> area &gt; max &#123;</span><br><span class="line">          max = area</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(grid [][]<span class="keyword">int</span>, x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> x &lt; <span class="number">0</span> || x &gt;= <span class="built_in">len</span>(grid) || y &lt; <span class="number">0</span> || y &gt;= <span class="built_in">len</span>(grid[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> grid[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  area := <span class="number">1</span></span><br><span class="line">  grid[i][j] == <span class="number">0</span></span><br><span class="line">  dx := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;</span><br><span class="line">  dy := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i&lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">    area += dfs(grid, x+ dx[i], y + dy[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="Go-变量与函数同名"><a href="#Go-变量与函数同名" class="headerlink" title="Go 变量与函数同名"></a>Go 变量与函数同名</h3><h3 id="有n个大文件，无法加载进内存，-里面内容是无序的，怎么把他们合并成一个有序的文件"><a href="#有n个大文件，无法加载进内存，-里面内容是无序的，怎么把他们合并成一个有序的文件" class="headerlink" title="有n个大文件，无法加载进内存， 里面内容是无序的，怎么把他们合并成一个有序的文件"></a>有n个大文件，无法加载进内存， 里面内容是无序的，怎么把他们合并成一个有序的文件</h3><p>外排序</p><h3 id="建堆的过程"><a href="#建堆的过程" class="headerlink" title="建堆的过程"></a>建堆的过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">大顶堆：每个结点的值都大于或等于其左右孩子结点的值</span><br><span class="line">小顶堆：每个结点的值都小于或等于其左右孩子结点的值</span><br><span class="line"></span><br><span class="line">根据堆的特性来形成公式就是，节点为i的话</span><br><span class="line">大顶堆: arr[i]&gt;&#x3D;arr[2i+1] &amp;&amp; arr[i]&gt;&#x3D;arr[2i+2]</span><br><span class="line">小顶堆：arr[i]&lt;&#x3D;arr[2i+1] &amp;&amp; arr[i]&lt;&#x3D;arr[2i+2]</span><br></pre></td></tr></table></figure><h3 id="索引为什么不用b-树和平衡二叉树"><a href="#索引为什么不用b-树和平衡二叉树" class="headerlink" title="索引为什么不用b+树和平衡二叉树"></a>索引为什么不用b+树和平衡二叉树</h3><h3 id="索引的节点-多大比较合适"><a href="#索引的节点-多大比较合适" class="headerlink" title="索引的节点 多大比较合适"></a>索引的节点 多大比较合适</h3><h3 id="索引存什么样的格式比较合适"><a href="#索引存什么样的格式比较合适" class="headerlink" title="索引存什么样的格式比较合适"></a>索引存什么样的格式比较合适</h3><p>树转数组</p><h3 id="操作系统-io的大小"><a href="#操作系统-io的大小" class="headerlink" title="操作系统 io的大小"></a>操作系统 io的大小</h3><ul><li>分页</li><li>分段</li><li>段页式</li></ul><h3 id="操作系统32位和64位的区别"><a href="#操作系统32位和64位的区别" class="headerlink" title="操作系统32位和64位的区别"></a>操作系统32位和64位的区别</h3><h3 id="mysql执行事务的时候宕机了，恢复之后还能正常执行吗"><a href="#mysql执行事务的时候宕机了，恢复之后还能正常执行吗" class="headerlink" title="mysql执行事务的时候宕机了，恢复之后还能正常执行吗"></a>mysql执行事务的时候宕机了，恢复之后还能正常执行吗</h3><h3 id="多个进程的时候，如果系统使用时间片轮转的方式-他们是用什么方式提醒下一个进程的，需要存储什么数据"><a href="#多个进程的时候，如果系统使用时间片轮转的方式-他们是用什么方式提醒下一个进程的，需要存储什么数据" class="headerlink" title="多个进程的时候，如果系统使用时间片轮转的方式 他们是用什么方式提醒下一个进程的，需要存储什么数据"></a>多个进程的时候，如果系统使用时间片轮转的方式 他们是用什么方式提醒下一个进程的，需要存储什么数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 使用中断</span><br><span class="line">2. 寄存器内的数据，当前任务的状态</span><br></pre></td></tr></table></figure><h3 id="更新数据库和缓存的时候怎么保证强一致性"><a href="#更新数据库和缓存的时候怎么保证强一致性" class="headerlink" title="更新数据库和缓存的时候怎么保证强一致性"></a>更新数据库和缓存的时候怎么保证强一致性</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法题&quot;&gt;&lt;a href=&quot;#算法题&quot; class=&quot;headerlink&quot; title=&quot;算法题&quot;&gt;&lt;/a&gt;算法题&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】映客面试</title>
    <link href="http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E6%98%A0%E5%AE%A2%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E6%98%A0%E5%AE%A2%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="树的前中后序遍历"><a href="#树的前中后序遍历" class="headerlink" title="树的前中后序遍历"></a>树的前中后序遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">2</span></span><br><span class="line">/   \</span><br></pre></td></tr></table></figure><h3 id="判断链表中有环"><a href="#判断链表中有环" class="headerlink" title="判断链表中有环"></a>判断链表中有环</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用快慢链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cycleExist</span><span class="params">(root *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬楼梯-1"><a href="#爬楼梯-1" class="headerlink" title="爬楼梯 1"></a>爬楼梯 1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次可以走一步或者两步 求到第n个楼梯的方法</span></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br></pre></td></tr></table></figure><h3 id="爬楼梯-2"><a href="#爬楼梯-2" class="headerlink" title="爬楼梯 2"></a>爬楼梯 2</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次可以走1-n步 求走到第n个楼梯的方法</span></span><br><span class="line"><span class="comment">// 2的n-1次方</span></span><br></pre></td></tr></table></figure><h3 id="从左上角到右下角的方法"><a href="#从左上角到右下角的方法" class="headerlink" title="从左上角到右下角的方法"></a>从左上角到右下角的方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ___________</span></span><br><span class="line"><span class="comment">// |s| | | | |</span></span><br><span class="line"><span class="comment">// ___________</span></span><br><span class="line"><span class="comment">// | | | | | |</span></span><br><span class="line"><span class="comment">// ___________</span></span><br><span class="line"><span class="comment">// | | | | |e|</span></span><br><span class="line"><span class="comment">// 从s点到e点有多少种方法</span></span><br></pre></td></tr></table></figure><h3 id="top-k个数"><a href="#top-k个数" class="headerlink" title="top k个数"></a>top k个数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定一个数组中的数 求前k个数</span></span><br><span class="line"><span class="comment">// 方法一 暴力排序法</span></span><br><span class="line"><span class="comment">// 方法二 中间容量为k的数组 用来存储 每次最小的出堆。最小堆</span></span><br><span class="line"><span class="comment">// 方法三 每次选一个数将数组分为两个</span></span><br></pre></td></tr></table></figure><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="mysql-group-by的用法"><a href="#mysql-group-by的用法" class="headerlink" title="mysql group by的用法"></a>mysql group by的用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">value</span>, <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ul><li>聚合索引</li><li>普通索引</li><li>唯一索引</li><li>主键索引</li></ul><h3 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>myisam</li><li>innodb</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><strong>innodb支持事务</strong></li><li>获取总量的时候myisam比较快</li><li>innodb支持外键</li><li>索引的数据结构不一样 innodb是 b+树 myisam是b树</li></ul><h4 id="innodb为什么使用b-树"><a href="#innodb为什么使用b-树" class="headerlink" title="innodb为什么使用b + 树"></a>innodb为什么使用b + 树</h4><ul><li>数据结构更精简</li></ul><h4 id="为什么不用红黑树"><a href="#为什么不用红黑树" class="headerlink" title="为什么不用红黑树"></a>为什么不用红黑树</h4><ul><li>二叉树 存储的数据量太少了 ，导致磁盘io次数增加</li><li>b+树可以范围查询</li></ul><h3 id="raft协议"><a href="#raft协议" class="headerlink" title="raft协议"></a>raft协议</h3><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="redis的数据结构"><a href="#redis的数据结构" class="headerlink" title="redis的数据结构"></a>redis的数据结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string</span><br><span class="line">list</span><br><span class="line">hash</span><br><span class="line">set</span><br><span class="line">zset</span><br></pre></td></tr></table></figure><h4 id="redis怎么实现持久化的"><a href="#redis怎么实现持久化的" class="headerlink" title="redis怎么实现持久化的"></a>redis怎么实现持久化的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AOF 1s 日志 热存储</span><br><span class="line">RDB 快照 冷存储</span><br><span class="line"></span><br><span class="line">结合使用</span><br></pre></td></tr></table></figure><h4 id="zset怎么实现的"><a href="#zset怎么实现的" class="headerlink" title="zset怎么实现的"></a>zset怎么实现的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用字典和跳表实现的</span><br></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h3 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解耦</span><br><span class="line"></span><br><span class="line">异步</span><br><span class="line"></span><br><span class="line">削峰</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;h3 id=&quot;树的前中后序遍历&quot;&gt;&lt;a href=&quot;#树的前中后序遍历&quot; class=&quot;headerlink&quot; title=&quot;树的前中后序遍历&quot;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】知乎面试</title>
    <link href="http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E7%9F%A5%E4%B9%8E%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/24/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.24%E7%9F%A5%E4%B9%8E%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<p>知乎这个岗位不合适，是做存储系统的。</p><h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">  Val <span class="keyword">int</span></span><br><span class="line">  Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseListNode</span><span class="params">(root *ListNode)</span> <span class="title">root</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> ||root.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> prev *List</span><br><span class="line">  <span class="keyword">for</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">    prev, root, root.Next = root, root.Next, prev</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知乎这个岗位不合适，是做存储系统的。&lt;/p&gt;
&lt;h2 id=&quot;业务&quot;&gt;&lt;a href=&quot;#业务&quot; class=&quot;headerlink&quot; title=&quot;业务&quot;&gt;&lt;/a&gt;业务&lt;/h2&gt;&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【位运算】位一的个数</title>
    <link href="http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/%E4%BD%8D%E4%B8%80%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/%E4%BD%8D%E4%B8%80%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure><p>提示：</p><p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。<br>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hammingWeight</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">for</span> num != <span class="number">0</span> &#123;</span><br><span class="line">    count ++</span><br><span class="line">    num = num &amp; (num <span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hammingWeight</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="x-x-gt-gt-1-x-x-2"><a href="#x-x-gt-gt-1-x-x-2" class="headerlink" title="x = x &gt;&gt; 1 x = x % 2"></a>x = x &gt;&gt; 1 x = x % 2</h4><h4 id="x-amp-x-1-去掉最后一个1"><a href="#x-amp-x-1-去掉最后一个1" class="headerlink" title="x &amp; (x-1) 去掉最后一个1"></a>x &amp; (x-1) 去掉最后一个1</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="位运算" scheme="http://lcf12307.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【位运算】比特位计数</title>
    <link href="http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/"/>
    <id>http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 2</span><br><span class="line">输出: [0,1,1]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 5</span><br><span class="line">输出: [0,1,1,2,1,2]</span><br><span class="line">进阶:</span><br></pre></td></tr></table></figure><p>给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？<br>要求算法的空间复杂度为O(n)。<br>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countBits</span><span class="params">(num <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  res := <span class="built_in">make</span>([]<span class="keyword">int</span>, num + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">1</span>; i&lt;num+<span class="number">1</span>; i ++ &#123;</span><br><span class="line">    res[i] += res[i&amp;(i<span class="number">-1</span>)] + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="位运算" scheme="http://lcf12307.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【位运算】2的幂</title>
    <link href="http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/2%E7%9A%84%E5%B9%82/"/>
    <id>http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/2%E7%9A%84%E5%B9%82/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1</span><br><span class="line">输出: true</span><br><span class="line">解释: 20 &#x3D; 1</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 16</span><br><span class="line">输出: true</span><br><span class="line">解释: 24 &#x3D; 16</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 218</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPowerOfTwo</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n &amp; (n<span class="number">-1</span>) == <span class="number">0</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h4><h4 id="log2-int"><a href="#log2-int" class="headerlink" title="log2 = int"></a>log2 = int</h4><p>####位运算</p><p>n&amp;(n-1)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数，编写一个函数来判断它是否是 2 的幂次方。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="位运算" scheme="http://lcf12307.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【二分法】求平方根</title>
    <link href="http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BA%8C%E5%88%86%E6%B3%95/%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>http://lcf12307.github.io/2020/02/11/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E4%BA%8C%E5%88%86%E6%B3%95/%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</id>
    <published>2020-02-10T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  l,r := <span class="number">0</span>,<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">  <span class="keyword">if</span> nums[r] &lt; target &#123;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">    mid := (l + r) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> target == nums[mid] &#123;</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> target &lt; nums[mid] &#123;</span><br><span class="line">      r = mid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> target &gt; nums[mid] &#123;</span><br><span class="line">      l = mid + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 没有把i放入for语句中</span></span><br><span class="line"><span class="comment">// 是为了兼容，len(nums) == 0 和 target &gt; nums[len(nums)-1]两种情况</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; nums[i] &lt;= target &#123;</span><br><span class="line"><span class="comment">// 相等的时候，直接返回</span></span><br><span class="line"><span class="keyword">if</span> nums[i] == target &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，就去检查下一个</span></span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分法" scheme="http://lcf12307.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【剪枝】n皇后</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%89%AA%E6%9E%9D/n%E7%9A%87%E5%90%8E/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%89%AA%E6%9E%9D/n%E7%9A%87%E5%90%8E/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p><p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: [</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; 解法 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; 解法 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">解释: 4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">unc solveNQueens(n <span class="keyword">int</span>) [][]<span class="keyword">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cols := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line"><span class="comment">// 记录 '\' 方向的对角线的占用情况</span></span><br><span class="line">d1 := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="number">2</span>*n)</span><br><span class="line"><span class="comment">// 记录 '/' 方向的对角线的占用情况</span></span><br><span class="line">d2 := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="number">2</span>*n)</span><br><span class="line"></span><br><span class="line">board := <span class="built_in">make</span>([]<span class="keyword">string</span>, n)</span><br><span class="line"></span><br><span class="line">res := [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, cols, d1, d2, board, &amp;res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(r <span class="keyword">int</span>, cols, d1, d2 []<span class="keyword">bool</span>, board []<span class="keyword">string</span>, res *[][]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r == <span class="built_in">len</span>(board) &#123;</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(board))</span><br><span class="line"><span class="built_in">copy</span>(tmp, board)</span><br><span class="line">*res = <span class="built_in">append</span>(*res, tmp)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(board)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c := <span class="number">0</span>; c &lt; <span class="built_in">len</span>(board); c++ &#123;</span><br><span class="line"><span class="comment">// 把棋盘想象成</span></span><br><span class="line"><span class="comment">//   以左上角为坐标原点 [0,0]</span></span><br><span class="line"><span class="comment">//   C 轴正方向向右</span></span><br><span class="line"><span class="comment">//   R 轴正方向向下</span></span><br><span class="line"><span class="comment">// 的坐标系。</span></span><br><span class="line"><span class="comment">// 这样的话，每个格子就都有了自己的坐标值 [c,r]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 对于 '\' 方向的斜线而言</span></span><br><span class="line"><span class="comment">//   同一个斜线上的格子，利用其坐标 [c,r] 计算 r-c 的结果相同，</span></span><br><span class="line"><span class="comment">//   不同斜线上 r-c 的结果不同。</span></span><br><span class="line"><span class="comment">//   所以可以用 r-c 代表不同的 '\' 方向的斜线的编号。</span></span><br><span class="line"><span class="comment">//   但是 r-c 有可能是负值，无法作为切片的索引值</span></span><br><span class="line"><span class="comment">//   所以 +n，可知 r-c+n &gt;= 0</span></span><br><span class="line"><span class="comment">//   所以，使用 r-c+n 作为 '\' 方向斜线切片的索引值。</span></span><br><span class="line"><span class="comment">// 对于 '/' 方向的斜线而言</span></span><br><span class="line"><span class="comment">//   同一个斜线上的格子，利用其坐标 [c,r] 计算 r+c 的结果相同，</span></span><br><span class="line"><span class="comment">//   不同斜线上 r+c 的结果不同。</span></span><br><span class="line"><span class="comment">//   所以可以用 r+c 代表不同的 '/' 方向的斜线的编号。</span></span><br><span class="line"><span class="comment">//   所以，使用 r+c 作为 '/' 方向斜线切片的索引值。</span></span><br><span class="line">id1 := r - c + n</span><br><span class="line">id2 := r + c</span><br><span class="line"><span class="keyword">if</span> !cols[c] &amp;&amp; !d1[id1] &amp;&amp; !d2[id2] &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">b[i] = <span class="string">'.'</span></span><br><span class="line">&#125;</span><br><span class="line">b[c] = <span class="string">'Q'</span></span><br><span class="line">board[r] = <span class="keyword">string</span>(b)</span><br><span class="line"><span class="comment">// 标记占用</span></span><br><span class="line">cols[c], d1[id1], d2[id2] = <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">dfs(r+<span class="number">1</span>, cols, d1, d2, board, res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除标记</span></span><br><span class="line">cols[c], d1[id1], d2[id2] = <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。&lt;/p&gt;
&lt;p&gt;上图为 8 皇后问题的一种解
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剪枝" scheme="http://lcf12307.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>【剪枝】n皇后</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%89%AA%E6%9E%9D/n%E7%9A%87%E5%90%8E2/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%89%AA%E6%9E%9D/n%E7%9A%87%E5%90%8E2/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>上图为 8 皇后问题的一种解法。</p><p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p><p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: [</span><br><span class="line"> [&quot;.Q..&quot;,  &#x2F;&#x2F; 解法 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  &#x2F;&#x2F; 解法 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br><span class="line">解释: 4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">unc solveNQueens(n <span class="keyword">int</span>) [][]<span class="keyword">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cols := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line"><span class="comment">// 记录 '\' 方向的对角线的占用情况</span></span><br><span class="line">d1 := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="number">2</span>*n)</span><br><span class="line"><span class="comment">// 记录 '/' 方向的对角线的占用情况</span></span><br><span class="line">d2 := <span class="built_in">make</span>([]<span class="keyword">bool</span>, <span class="number">2</span>*n)</span><br><span class="line"></span><br><span class="line">board := <span class="built_in">make</span>([]<span class="keyword">string</span>, n)</span><br><span class="line"></span><br><span class="line">res := [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>, cols, d1, d2, board, &amp;res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(r <span class="keyword">int</span>, cols, d1, d2 []<span class="keyword">bool</span>, board []<span class="keyword">string</span>, res *[][]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r == <span class="built_in">len</span>(board) &#123;</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(board))</span><br><span class="line"><span class="built_in">copy</span>(tmp, board)</span><br><span class="line">*res = <span class="built_in">append</span>(*res, tmp)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(board)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c := <span class="number">0</span>; c &lt; <span class="built_in">len</span>(board); c++ &#123;</span><br><span class="line"><span class="comment">// 把棋盘想象成</span></span><br><span class="line"><span class="comment">//   以左上角为坐标原点 [0,0]</span></span><br><span class="line"><span class="comment">//   C 轴正方向向右</span></span><br><span class="line"><span class="comment">//   R 轴正方向向下</span></span><br><span class="line"><span class="comment">// 的坐标系。</span></span><br><span class="line"><span class="comment">// 这样的话，每个格子就都有了自己的坐标值 [c,r]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 对于 '\' 方向的斜线而言</span></span><br><span class="line"><span class="comment">//   同一个斜线上的格子，利用其坐标 [c,r] 计算 r-c 的结果相同，</span></span><br><span class="line"><span class="comment">//   不同斜线上 r-c 的结果不同。</span></span><br><span class="line"><span class="comment">//   所以可以用 r-c 代表不同的 '\' 方向的斜线的编号。</span></span><br><span class="line"><span class="comment">//   但是 r-c 有可能是负值，无法作为切片的索引值</span></span><br><span class="line"><span class="comment">//   所以 +n，可知 r-c+n &gt;= 0</span></span><br><span class="line"><span class="comment">//   所以，使用 r-c+n 作为 '\' 方向斜线切片的索引值。</span></span><br><span class="line"><span class="comment">// 对于 '/' 方向的斜线而言</span></span><br><span class="line"><span class="comment">//   同一个斜线上的格子，利用其坐标 [c,r] 计算 r+c 的结果相同，</span></span><br><span class="line"><span class="comment">//   不同斜线上 r+c 的结果不同。</span></span><br><span class="line"><span class="comment">//   所以可以用 r+c 代表不同的 '/' 方向的斜线的编号。</span></span><br><span class="line"><span class="comment">//   所以，使用 r+c 作为 '/' 方向斜线切片的索引值。</span></span><br><span class="line">id1 := r - c + n</span><br><span class="line">id2 := r + c</span><br><span class="line"><span class="keyword">if</span> !cols[c] &amp;&amp; !d1[id1] &amp;&amp; !d2[id2] &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">b[i] = <span class="string">'.'</span></span><br><span class="line">&#125;</span><br><span class="line">b[c] = <span class="string">'Q'</span></span><br><span class="line">board[r] = <span class="keyword">string</span>(b)</span><br><span class="line"><span class="comment">// 标记占用</span></span><br><span class="line">cols[c], d1[id1], d2[id2] = <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">dfs(r+<span class="number">1</span>, cols, d1, d2, board, res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除标记</span></span><br><span class="line">cols[c], d1[id1], d2[id2] = <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。&lt;/p&gt;
&lt;p&gt;上图为 8 皇后问题的一种解
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剪枝" scheme="http://lcf12307.github.io/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/树/二叉树的层次遍历</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定二叉树: [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line"></span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrder</span><span class="params">(root *TreeNode)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">  res := [][]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> dfs(root, <span class="number">0</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(root *TreeNode, level <span class="keyword">int</span>, res [][]<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> level &gt;= <span class="built_in">len</span>(res) &#123;</span><br><span class="line">    res = <span class="built_in">append</span>(res, []<span class="keyword">int</span>&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res[level] = <span class="built_in">append</span>(res[level], root.Val)</span><br><span class="line">  res = dfs(root.Left, level+<span class="number">1</span>, res)</span><br><span class="line">  res = dfs(root.Right, level+<span class="number">1</span>, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://lcf12307.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/树/二叉树的最大深度</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]，</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line"></span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">返回它的最大深度 3 。</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + max(maxDepth(root.Left), maxDepth(root.Right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明: 叶子节点是指
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://lcf12307.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【贪心算法】买卖股票的最佳时期2</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  profit := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i, p := <span class="keyword">range</span> prices &#123;</span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">1</span> &gt;= <span class="built_in">len</span>(prices) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p &lt; prices[i+<span class="number">1</span>] &#123;</span><br><span class="line">      profit += prices[i+<span class="number">1</span>] - p</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> profit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h4><p>直接循环嵌套</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>hash存储每个有多少个元素</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>拍完序之后遍历个数</p><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><p>分成一半</p><p>如果左边的众数等于右边众数的话，则返回该数</p><p>否则则判断两个众数哪个更多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心" scheme="http://lcf12307.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>【递归分治】括号生成</title>
    <link href="http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>http://lcf12307.github.io/2020/02/10/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p><p>例如，给出 n = 3，生成结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">  res := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, n*n)</span><br><span class="line">  bytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>*n)</span><br><span class="line">  dfs(n, n, <span class="number">0</span>, bytes, &amp;res)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(left, right, idx <span class="keyword">int</span>, bytes []<span class="keyword">byte</span>, res *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span> &#123;</span><br><span class="line">    *res = <span class="built_in">append</span>(*res, <span class="keyword">string</span>(bytes))</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> left &gt; <span class="number">0</span> &#123;</span><br><span class="line">    bytes[idx] = <span class="string">'('</span></span><br><span class="line">    dfs(left - <span class="number">1</span>, right, idx + <span class="number">1</span>, bytes, res)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> right &gt;<span class="number">0</span> &amp;&amp; right &lt; left &#123;</span><br><span class="line">    bytes[idx] = <span class="string">')'</span></span><br><span class="line">    dfs(left, right<span class="number">-1</span>, idx+<span class="number">1</span>, bytes, res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateParenthesis</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">res := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, n*n)</span><br><span class="line">bytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, n*<span class="number">2</span>)</span><br><span class="line">dfs(n, n, <span class="number">0</span>, bytes, &amp;res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(left, right, idx <span class="keyword">int</span>, bytes []<span class="keyword">byte</span>, res *[]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 所有符号都添加完毕</span></span><br><span class="line"><span class="keyword">if</span> left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span> &#123;</span><br><span class="line">*res = <span class="built_in">append</span>(*res, <span class="keyword">string</span>(bytes))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "(" 不用担心匹配问题，</span></span><br><span class="line"><span class="comment">// 只要 left &gt; 0 就可以直接添加</span></span><br><span class="line"><span class="keyword">if</span> left &gt; <span class="number">0</span> &#123;</span><br><span class="line">bytes[idx] = <span class="string">'('</span></span><br><span class="line">dfs(left<span class="number">-1</span>, right, idx+<span class="number">1</span>, bytes, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要添加 ")" 时</span></span><br><span class="line"><span class="comment">// 需要 left &lt; right，</span></span><br><span class="line"><span class="comment">// 即在 bytes[:idx] 至少有一个 "(" 可以与 这个 ")" 匹配</span></span><br><span class="line"><span class="keyword">if</span> right &gt; <span class="number">0</span> &amp;&amp; left &lt; right &#123;</span><br><span class="line">bytes[idx] = <span class="string">')'</span></span><br><span class="line">dfs(left, right<span class="number">-1</span>, idx+<span class="number">1</span>, bytes, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。&lt;/p&gt;
&lt;p&gt;例如，给出 n = 3，生成结果为
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://lcf12307.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/递归分治/求众数</title>
    <link href="http://lcf12307.github.io/2020/02/09/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%B1%82%E4%BC%97%E6%95%B0/"/>
    <id>http://lcf12307.github.io/2020/02/09/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%B1%82%E4%BC%97%E6%95%B0/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,1,1,1,2,2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  x, t := nums[<span class="number">0</span>], <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> x == nums[i]:</span><br><span class="line">      t ++</span><br><span class="line">      <span class="keyword">case</span> t &gt; <span class="number">0</span>:</span><br><span class="line">      t --</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      x = nums[i]</span><br><span class="line">      t = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h4><p>直接循环嵌套</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>hash存储每个有多少个元素</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>拍完序之后遍历个数</p><h4 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h4><p>分成一半</p><p>如果左边的众数等于右边众数的话，则返回该数</p><p>否则则判断两个众数哪个更多</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。&lt;/p&gt;
&lt;p&gt;你可以假设数组是非
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分治" scheme="http://lcf12307.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>【递归和分治】x的n次方</title>
    <link href="http://lcf12307.github.io/2020/02/09/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%B1%82%E6%8C%87%E6%95%B0/"/>
    <id>http://lcf12307.github.io/2020/02/09/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%80%92%E5%BD%92%E5%88%86%E6%B2%BB/%E6%B1%82%E6%8C%87%E6%95%B0/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.00000, 10</span><br><span class="line">输出: 1024.00000</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.10000, 3</span><br><span class="line">输出: 9.26100</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.00000, -2</span><br><span class="line">输出: 0.25000</span><br><span class="line">解释: 2-2 &#x3D; 1&#x2F;22 &#x3D; 1&#x2F;4 &#x3D; 0.25</span><br></pre></td></tr></table></figure><p>说明:</p><p>-100.0 &lt; x &lt; 100.0<br>n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/pow(x, -n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pow(x, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x <span class="keyword">float64</span>, n <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> x == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  res := pow(x, n&gt;&gt;<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res * res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res * res * x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt; 实现 pow(x, n) ，即计算 x 的 n 次幂函数。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分治" scheme="http://lcf12307.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/树/二叉搜索树的最近公共祖先</title>
    <link href="http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> helper(root, p.Val, q.Val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helper</span><span class="params">(root *TreeNode, p, q <span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">  r := root.Val</span><br><span class="line">  <span class="keyword">if</span> p &lt; r &amp;&amp; q &lt; r &#123;</span><br><span class="line">    <span class="keyword">return</span> helper(root.Left, p, q)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> p &gt; r &amp;&amp; q &gt; r &#123;</span><br><span class="line">    <span class="keyword">return</span> helper(root.Right, p, q)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>对树进行中序排列 如果最后数组是升序的，即二叉搜索树</li><li>递归的判断树的子节点是不是满足大小范围条件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://lcf12307.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/树/二叉树的最近公共祖先</title>
    <link href="http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">输出: 3</span><br><span class="line">解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">输出: 5</span><br><span class="line">解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowestCommonAncestor</span><span class="params">(root, p, q *TreeNode)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> ||</span><br><span class="line">  root.Val == p ||</span><br><span class="line">  root.Val == q &#123;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">  l := lowestCommonAncestor(root.Left, p, q)</span><br><span class="line">  r := lowestCommonAncestor(root.Right, p, q)</span><br><span class="line">  <span class="keyword">if</span> l != <span class="literal">nil</span> &amp;&amp; r != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> l == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>对树进行中序排列 如果最后数组是升序的，即二叉搜索树</li><li>递归的判断树的子节点是不是满足大小范围条件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://lcf12307.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/树/验证二叉搜索树</title>
    <link href="http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://lcf12307.github.io/2020/02/08/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%91/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><p>节点的左子树只包含小于当前节点的数。<br>节点的右子树只包含大于当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><p>输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line">输出: false</span><br><span class="line">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class="line">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  MIN, MAX := <span class="number">-1</span>&lt;&lt;<span class="number">63</span>, <span class="number">1</span>&lt;&lt;<span class="number">63</span><span class="number">-1</span></span><br><span class="line">  <span class="keyword">return</span> recur(root, MIN, MAX)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recur</span><span class="params">(root *TreeNode, min,max <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root.Val &gt; min &amp;&amp; root.Val &lt; max &amp;&amp;</span><br><span class="line">  recur(root.left, min, root.Val) </span><br><span class="line">  &amp;&amp; recur(root.right, root.Val, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>对树进行中序排列 如果最后数组是升序的，即二叉搜索树</li><li>递归的判断树的子节点是不是满足大小范围条件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树，判断其是否是一个有效的二叉搜索树。&lt;/p&gt;
&lt;p&gt;假设一个二叉搜索树具有如下特征：&lt;/p&gt;
&lt;p&gt;节点的左子树只包含小于当前
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://lcf12307.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/哈希表/异位词</title>
    <link href="http://lcf12307.github.io/2020/02/07/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <id>http://lcf12307.github.io/2020/02/07/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%BC%82%E4%BD%8D%E8%AF%8D/</id>
    <published>2020-02-06T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>说明:<br>你可以假设字符串只包含小写字母。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(t) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  sr := []<span class="keyword">rune</span>&#123;s&#125;</span><br><span class="line">  tr := []<span class="keyword">rune</span>&#123;t&#125;</span><br><span class="line">  rec := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>, <span class="built_in">len</span>(s))</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">    rec[sr[i]] ++</span><br><span class="line">    rec[tr[i]] --</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希表" scheme="http://lcf12307.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【字符串】最长无重复子串</title>
    <link href="http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/"/>
    <id>http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3</p><p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="comment">// 设置一个ascii 数组</span></span><br><span class="line">    locations := [<span class="number">256</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 设定初始值 -1</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="built_in">len</span>(locations); i ++ &#123;</span><br><span class="line">        locations[i] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 起始位置和最大值</span></span><br><span class="line">    start, max := <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">      <span class="comment">// 如果上次重复的位置比当前的start要大， 重设起始位置</span></span><br><span class="line">        <span class="keyword">if</span> locations[s[i]] &gt;= start &#123;</span><br><span class="line">            start = locations[s[i]] + <span class="number">1</span></span><br><span class="line">          <span class="comment">// 如果没有重复值， 更新最大值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> i + <span class="number">1</span> - start &gt; max &#123;</span><br><span class="line">            max = i + <span class="number">1</span> - start </span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 记录该字符上次出现的位置</span></span><br><span class="line">        locations[s[i]] = i</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> max  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: “abcabcbb”&lt;br
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://lcf12307.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【栈和队列】合法括号</title>
    <link href="http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7/"/>
    <id>http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 5:</span><br><span class="line"></span><br><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  size := <span class="built_in">len</span>(s)</span><br><span class="line">  stack := <span class="built_in">make</span>([]<span class="keyword">byte</span>, size)</span><br><span class="line">  top   := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">    c := s[i]</span><br><span class="line">    <span class="keyword">switch</span> c &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">')'</span>, <span class="string">']'</span>, <span class="string">'&#125;'</span>:</span><br><span class="line">      <span class="keyword">if</span> top &gt; <span class="number">0</span> &amp;&amp; stack[top - <span class="number">1</span>] == c &#123;</span><br><span class="line">        top --</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'('</span>: </span><br><span class="line">      stack[top] = c + <span class="number">1</span> <span class="comment">// ( + 1 =)</span></span><br><span class="line">      top ++ </span><br><span class="line">      <span class="keyword">case</span> <span class="string">'['</span>, <span class="string">'&#123;'</span>:</span><br><span class="line">      stack[top] = c + <span class="number">2</span> <span class="comment">// [ + 2 =]</span></span><br><span class="line">      top ++ </span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> top == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>检测到左括号，就将对应的括号压入</p><p>检测到右括号，就将对应的括号去掉，如果没有，则返回false</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字符串需满足：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://lcf12307.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/栈和队列/滑动窗口最大值</title>
    <link href="http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3</span><br><span class="line">输出: [3,3,5,5,6,7] </span><br><span class="line">解释: </span><br><span class="line"></span><br><span class="line">  滑动窗口的位置                最大值</span><br><span class="line"></span><br><span class="line">---------------               -----</span><br><span class="line"></span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p>提示：</p><p>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p><p>进阶：</p><p>你能在线性时间复杂度内解决此题吗？</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参看 https://leetcode.com/problems/sliding-window-maximum/discuss/65881/O(n)-solution-in-Java-with-two-simple-pass-in-the-array</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSlidingWindow</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">size := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> k &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g := k - <span class="number">1</span> <span class="comment">// 比参考文章的分组少一个，可以减少 max 函数的调用，理论上可以加速。</span></span><br><span class="line"></span><br><span class="line">left := <span class="built_in">make</span>([]<span class="keyword">int</span>, size)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i%g == <span class="number">0</span> &#123;</span><br><span class="line">left[i] = nums[i]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left[i] = max(nums[i], left[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">right := <span class="built_in">make</span>([]<span class="keyword">int</span>, size)</span><br><span class="line"><span class="comment">// size-1 很可能不是那组的最后一个，需要单独列出</span></span><br><span class="line">right[size<span class="number">-1</span>] = nums[size<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> j := size - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> (j+<span class="number">1</span>)%g == <span class="number">0</span> &#123;</span><br><span class="line">right[j] = nums[j]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right[j] = max(nums[j], right[j+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">make</span>([]<span class="keyword">int</span>, size-k+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= size-k; i++ &#123;</span><br><span class="line"><span class="comment">// right[i] 中保存了 nums[i:g*(i/g+1)] 中的最大值</span></span><br><span class="line"><span class="comment">// left[i+k-1] 中保存了 nums[g*(i/g+1):i+k] 中的最大值</span></span><br><span class="line">res[i] = max(right[i], left[i+k<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://lcf12307.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【栈和队列】用栈实现队列</title>
    <link href="http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>使用栈实现队列的下列操作：</p><p>push(x) – 将一个元素放入队列的尾部。<br>pop() – 从队列首部移除元素。<br>peek() – 返回队列首部的元素。<br>empty() – 返回队列是否为空。<br>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue &#x3D; new MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(1);</span><br><span class="line">queue.push(2);  </span><br><span class="line">queue.peek();  &#x2F;&#x2F; 返回 1</span><br><span class="line">queue.pop();   &#x2F;&#x2F; 返回 1</span><br><span class="line">queue.empty(); &#x2F;&#x2F; 返回 false</span><br></pre></td></tr></table></figure><p>说明:</p><p>你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。<br>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    arr []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MyQueue</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> this.arr == <span class="literal">nil</span> &#123;</span><br><span class="line">        this.arr = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    this.arr = <span class="built_in">append</span>(this.arr, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> this.arr == <span class="literal">nil</span> &#123;</span><br><span class="line">        this.arr = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.arr) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    a := this.arr[<span class="number">0</span>]</span><br><span class="line">    this.arr = this.arr[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the front element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Peek</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> this.arr == <span class="literal">nil</span> &#123;</span><br><span class="line">        this.arr = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.arr) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this.arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> this.arr == <span class="literal">nil</span> || <span class="built_in">len</span>(this.arr) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Peek();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;使用栈实现队列的下列操作：&lt;/p&gt;
&lt;p&gt;push(x) – 将一个元素放入队列的尾部。&lt;br&gt;pop() – 从队列首部移除元素。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="http://lcf12307.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>刷题心得/栈和队列/第k大元素</title>
    <link href="http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://lcf12307.github.io/2020/02/05/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E7%AC%ACk%E5%A4%A7%E5%85%83%E7%B4%A0/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p><p>你的 KthLargest 类需要一个同时接收整数 k 和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>[] arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>];</span><br><span class="line">KthLargest kthLargest = <span class="keyword">new</span> KthLargest(<span class="number">3</span>, arr);</span><br><span class="line">kthLargest.add(<span class="number">3</span>);   <span class="comment">// returns 4</span></span><br><span class="line">kthLargest.add(<span class="number">5</span>);   <span class="comment">// returns 5</span></span><br><span class="line">kthLargest.add(<span class="number">10</span>);  <span class="comment">// returns 5</span></span><br><span class="line">kthLargest.add(<span class="number">9</span>);   <span class="comment">// returns 8</span></span><br><span class="line">kthLargest.add(<span class="number">4</span>);   <span class="comment">// returns 8</span></span><br></pre></td></tr></table></figure><p>说明:<br>你可以假设 nums 的长度≥ k-1 且k ≥ 1。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> problem0703</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"container/heap"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// KthLargest object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// obj := Constructor(k, nums);</span></span><br><span class="line"><span class="comment">// param_1 := obj.Add(val);</span></span><br><span class="line"><span class="keyword">type</span> KthLargest <span class="keyword">struct</span> &#123;</span><br><span class="line">k    <span class="keyword">int</span></span><br><span class="line">heap intHeap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructor 创建 KthLargest</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(k <span class="keyword">int</span>, nums []<span class="keyword">int</span>)</span> <span class="title">KthLargest</span></span> &#123;</span><br><span class="line">h := intHeap(nums)</span><br><span class="line">heap.Init(&amp;h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(h) &gt; k &#123;</span><br><span class="line">heap.Pop(&amp;h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> KthLargest&#123;</span><br><span class="line">k:    k,</span><br><span class="line">heap: h,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add 负责添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *KthLargest)</span> <span class="title">Add</span><span class="params">(val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">heap.Push(&amp;kl.heap, val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(kl.heap) &gt; kl.k &#123;</span><br><span class="line">heap.Pop(&amp;kl.heap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> kl.heap[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> intHeap []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h intHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h intHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> h[i] &lt; h[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h intHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">h[i], h[j] = h[j], h[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *intHeap)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// Push 使用 *h，是因为</span></span><br><span class="line"><span class="comment">// Push 增加了 h 的长度</span></span><br><span class="line">*h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *intHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="comment">// Pop 使用 *h ，是因为</span></span><br><span class="line"><span class="comment">// Pop 减短了 h 的长度</span></span><br><span class="line">res := (*h)[<span class="built_in">len</span>(*h)<span class="number">-1</span>]</span><br><span class="line">*h = (*h)[:<span class="built_in">len</span>(*h)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。&lt;/p&gt;
&lt;p&gt;你的 KthLargest
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="http://lcf12307.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>【链表和数组】K个一组反转链表</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/K%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/K%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>示例 :</p><p>给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5</p><p>当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p><p>说明 :</p><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseKGroup</span><span class="params">(head *ListNode, k <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。&lt;/p&gt;
&lt;p&gt;k 是一个正整数，它的值小于或等于链表的长度。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://lcf12307.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表和数组】两两交换链表中的节点</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener"><br>\24. 两两交换链表中的节点 - 力扣（LeetCode）</a></p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  &#125;</span><br><span class="line">  newHead := head.Next</span><br><span class="line">  head.Next = swapPairs(newHead.Next)</span><br><span class="line">  newHead.Next = head</span><br><span class="line">  <span class="keyword">return</span> newHead</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> prev,prev.Next *ListNode</span><br><span class="line">  <span class="keyword">for</span> head != <span class="literal">nil</span> &amp;&amp; head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">    prev.Next := head.Next</span><br><span class="line">    head.Next = prev.Next</span><br><span class="line">    prev.Next.Next = head</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">    prev.Next = head</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题采用递归的解法</p><p>首先对特殊情况进行处理</p><p>其次交换当前两个节点的位置，并对之后的节点进行处理</p><p>返回结果</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两两交换链表中的节点&quot;&gt;&lt;a href=&quot;#两两交换链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;两两交换链表中的节点&quot;&gt;&lt;/a&gt;两两交换链表中的节点&lt;/h2&gt;&lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;
&lt;p&gt;你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/swap-nodes-in-pairs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;\24. 两两交换链表中的节点 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://lcf12307.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表和数组】反转链表</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反转一个单链表。"><a href="#反转一个单链表。" class="headerlink" title="反转一个单链表。"></a>反转一个单链表。</h2><p>示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener"><br>\206. 反转链表 - 力扣（LeetCode）</a></p><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>新建一个空节点 作为反转后的串的顶部节点</p><p>遍历每个节点 并执行以下操作</p><ul><li>临时变量存储next的值</li><li>head的next指向prev</li><li>prev 指向当前的head</li><li>head指向下一个节点</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> prev *ListNode</span><br><span class="line">  <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">    temp := head.Next</span><br><span class="line">    head.Next = prev</span><br><span class="line">    prev = head</span><br><span class="line">    head = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反转一个单链表。&quot;&gt;&lt;a href=&quot;#反转一个单链表。&quot; class=&quot;headerlink&quot; title=&quot;反转一个单链表。&quot;&gt;&lt;/a&gt;反转一个单链表。&lt;/h2&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&lt;br&gt;输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;br&gt;进阶:&lt;br&gt;你可以迭代或递归地反转链表。你能否用两种方法解决这道题？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;\206. 反转链表 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://lcf12307.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表和数组】环形链表</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，判断链表中是否有环。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。</p><p>进阶：</p><p>你能用 O(1)（即，常量）内存解决此问题吗？</p><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener"><br>\141. 环形链表 - 力扣（LeetCode）</a></p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  slow, fast := head, head.Next</span><br><span class="line">  <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &amp;&amp; slow != fast &#123;</span><br><span class="line">    slow, fast = slow.Next, fast.Next.Next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> slow == fast</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果快慢指针能相遇，则存在环</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。&lt;/p&gt;
&lt;h3 id=&quot;示例-1：&quot;&gt;&lt;a href=&quot;#示例-1：&quot; class=&quot;headerlink&quot; title=&quot;示例 1：&quot;&gt;&lt;/a&gt;示例 1：&lt;/h3&gt;&lt;p&gt;输入：head = [3,2,0,-4], pos = 1&lt;br&gt;输出：true&lt;br&gt;解释：链表中有一个环，其尾部连接到第二个节点。&lt;/p&gt;
&lt;h3 id=&quot;示例-2：&quot;&gt;&lt;a href=&quot;#示例-2：&quot; class=&quot;headerlink&quot; title=&quot;示例 2：&quot;&gt;&lt;/a&gt;示例 2：&lt;/h3&gt;&lt;p&gt;输入：head = [1,2], pos = 0&lt;br&gt;输出：true&lt;br&gt;解释：链表中有一个环，其尾部连接到第一个节点。&lt;/p&gt;
&lt;h3 id=&quot;示例-3：&quot;&gt;&lt;a href=&quot;#示例-3：&quot; class=&quot;headerlink&quot; title=&quot;示例 3：&quot;&gt;&lt;/a&gt;示例 3：&lt;/h3&gt;&lt;p&gt;输入：head = [1], pos = -1&lt;br&gt;输出：false&lt;br&gt;解释：链表中没有环。&lt;/p&gt;
&lt;p&gt;进阶：&lt;/p&gt;
&lt;p&gt;你能用 O(1)（即，常量）内存解决此问题吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;\141. 环形链表 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://lcf12307.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【链表和数组】环形链表2</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/%E9%93%BE%E8%A1%A8%E5%92%8C%E6%95%B0%E7%BB%84/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><p>示例 1：</p><p>输入：head = [3,2,0,-4], pos = 1<br>输出：tail connects to node index 1<br>解释：链表中有一个环，其尾部连接到第二个节点。</p><p>示例 2：</p><p>输入：head = [1,2], pos = 0<br>输出：tail connects to node index 0<br>解释：链表中有一个环，其尾部连接到第一个节点。</p><p>示例 3：</p><p>输入：head = [1], pos = -1<br>输出：no cycle<br>解释：链表中没有环。</p><p>进阶：<br>你是否可以不用额外空间解决此题？</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slow, fast := head.Next, head.Next.Next</span><br><span class="line"><span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &amp;&amp; slow != fast &#123;</span><br><span class="line">slow, fast = slow.Next, fast.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> slow != fast &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> slow != head &#123;</span><br><span class="line">slow, head = slow.Next, head.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果快慢指针能相遇，则存在环</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。&lt;/p&gt;
&lt;p&gt;说明：不允许修改给定的链表。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：head = [3,2,0,-4], pos = 1&lt;br&gt;输出：tail connects to node index 1&lt;br&gt;解释：链表中有一个环，其尾部连接到第二个节点。&lt;/p&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：head = [1,2], pos = 0&lt;br&gt;输出：tail connects to node index 0&lt;br&gt;解释：链表中有一个环，其尾部连接到第一个节点。&lt;/p&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;p&gt;输入：head = [1], pos = -1&lt;br&gt;输出：no cycle&lt;br&gt;解释：链表中没有环。&lt;/p&gt;
&lt;p&gt;进阶：&lt;br&gt;你是否可以不用额外空间解决此题？&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷题心得" scheme="http://lcf12307.github.io/categories/%E5%88%B7%E9%A2%98%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="算法" scheme="http://lcf12307.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://lcf12307.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【面试复盘】头条面试</title>
    <link href="http://lcf12307.github.io/2020/02/04/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.13%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://lcf12307.github.io/2020/02/04/%E9%9D%A2%E8%AF%95/%E5%A4%8D%E7%9B%98/2.13%E5%A4%B4%E6%9D%A1%E9%9D%A2%E8%AF%95/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="redis的雪崩、击穿、穿透"><a href="#redis的雪崩、击穿、穿透" class="headerlink" title="redis的雪崩、击穿、穿透"></a>redis的雪崩、击穿、穿透</h4><h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4><h4 id="golang里的线程安全map"><a href="#golang里的线程安全map" class="headerlink" title="golang里的线程安全map"></a>golang里的线程安全map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync.map</span><br></pre></td></tr></table></figure><h4 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis cluster"></a>redis cluster</h4><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><h4 id="手动实现parseInt"><a href="#手动实现parseInt" class="headerlink" title="手动实现parseInt"></a>手动实现parseInt</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(i <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 去掉空格</span></span><br><span class="line">  <span class="comment">// 判断为空</span></span><br><span class="line">  <span class="comment">// 判断第一个字符是否是正负号</span></span><br><span class="line">  <span class="comment">// 增加时判</span></span><br></pre></td></tr></table></figure><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><h3 id="算法题-1"><a href="#算法题-1" class="headerlink" title="算法题"></a>算法题</h3><h4 id="最长无重复子串"><a href="#最长无重复子串" class="headerlink" title="最长无重复子串"></a>最长无重复子串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  location := [<span class="number">256</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="keyword">range</span> location &#123;</span><br><span class="line">    location[i] = <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  left, maxLen := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i&lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> location[i] &gt;= left &#123;</span><br><span class="line">      left = location[s[i]] + <span class="number">1</span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> i + <span class="number">1</span> - left &gt; maxLen &#123;</span><br><span class="line">      maxLen = i + <span class="number">1</span> - left</span><br><span class="line">    &#125;</span><br><span class="line">    location[s[i]] = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="复盘" scheme="http://lcf12307.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>【常见问题】hexo</title>
    <link href="http://lcf12307.github.io/2020/01/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://lcf12307.github.io/2020/01/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-21T06:51:25.000Z</published>
    <updated>2021-06-22T16:07:22.758Z</updated>
    
    <content type="html"><![CDATA[<p><code>由于刚刚开始使用hexo，对很多操作都不是很理解，因此，进行了一些调研，调研结果如下，包括摘要，标签等等方式</code></p><h3 id="如何设置文章摘要"><a href="#如何设置文章摘要" class="headerlink" title="如何设置文章摘要?"></a>如何设置文章摘要?</h3><p>在 Markdown 中加 ``</p><h3 id="文章如何添加多个标签"><a href="#文章如何添加多个标签" class="headerlink" title="文章如何添加多个标签"></a>文章如何添加多个标签</h3><p>有两种多标签格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [a, b, c]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">  - c</span><br></pre></td></tr></table></figure><h2 id="修改-brand-图片（菜单上方背景图）"><a href="#修改-brand-图片（菜单上方背景图）" class="headerlink" title="修改 brand 图片（菜单上方背景图）"></a>修改 brand 图片（菜单上方背景图）</h2><p>替换 <code>themes\indigo\source\img\brand.jpg</code>，保持原文件名不变。</p><h3 id="如何在文章中使用图标"><a href="#如何在文章中使用图标" class="headerlink" title="如何在文章中使用图标"></a>如何在文章中使用图标</h3><p>先到 <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">fontawesome</a> 找到你需要的图标名，比如：<code>book</code>，按以下格式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon icon-book&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>图标样式前缀均为 <code>icon</code>，此外还有 5 个图标大小调节类和 1 个间距类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1.3倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-lg&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 2倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-2x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 3倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-3x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 4倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-4x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-5x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5px右边距 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-pr&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5px左边距 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-pl&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><h2 id="个别图标无法显示"><a href="#个别图标无法显示" class="headerlink" title="个别图标无法显示"></a>个别图标无法显示</h2><p>如果你的浏览器安装了 ADBlock，它会屏蔽 SNS 相关的内容，比如：Github。</p><p>解决办法：可配置 ADBlock 不在你的站点运行。</p><h2 id="生成站点后没有样式"><a href="#生成站点后没有样式" class="headerlink" title="生成站点后没有样式"></a>生成站点后没有样式</h2><p><a href="https://github.com/yscoder/hexo-theme-indigo/wiki/安装" target="_blank" rel="noopener">安装less</a></p><h2 id="更改样式后网站没有生效"><a href="#更改样式后网站没有生效" class="headerlink" title="更改样式后网站没有生效"></a>更改样式后网站没有生效</h2><p>确认非缓存问题后，执行 <code>hexo clean</code> 再进行生成上传。</p><h2 id="更改站点配色"><a href="#更改站点配色" class="headerlink" title="更改站点配色"></a>更改站点配色</h2><p>编辑 <code>themes\indigo\source\css\_partial\variable.less</code>，更改对应的颜色变量。</p><p>配色参考：<a href="http://www.materialpalette.com/" target="_blank" rel="noopener">Material Design Color Palette Generator</a></p><blockquote><p>注意：使用自定义配色时需把主题配置中的 cdn 关闭，<code>cdn: false</code>。</p></blockquote><h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>在 <code>hexo/source</code> 目录内新建 <code>404.html</code>。</p><p>设置元数据信息，如果不想套用主题布局可设置 <code>layout</code> 为 <code>false</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false    </span><br><span class="line">title: &quot;My Blog Name | 404&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="在博客中使用-Emoji"><a href="#在博客中使用-Emoji" class="headerlink" title="在博客中使用 Emoji"></a>在博客中使用 Emoji</h2><p>参考 <a href="https://github.com/yscoder/hexo-theme-indigo/issues/90" target="_blank" rel="noopener">Can i use emoji in mypage?</a></p><h2 id="自行修改样式线上不生效"><a href="#自行修改样式线上不生效" class="headerlink" title="自行修改样式线上不生效"></a>自行修改样式线上不生效</h2><p>因为主题默认引用 cdn 样式，只有主题更新时，cdn 中的样式才会变化。 如果想使用自己修改的样式，需要把修改配置中的 <code>cdn: false</code>。这样就不在引用 cdn 资源，使用本地资源了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;由于刚刚开始使用hexo，对很多操作都不是很理解，因此，进行了一些调研，调研结果如下，包括摘要，标签等等方式&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何设置文章摘要&quot;&gt;&lt;a href=&quot;#如何设置文章摘要&quot; class=&quot;headerlink&quot; title=&quot;如
      
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="hexo" scheme="http://lcf12307.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【常见问题】nginx搭建的服务器 报No input file specified错</title>
    <link href="http://lcf12307.github.io/2020/01/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/No%20input%20file%20specified/"/>
    <id>http://lcf12307.github.io/2020/01/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/No%20input%20file%20specified/</id>
    <published>2020-01-21T06:51:25.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> nginx搭建的服务器 报No input file specified错</p></blockquote><a id="more"></a><p>我把php-fpm重启下就能访问了  然后没过多久又抱No input file specified错</p><p>php-fpm在重启下又可以正常访问了 </p><p>您的服务器不支持 PATH_INFO;</p><p>在php.ini文件里面修改：</p><p>  1、增加一行（这个最重要）</p><p>​    fastcgi.impersonate = 1</p><p>  2、修改两项（解开注释就可以了）</p><p>​    cgi.fix_pathinfo=1<br>​    cgi.force_redirect = 0</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; nginx搭建的服务器 报No input file specified错&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="php" scheme="http://lcf12307.github.io/tags/php/"/>
    
      <category term="服务器" scheme="http://lcf12307.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【吊打面试官】HTTP，TCP， socket，RPC 与gRPC都是啥？</title>
    <link href="http://lcf12307.github.io/2020/01/21/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/HTTP%EF%BC%8CTCP%EF%BC%8C%20socket%EF%BC%8CRPC%20%E4%B8%8EgRPC%E9%83%BD%E6%98%AF%E5%95%A5%EF%BC%9F/"/>
    <id>http://lcf12307.github.io/2020/01/21/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/HTTP%EF%BC%8CTCP%EF%BC%8C%20socket%EF%BC%8CRPC%20%E4%B8%8EgRPC%E9%83%BD%E6%98%AF%E5%95%A5%EF%BC%9F/</id>
    <published>2020-01-20T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.012Z</updated>
    
    <content type="html"><![CDATA[<p><code>大家在面试题里看到过那么多次tcp，http， rpc等等，但是一直没有放到一起对比，今天我们一起对比看下，这几个有什么不同</code></p><h4 id="TCP-HTTP与socket"><a href="#TCP-HTTP与socket" class="headerlink" title="TCP/HTTP与socket"></a>TCP/HTTP与socket</h4><p>首先回顾下计算机网络的五(七)层协议：物理层、数据链路层、网络层、传输层、(会话层、表示层)和应用层。那么从协议上来讲：</p><ul><li>TCP是传输层协议，主要解决数据如何在网络中传输</li><li>HTTP 是应用层协议，主要解决如何包装数据（文本信息），是建立在tcp协议之上的应用。TCP协议是以二进制数据流的形式解决传输层的事儿，但对上层的应用开发极不友好，所以面向应用层的开发又产生了HTTP协议。</li></ul><p>而socket 是针对TCP或UDP的具体接口实现，提供了在传输层进行网络编程的方法。</p><p>以上内容我们应该都听说的比较多了，下面主要来谈一谈RPC。</p><h4 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h4><blockquote><p>RPC(Remote Procedure Call)是远程过程调用，比如说现在有两台服务器A, B，一个在A服务器上的应用想要调用B服务器上的应用提供的某个，由于不在两个方法不在一个内存空间，不能直接调用，需要通过网络表达调用的语义和传达调用的数据。常存在于分布式系统中。</p></blockquote><p><em>为何有http协议之后，还要RPC调用？</em></p><blockquote><p>RPC跟HTTP不是对立面，RPC中可以使用HTTP作为通讯协议。<strong>RPC是一种设计、实现框架，通讯协议只是其中一部分。</strong></p><p><strong>RPC的本质是提供了一种轻量无感知的跨进程通信的方式</strong>，在分布式机器上调用其他方法与本地调用无异（远程调用的过程是透明的，你并不知道这个调用的方法是部署在哪里，通过PRC能够解耦服务）。RPC是根据语言的API来定义的，而不是基于网络的应用来定义的，调用更方便，协议私密更安全、内容更小效率更高。</p><p>http接口是在接口不多、系统与系统交互较少的情况下，解决信息孤岛初期常使用的一种通信手段；优点就是简单、直接、开发方便。利用现成的http协议 进行传输。但是如果是一个大型的网站，内部子系统较多、接口非常多的情况下，RPC框架的好处就显示出来了，首先（基于TCP协议的情况下）就是长链接，不必每次通信都要像http 一样去3次握手什么的，减少了网络开销；其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统 一化的操作。第三个来说就是安全性。最后就是最近流行的服务化架构、服务化治理，RPC框架是一个强力的支撑。</p></blockquote><p><em>RPC 中要解决的问题：</em></p><ul><li>建立通信：在客户端与服务端建立起数据传输通道，大都是TCP连接（gRPC使用了HTTP2）。</li><li>寻址：A服务器上的应用需要告诉RPC框架：B服务器地址、端口，调用函数名称。所以必须实现待调用方法到call ID的映射。</li><li>序列化与反序列化：由于网络协议都是二进制的，所以调用方法的参数在进行传递时首先要序列化成二进制，B服务器收到请求后要再对参数进行反序列化。恢复为内存中的表达方式，找到对应的方法进行本地调用，得到返回值。返回值从B到A的传输仍要经过序列化与反序列化的过程。</li></ul><h4 id="常见名词小结"><a href="#常见名词小结" class="headerlink" title="常见名词小结"></a>常见名词小结</h4><table><thead><tr><th align="left">名词</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">RPC</td><td align="left">远程过程调用（分布式、微服务间的方法调用）</td></tr><tr><td align="left">HTTP</td><td align="left">无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）</td></tr><tr><td align="left">TCP</td><td align="left">面向连接，三次握手保证通信可靠</td></tr><tr><td align="left">UDP</td><td align="left">非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）</td></tr><tr><td align="left">socket</td><td align="left">TCP协议的接口实现，面向传输层进行网络编程</td></tr></tbody></table><h4 id="单独来谈一谈gRPC"><a href="#单独来谈一谈gRPC" class="headerlink" title="单独来谈一谈gRPC"></a>单独来谈一谈gRPC</h4><p>gRPC是谷歌开源的一个 RPC 框架，面向移动和 HTTP/2 设计。</p><ul><li>内容交换格式采用ProtoBuf(Google Protocol Buffers)，开源已久，提供了一种灵活、高效、自动序列化结构数据的机制，作用与XML，Json类似，但使用二进制，（反）序列化速度快，压缩效率高。</li><li>传输协议 采用http2，性能比http1.1好了很多</li></ul><p>和很多RPC系统一样，服务端负责实现定义好的接口并处理客户端的请求，客户端根据接口描述直接调用需要的服务。客户端和服务端可以分别使用gPRC支持的不同语言实现。</p><p>ProtoBuf 具有强大的IDL（interface description language，接口描述语言）和相关工具集（主要是protoc）。用户写好.proto描述文件后，protoc可以将其编译成众多语言的接口代码。</p><h4 id="补充：HTTP-2介绍"><a href="#补充：HTTP-2介绍" class="headerlink" title="补充：HTTP/2介绍"></a>补充：HTTP/2介绍</h4><h5 id="新特性："><a href="#新特性：" class="headerlink" title="新特性："></a>新特性：</h5><ul><li><p>新的二进制格式</p><p>HTTP1.X都是基于文本解析，而因为文本表现形式的多样性，基于文本协议的格式解析天然存在健壮性问题。而采用二进制格式后实现方便且健壮。</p></li><li><p>多路复用</p><p>多个request共享一个连接。</p></li><li><p>header压缩</p><p>在HTTP1.x中header信息很多，且每次都会重复发送，造成很大浪费。HTTP2.0使用encoder减少了传输的header大小，且通信双方都缓存一份包含了header信息的表，此后的请求可以只发送差异数据，避免信息的重复传输，进一步减少需要传输的内容大小。</p></li><li><p>服务端推送</p><p>主要的思想是：当一个客户端请求资源X，而服务器知道它很可能也需要资源Z的情况下，服务器可以在客户端发送请求前，主动将资源Z推送给客户端。这个功能帮助客户端将Z放进缓存以备将来之需。也遵守同源策略，且客户端可以拒绝推送过来的资源。</p></li></ul><h4 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h4><ul><li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F41609070" target="_blank" rel="noopener">既然有http 请求，为什么还要用rpc调用？</a></li><li><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.alloyteam.com%2F2016%2F07%2Fhttphttp2-0spdyhttps-reading-this-is-enough%2F" target="_blank" rel="noopener">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事</a></li><li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.cnblogs.com%2Fyingsmirk%2Fp%2F5248506.html" target="_blank" rel="noopener">HTTP/2协议–特性扫盲篇</a></li><li><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F34074946" target="_blank" rel="noopener">HTTP/2.0相比1.0有哪些重大改进</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;大家在面试题里看到过那么多次tcp，http， rpc等等，但是一直没有放到一起对比，今天我们一起对比看下，这几个有什么不同&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;TCP-HTTP与socket&quot;&gt;&lt;a href=&quot;#TCP-HTTP与socket&quot; class
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="http" scheme="http://lcf12307.github.io/tags/http/"/>
    
      <category term="rpc" scheme="http://lcf12307.github.io/tags/rpc/"/>
    
      <category term="thrift" scheme="http://lcf12307.github.io/tags/thrift/"/>
    
  </entry>
  
  <entry>
    <title>python一行命令创建http服务器</title>
    <link href="http://lcf12307.github.io/2020/01/20/%E9%BB%91%E7%A7%91%E6%8A%80/python%E4%B8%80%E8%A1%8C%E5%88%9B%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://lcf12307.github.io/2020/01/20/%E9%BB%91%E7%A7%91%E6%8A%80/python%E4%B8%80%E8%A1%8C%E5%88%9B%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-01-20T06:51:25.000Z</published>
    <updated>2021-06-22T15:55:01.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python 创建服务器仅需一条命令</p></blockquote><a id="more"></a><p>对于Python 2，简单搭建Web服务器，只需在需要搭建Web服务器的目录（如C:/ 或 /home/klchang/）下，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure><p>含义为使用 8080端口的创建Web服务器，可以使用浏览器 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 或 将 127.0.0.1 替换为本机的外部IP地址，进行访问。</p><p>对于Python 3，其创建Web服务器的等价命令，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python 创建服务器仅需一条命令&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="极客操作" scheme="http://lcf12307.github.io/categories/%E6%9E%81%E5%AE%A2%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="python" scheme="http://lcf12307.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个hexo博客</title>
    <link href="http://lcf12307.github.io/2020/01/20/%E9%BB%91%E7%A7%91%E6%8A%80/hexo/"/>
    <id>http://lcf12307.github.io/2020/01/20/%E9%BB%91%E7%A7%91%E6%8A%80/hexo/</id>
    <published>2020-01-20T06:51:25.000Z</published>
    <updated>2021-06-22T15:55:01.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直有一个搭建一个自己的博客的想法，刚好趁着有时间，一边整理，一边更新博客，因此就把博客搭起来了。 采用的是流行的hexo，部署在本地，当然部署也很简单，所以迁移的时候就节省了大量成本，其次就是文档，文档跟我的另外一些文档放在一起。</p></blockquote><a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装node</span></span><br><span class="line">$ brew install node</span><br><span class="line">$ node -v</span><br><span class="line">$ <span class="built_in">cd</span> code</span><br><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">$ sudo npm i hexo-cli -g</span><br><span class="line">$ hexo -v</span><br><span class="line"><span class="comment"># 初始化文件夹</span></span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 安装相关的文件</span></span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># 配置github的相关信息</span></span><br><span class="line">$ vim _config.yml</span><br><span class="line"><span class="comment"># 软链博客文件夹到本地</span></span><br><span class="line">$ ln -sv ~/博客 ~/code/blog/<span class="built_in">source</span>/_posts</span><br><span class="line"><span class="comment"># 修改定时脚本</span></span><br><span class="line">$ vim auto.sh</span><br></pre></td></tr></table></figure><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用indigo主题，文档如下</span></span><br><span class="line"><span class="comment"># https://github.com/yscoder/hexo-theme-indigo/wiki/</span></span><br><span class="line"><span class="comment"># 主题默认使用 less 作为 css 预处理工具</span></span><br><span class="line">$ npm install hexo-renderer-less --save</span><br><span class="line"><span class="comment"># 生成rss</span></span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line"><span class="comment"># 生成搜索</span></span><br><span class="line">$ npm install hexo-generator-json-content --save</span><br><span class="line"><span class="comment"># 生成微信分享二维码</span></span><br><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure><h3 id="hexo常用的命令"><a href="#hexo常用的命令" class="headerlink" title="hexo常用的命令"></a>hexo常用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建帖子</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 部署到git上</span></span><br><span class="line">$ hexo deploy </span><br><span class="line">$ hexo d</span><br><span class="line"><span class="comment"># 初始化项目框架</span></span><br><span class="line">$ hexo init &lt;项目名&gt;</span><br></pre></td></tr></table></figure><h3 id="新建post的规则"><a href="#新建post的规则" class="headerlink" title="新建post的规则"></a>新建post的规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 搭建一个hexo博客</span><br><span class="line">date: 2020-01-20 14:51:25</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- node</span><br><span class="line">- hero</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直有一个搭建一个自己的博客的想法，刚好趁着有时间，一边整理，一边更新博客，因此就把博客搭起来了。 采用的是流行的hexo，部署在本地，当然部署也很简单，所以迁移的时候就节省了大量成本，其次就是文档，文档跟我的另外一些文档放在一起。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="应用安装&amp;破解" scheme="http://lcf12307.github.io/categories/%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85-%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="hexo" scheme="http://lcf12307.github.io/tags/hexo/"/>
    
      <category term="node" scheme="http://lcf12307.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】设计模式</title>
    <link href="http://lcf12307.github.io/2019/11/14/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lcf12307.github.io/2019/11/14/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-11-13T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就设计模式的常见问题进行了讨论</p></blockquote><a id="more"></a><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><ol><li><p>单一原则 每个类尽量实现独立的功能</p></li><li><p>里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能 针对继承</p></li><li><p>依赖倒置原则 避免高层依赖底层</p></li><li><p>接口隔离原则 接口往小了拆分</p></li><li><p>迪米特法则 每个单元对其他单元了解要尽可能小</p></li><li><p>开闭原则 尽量用扩展的方法，不去修改原来逻辑</p></li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><h2 id="1-策略模式-Strategy"><a href="#1-策略模式-Strategy" class="headerlink" title="1. 策略模式( Strategy )"></a>1. 策略模式( Strategy )</h2><p>定义个策略接口，不同的实现类提供不同的具体策略算法, 同时它们之间可以互相替换.</p><blockquote><p>IStrategy 接口定义了策略方法，Strategy1 和 Strategy2 通过实现 IStrategy 提供不同的策略，而 User 组合了 IStrategy ，可以通过给 User 对象设置不同具体实现类来让其获得不同的策略</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/aa41f6375b2ddd59c91432e0a2145c25.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>策略模式.PNG</p></blockquote><h2 id="2-简单工厂模式-Simple-Factory"><a href="#2-简单工厂模式-Simple-Factory" class="headerlink" title="2. 简单工厂模式( Simple Factory )"></a>2. 简单工厂模式( Simple Factory )</h2><p>定义一个用以创建对象的工厂, 根据不同的条件生成不同的对象</p><blockquote><p>注意简单工厂模式与策略模式是不同的，工厂模式是根据给定的条件返回相应的对象，而策略模式是将不同的策略对象传递给使用者以实现不同策略,<em>（好吧，我差点分不清了）</em>详细不同点分析可转<a href="http://blog.csdn.net/fwj380891124/article/details/7552305" target="_blank" rel="noopener">这里</a></p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/01dabedb62594e22287c10c8b6061a21.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>简单工厂模式.PNG</p></blockquote><h2 id="3-工厂模式-Factory"><a href="#3-工厂模式-Factory" class="headerlink" title="3. 工厂模式( Factory )"></a>3. 工厂模式( Factory )</h2><p>针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例</p><blockquote><p>与简单工厂模式不同点是它要为每一种产品提供一个工厂类，不同工厂类实现同一个工厂接口，返回不同产品，详细分析可转<a href="http://blog.csdn.net/superbeck/article/details/4446177" target="_blank" rel="noopener">这里</a></p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/08ca128f9c8a495acf5efafce66fa23e.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>工厂模式.PNG</p></blockquote><h2 id="4-抽象工厂模式-Abstract-Factory"><a href="#4-抽象工厂模式-Abstract-Factory" class="headerlink" title="4. 抽象工厂模式( Abstract Factory )"></a>4. 抽象工厂模式( Abstract Factory )</h2><p>应对产品族概念而生</p><blockquote><p>与工厂模式相比，抽象工厂模式是为了应对产品族</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/946f97ce52089c1b3301deea2ced3aad.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>抽象工厂模式.PNG</p></blockquote><h2 id="5-装饰者模式-Decorator"><a href="#5-装饰者模式-Decorator" class="headerlink" title="5. 装饰者模式( Decorator )"></a>5. 装饰者模式( Decorator )</h2><p>动态的给一个对象添加一些额外的功能</p><blockquote><p>ComponentImpl 和 Decorator 类都实现了 IComponent 接口，不同的是 ComponentImpl 提供了具体实现，而 Decorator 是先聚合 ComponentImpl 接着在自己的实现方法即 <code>operation()</code> 方法中做些处理<em>（即装饰）</em>后再调用 ComponentImpl 对象的具体实现</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/843c9c69723d1f4a9343239efaca216a.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>装饰者模式.PNG</p></blockquote><h2 id="6-代理模式-Proxy"><a href="#6-代理模式-Proxy" class="headerlink" title="6. 代理模式( Proxy )"></a>6. 代理模式( Proxy )</h2><p>封装被代理对象并限制外界对被代理对象的访问</p><blockquote><p>注意区分装饰者模式和代理模式的区别。在代理模式中，ComponentImpl 和 Proxy 类都实现了 IComponent 接口，Proxy 对象中虽然也维护着一个 ComponentImpl 对象，但一般情况下它是代理类自己初始化的，不像装饰者模式是通过 <code>set</code> 进去的，同时在接口方法即 <code>operation()</code> 中代理对象会限制外界对被代理对象的访问，而装饰者模式是装饰者给被装饰者添加额外的行为，详细不同点分析可转<a href="http://www.cnblogs.com/jaredlam/archive/2011/11/08/2241089.html" target="_blank" rel="noopener">这里</a></p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/4fcd2e4ee7cfed2d079fb4b95ed27dab.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>代理模式.PNG</p></blockquote><h2 id="7-模板方法模式-Template"><a href="#7-模板方法模式-Template" class="headerlink" title="7. 模板方法模式( Template )"></a>7. 模板方法模式( Template )</h2><p>定义一个操作的算法骨架, 并将一些步骤延迟到子类中</p><blockquote><p>AbsTemplate 抽象类中定义了一系列的方法，其中外界唯一能调用的 <code>operation()</code> 方法是 final 的<em>（即不可重写）</em>，在该方法中分别调用了 <code>first()</code> 、<code>second()</code> 、<code>third()</code> 方法<em>（即搭好算法框架）</em>，子类通过继承抽象类重写不同的方法来添加各自的行为</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/704e0cbaff34c187fec9afb55b0e60f9.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>模板方法模式.PNG</p></blockquote><h2 id="8-外观模式-Facade"><a href="#8-外观模式-Facade" class="headerlink" title="8. 外观模式( Facade )"></a>8. 外观模式( Facade )</h2><p>为系统向外界提供一个统一的接口</p><blockquote><p>Fracade 为 ComponentA 、ComponentB 、ComponentC 向外即 ClientA 、ClientB 提供统一的接口</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/33ca2f6aa4335c6fea29ce104dc6d75c.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>外观模式.PNG</p></blockquote><h2 id="9-适配器模式-Adapter"><a href="#9-适配器模式-Adapter" class="headerlink" title="9. 适配器模式( Adapter )"></a>9. 适配器模式( Adapter )</h2><p>将一个类的接口转换成客户希望的另一个接口</p><blockquote><p>比如项目引入第三方类库后应该先封装起来转换成自己需要的接口再使用，防止以后类库出现变更。AdapterA 先将 LibraryClass 封装起来，其对外提供的 <code>operation()</code> 方法中调用 LibraryClass 对象的方法，若以后换类库，只需改 AdapterA 类或者创建新的 Adapter 实现类即可</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/1db7eb2746546ba047d0628898b3d2ce.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>适配器模式.PNG</p></blockquote><h2 id="10-桥接模式-Bridge"><a href="#10-桥接模式-Bridge" class="headerlink" title="10. 桥接模式( Bridge )"></a>10. 桥接模式( Bridge )</h2><p>将抽象部分与实现部分分离，使它们都可以独立的变化</p><blockquote><p>将原本要耦合的上下层抽象出来，上层和下层以组合的方式连接，然后上下层抽象可派生出许多不同方向的子类。AbsShape 封装了 IDrawProgram 接口，这样它的子类想从 DPA 切换到 DPB 或者别的，只需 <code>set</code> 进去就行啦<em>（你看，这 UML 图多像座桥）</em></p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/0d76883319ee8cd0839e2d6f2c3f916d.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>桥接模式.PNG</p><p>注： <a href="http://blog.itpub.net/7243794/viewspace-837018/" target="_blank" rel="noopener">适配器、桥接与外观三模式之间关系</a></p></blockquote><h2 id="11-建造者模式-Builder"><a href="#11-建造者模式-Builder" class="headerlink" title="11. 建造者模式( Builder )"></a>11. 建造者模式( Builder )</h2><p>将一个复杂对象的构建与它的表示分离.</p><blockquote><p>作为 Product 的内部类，Builder 统一了 Product 的整个构建过程，同时在 <code>build</code> 过程中，可以由于 <code>set</code> 值顺序不同等原因产生不同的效果</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/cf070a5fb8111b1314aced631631197c.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>建造者模式.PNG</p></blockquote><h2 id="12-观察者模式-Observer"><a href="#12-观察者模式-Observer" class="headerlink" title="12. 观察者模式( Observer )"></a>12. 观察者模式( Observer )</h2><p>定义了一种一对多的依赖关系,让多个观察者对象同时监听某一主题对象,在它的状态发生变化时,会通知所有的观察者.</p><blockquote><p>先将 Observer 注册到 Observable ，那么当 Observable 状态改变时会通知它持有的所有 Observer ,对了，最好 Observable 中的 mList 的泛型是 <code>WeakReference</code> ,防止内存泄漏</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/b1fe5f63e817d328c1f7e750cd5d93b4.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>观察者模式.PNG</p></blockquote><h2 id="13-单例模式-Singleton"><a href="#13-单例模式-Singleton" class="headerlink" title="13. 单例模式( Singleton )"></a>13. 单例模式( Singleton )</h2><p>保证一个类仅有一个实例,并提供一个访问它的全局控制点.</p><blockquote><p>下图是利用 Java 的语言特性实现的线程安全且能延迟初始化的单例模式，Singleton 中维护着静态私有的 SingleHolder 类， SingleHolder 类中持有个静态常量 sHolder ，Client 若通过 getSingleInstance 方法获取 Singleton 对象则直接返回 SingleHolder 类的 sHolder ，详细分析可转<a href="http://www.race604.com/java-double-checked-singleton/" target="_blank" rel="noopener">这里</a></p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/e30d9327210aceecf9bf5cb04269bf85.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>单例模式.PNG</p></blockquote><h2 id="14-命令模式-Command"><a href="#14-命令模式-Command" class="headerlink" title="14. 命令模式( Command )"></a>14. 命令模式( Command )</h2><p>将一个请求封装成为一个对象, 使可以用不同的请求对客户进行参数化</p><blockquote><p>Action 封装了具体行为，Command 封装了 Action 并提供空方法 <code>execute()</code> ，它的子类通过重写该方法可在方法里调用 mAction 不同行为达到封装命令的目的，最后 Client 封装了一系列的 Command 对象，并可以通过 <code>notify()</code> 方法一个接着一个调用所持有 Command 对象们的 <code>execute()</code> 方法达到给 Action 传达命令的目的</p><p><img src="https://user-gold-cdn.xitu.io/2016/11/29/98452fb637f4ad49b822cd6dcf01e364.jpg?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>命令模式.PNG</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就设计模式的常见问题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="设计模式" scheme="http://lcf12307.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】操作系统</title>
    <link href="http://lcf12307.github.io/2019/11/13/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://lcf12307.github.io/2019/11/13/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2019-11-12T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就操作系统的常见面试题进行了讨论</p></blockquote><a id="more"></a><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>同步机制需要遵循的原则：</p><ol><li><p>空闲让进：当没有进程处于临界区的时候，应该许可其他进程进入临界区的申请</p></li><li><p>忙则等待：当前如果有进程处于临界区，如果有其他进程申请进入，则必须等待，保证对临界区的互斥访问</p></li><li><p>有限等待：对要求访问临界资源的进程，需要在有限时间内进入临界区，防止出现死等</p></li><li><p>让权等待：当进程无法进入临界区的时候，需要释放处理机，边陷入忙等</p></li></ol><h3 id="死锁是指多个进程在运行过程中，因为争夺资源而造成的一种僵局，如果没有外力推进，处于僵局中的进程就无法继续执行。"><a href="#死锁是指多个进程在运行过程中，因为争夺资源而造成的一种僵局，如果没有外力推进，处于僵局中的进程就无法继续执行。" class="headerlink" title="死锁是指多个进程在运行过程中，因为争夺资源而造成的一种僵局，如果没有外力推进，处于僵局中的进程就无法继续执行。"></a>死锁是指多个进程在运行过程中，因为争夺资源而造成的一种僵局，如果没有外力推进，处于僵局中的进程就无法继续执行。</h3><p>死锁原因：</p><ol><li>竞争资源：请求同一有限资源的进程数多于可用资源数</li><li>进程推进顺序非法：进程执行中，请求和释放资源顺序不合理，如资源等待链</li></ol><p>死锁产生的必要条件：</p><ol><li>互斥条件:进程对所分配的资源进行排他性的使用</li><li>请求和保持条件：进程被阻塞的时候并不释放锁申请到的资源</li><li>不可剥夺条件：进程对于已经申请到的资源在使用完成之前不可以被剥夺</li><li>环路等待条件：发生死锁的时候存在的一个 进程-资源 环形等待链</li></ol><p>死锁处理：</p><ol><li><p>预防死锁：破坏产生死锁的4个必要条件中的一个或者多个；实现起来比较简单，但是如果限制过于严格会降低系统资源利用率以及吞吐量</p></li><li><p>避免死锁：在资源的动态分配中，防止系统进入不安全状态(可能产生死锁的状态)-如银行家算法</p></li><li><p>检测死锁：允许系统运行过程中产生死锁，在死锁发生之后，采用一定的算法进行检测，并确定与死锁相关的资源和进程，采取相关方法清除检测到的死锁。实现难度大</p></li><li><p>解除死锁：与死锁检测配合，将系统从死锁中解脱出来（撤销进程或者剥夺资源）。对检测到的和死锁相关的进程以及资源，通过撤销或者挂起的方式，释放一些资源并将其分配给处于阻塞状态的进程，使其转变为就绪态。实现难度大</p></li></ol><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><p>先来先服务调度算法FCFS：既可以作为作业调度算法也可以作为进程调度算法；按作业或者进程到达的先后顺序依次调度；因此对于长作业比较有利；</p><p>短作业优先调度算法SJF：作业调度算法，算法从就绪队列中选择估计时间最短的作业进行处理，直到得出结果或者无法继续执行；缺点：不利于长作业；未考虑作业的重要性；运行时间是预估的，并不靠谱 ；</p><p>高相应比算法HRN：响应比=(等待时间+要求服务时间)/要求服务时间；</p><p>时间片轮转调度RR：按到达的先后对进程放入队列中，然后给队首进程分配CPU时间片，时间片用完之后计时器发出中断，暂停当前进程并将其放到队列尾部，循环 ;</p><p>多级反馈队列调度算法：目前公认较好的调度算法；设置多个就绪队列并为每个队列设置不同的优先级，第一个队列优先级最高，其余依次递减。优先级越高的队列分配的时间片越短，进程到达之后按FCFS放入第一个队列，如果调度执行后没有完成，那么放到第二个队列尾部等待调度，如果第二次调度仍然没有完成，放入第三队列尾部…。只有当前一个队列为空的时候才会去调度下一个队列的进程。</p><h3 id="分段分页"><a href="#分段分页" class="headerlink" title="分段分页"></a>分段分页</h3><p>页是信息的物理单位，是出于系统内存利用率的角度提出的离散分配机制；段是信息的逻辑单位，每个段含有一组意义完整的信息，是出于用户角度提出的内存管理机制</p><p>页的大小是固定的，由系统决定；段的大小是不确定的，由用户决定</p><p>分页是为了提高内存利用率，而分段是为了满足程序员在编写代码的时候的一些逻辑需求(比如数据共享，数据保护，动态链接等)。</p><p>为了减少两次访问内存导致的效率影响，分页管理中引入了快表机制，包含快表机制的内存管理中，当要访问内存数据的时候，首先将页号在快表中查询，如果查找到说明要访问的页表项在快表中，那么直接从快表中读取相应的物理块号；如果没有找到，那么访问内存中的页表，从页表中得到物理地址，同时将页表中的该映射表项添加到快表中(可能存在快表换出算法)。</p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>最佳置换算法：只具有理论意义的算法，用来评价其他页面置换算法。置换策略是将当前页面中在未来最长时间内不会被访问的页置换出去。</p><p>先进先出置换算法：简单粗暴的一种置换算法，没有考虑页面访问频率信息。每次淘汰最早调入的页面。</p><p>最近最久未使用算法LRU：算法赋予每个页面一个访问字段，用来记录上次页面被访问到现在所经历的时间t，每次置换的时候把t值最大的页面置换出去(实现方面可以采用寄存器或者栈的方式实现)。</p><p>时钟算法clock(也被称为是最近未使用算法NRU)：页面设置一个访问位，并将页面链接为一个环形队列，页面被访问的时候访问位设置为1。页面置换的时候，如果当前指针所指页面访问为为0，那么置换，否则将其置为0，循环直到遇到一个访问为位0的页面。</p><p>改进型Clock算法：在Clock算法的基础上添加一个修改位，替换时根究访问位和修改位综合判断。优先替换访问位和修改位都是0的页面，其次是访问位为0修改位为1的页面。</p><p>最少使用算法LFU：设置寄存器记录页面被访问次数，每次置换的时候置换当前访问次数最少的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就操作系统的常见面试题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】系统设计题</title>
    <link href="http://lcf12307.github.io/2019/11/13/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%A2%98/"/>
    <id>http://lcf12307.github.io/2019/11/13/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%A2%98/</id>
    <published>2019-11-12T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计一个红包雨游戏"><a href="#设计一个红包雨游戏" class="headerlink" title="设计一个红包雨游戏"></a>设计一个红包雨游戏</h3><h3 id="设计一个唯一id生成器"><a href="#设计一个唯一id生成器" class="headerlink" title="设计一个唯一id生成器"></a>设计一个唯一id生成器</h3><h3 id="设计一个支付系统"><a href="#设计一个支付系统" class="headerlink" title="设计一个支付系统"></a>设计一个支付系统</h3><h3 id="设计一个微博系统"><a href="#设计一个微博系统" class="headerlink" title="设计一个微博系统"></a>设计一个微博系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设计一个微博系统，用户之间可以互相关注，</span><br><span class="line">如果 A关注了B，B关注了C</span><br><span class="line">那么 A间接关注了C且 A与C之间的度为1</span><br><span class="line">然后系统有一个功能 输入俩用户 输出他俩之间的 度</span><br></pre></td></tr></table></figure><h3 id="设计一个12306抢购系统"><a href="#设计一个12306抢购系统" class="headerlink" title="设计一个12306抢购系统"></a>设计一个12306抢购系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">买票</span><br><span class="line">退票</span><br><span class="line">同时抢不同区间的票</span><br><span class="line">压测</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">验证码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计一个红包雨游戏&quot;&gt;&lt;a href=&quot;#设计一个红包雨游戏&quot; class=&quot;headerlink&quot; title=&quot;设计一个红包雨游戏&quot;&gt;&lt;/a&gt;设计一个红包雨游戏&lt;/h3&gt;&lt;h3 id=&quot;设计一个唯一id生成器&quot;&gt;&lt;a href=&quot;#设计一个唯一id生成器&quot; c
      
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】linux命令</title>
    <link href="http://lcf12307.github.io/2019/11/12/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/linux/"/>
    <id>http://lcf12307.github.io/2019/11/12/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/linux/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就linux命令的常见问题进行了讨论</p></blockquote><a id="more"></a><ol><li>任务计划格式中，前面5个数字分表表示什么含义？</li></ol><p>答：依次表示：分、时、日、月、周</p><ol start="2"><li><p>Linux 查看端口占用情况可以使用 lsof 和 netstat 命令</p></li><li><p>zcat命令用于不真正解压缩文件，就能显示压缩包中文件的内容的场合。</p></li><li><p>释放某端口</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tln &amp;&amp; lsof -i :9001 &amp;&amp; <span class="built_in">kill</span> -9 9001 &amp;&amp; netstat -tln</span><br></pre></td></tr></table></figure><ol start="5"><li>删除大于30m的命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find ./ -size +50M -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">&#123;&#125;是一个特殊的字符串，对于每一个匹配的文件，&#123;&#125;会被替换成相应的文件名；</span><br></pre></td></tr></table></figure><ol start="6"><li>从尾部看日志</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f</span><br></pre></td></tr></table></figure><ol start="7"><li>链接远程服务器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh</span><br></pre></td></tr></table></figure><ol start="8"><li>crontab</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure><p>如果不输file的话， 则接受标准输入</p><ol start="9"><li>远程拷贝</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [参数] [原路径] [目标路径]</span><br></pre></td></tr></table></figure><ol start="10"><li>万物皆文件</li></ol><p>lsof打开的文件可以是：</p><ol><li><p>普通文件</p></li><li><p>目录</p></li><li><p>网络文件系统的文件</p></li><li><p>字符或设备文件</p></li><li><p>(函数)共享库</p></li><li><p>管道，命名管道</p></li><li><p>符号链接</p></li><li><p>网络文件（例如：NFS file、网络socket，unix域名socket）</p></li><li><p>还有其它类型的文件，等等</p></li></ol><ol start="11"><li>设置命令别名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> lsl=<span class="string">'ls -lrt'</span></span><br></pre></td></tr></table></figure><ol start="12"><li>软链和硬链</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln cc ccAgain :硬连接；删除一个，将仍能找到；</span><br><span class="line">ln -s cc ccTo :符号链接(软链接)；删除源，另一个无法使用；（后面一个ccTo 为新建的文件）</span><br></pre></td></tr></table></figure><ol start="13"><li>管道</li></ol><ul><li>批处理命令连接执行，使用 |</li><li>串联: 使用分号 ;</li><li>前面成功，则执行后面一条，否则，不执行:&amp;&amp;</li><li>前面失败，则后一条执行: ||</li></ul><ol start="14"><li>环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动帐号后自动执行的是 文件为 .profile，然后通过这个文件可设置自己的环境变量；</span><br></pre></td></tr></table></figure><ol start="15"><li>文本处理</li></ol><ul><li>find 文件查找<ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#id3" target="_blank" rel="noopener">定制搜索</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#id4" target="_blank" rel="noopener">找到后的后续动作</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#print" target="_blank" rel="noopener">-print的定界符</a></li></ul></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#grep" target="_blank" rel="noopener">grep 文本搜索</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#xargs" target="_blank" rel="noopener">xargs 命令行参数转换</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#sort" target="_blank" rel="noopener">sort 排序</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#uniq" target="_blank" rel="noopener">uniq 消除重复行</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#tr" target="_blank" rel="noopener">用tr进行转换</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#cut" target="_blank" rel="noopener">cut 按列切分文本</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#paste" target="_blank" rel="noopener">paste 按列拼接文本</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#wc" target="_blank" rel="noopener">wc 统计行和字符的工具</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#sed" target="_blank" rel="noopener">sed 文本替换利器</a></li><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/03_text_processing.html#awk" target="_blank" rel="noopener">awk 数据流处理工具</a></li></ul><ol start="16"><li>磁盘管理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看磁盘空间 df -h</span><br><span class="line"></span><br><span class="line">查看目录大小 du -sh</span><br><span class="line"></span><br><span class="line">打包 tar -cvf</span><br><span class="line"></span><br><span class="line">解包 tar -xvf</span><br><span class="line"></span><br><span class="line">压缩 gzip</span><br><span class="line"></span><br><span class="line">解压缩 gunzip bzip</span><br></pre></td></tr></table></figure><ol start="17"><li>修改权限</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod</span><br><span class="line"></span><br><span class="line">chrow</span><br></pre></td></tr></table></figure><ol start="18"><li>统计qps</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就linux命令的常见问题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】数据库</title>
    <link href="http://lcf12307.github.io/2019/11/08/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://lcf12307.github.io/2019/11/08/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-11-08T08:14:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就数据库的常见问题进行了讨论</p></blockquote><a id="more"></a><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acid 原子性，一致性 隔离性 持久性</span><br><span class="line">事务隔离分为： </span><br><span class="line">读取未提交数据 读取其他事务提交数据</span><br><span class="line">可重读 串行化</span><br></pre></td></tr></table></figure><h3 id="myisam和innodb的区别"><a href="#myisam和innodb的区别" class="headerlink" title="myisam和innodb的区别"></a>myisam和innodb的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">采用MyISAM引擎</span><br><span class="line">- R&#x2F;W &gt; 100:1 且update相对较少</span><br><span class="line">- 并发不高</span><br><span class="line">- 表数据量小</span><br><span class="line">- 硬件资源有限</span><br><span class="line">- 不支持外键</span><br><span class="line">- 不支持事务</span><br><span class="line">- 执行selecte较多的时候优先使用</span><br><span class="line">- 表锁</span><br><span class="line">- 不会死锁</span><br><span class="line"></span><br><span class="line">采用InnoDB引擎</span><br><span class="line">- R&#x2F;W比较小，频繁更新大字段</span><br><span class="line">- 表数据量超过1000万，并发高</span><br><span class="line">- 安全性和可用性要求高</span><br><span class="line">- 支持外键</span><br><span class="line">- 执行update inser较多的时候优先使用</span><br><span class="line">- delete的时候 innodb会一行一行的删除</span><br><span class="line">- 行锁</span><br></pre></td></tr></table></figure><h3 id="mysql-性能调优"><a href="#mysql-性能调优" class="headerlink" title="mysql 性能调优"></a>mysql 性能调优</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">开启查询缓存</span><br><span class="line">explain下自己的sql语句并分析</span><br><span class="line">只用一行数据的话 limit 1</span><br><span class="line">为搜索字段建索引</span><br><span class="line">千万不要order by rand()</span><br><span class="line">避免selecte *</span><br><span class="line">不要设置null</span><br><span class="line">尽量少的多表查询</span><br><span class="line">拆分大的delete和insert语句， 因为这个操作会锁表，最好不要占用太久</span><br><span class="line">选择合适的存储引擎</span><br><span class="line">冗余数据</span><br><span class="line">使用尽可能小的合适的数据类型</span><br><span class="line">读写分离</span><br><span class="line">拆分表 垂直拆分和水平拆分</span><br><span class="line">在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。</span><br><span class="line"></span><br><span class="line">分析过程：</span><br><span class="line">是否有周期性的崩溃-》 增加缓存</span><br><span class="line">开启profiling查询慢日志和explain来分析</span><br><span class="line">等待时间长-》对服务器调优</span><br><span class="line">执行时间长-》对语句调优</span><br><span class="line">还不行-&gt; 增加硬件</span><br></pre></td></tr></table></figure><h3 id="索引的实现"><a href="#索引的实现" class="headerlink" title="索引的实现"></a>索引的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">索引（Index）是帮助MySQL高效获取数据的数据结构</span><br><span class="line">mysql的索引是b+树</span><br><span class="line">InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的</span><br></pre></td></tr></table></figure><h3 id="mysql表示时间"><a href="#mysql表示时间" class="headerlink" title="mysql表示时间"></a>mysql表示时间</h3><p>数据库中可以用datetime、bigint、timestamp来表示时间</p><h3 id="索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？"><a href="#索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？" class="headerlink" title="索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？"></a>索引可以加快查询速度，那么是不是只要是查询语句需要，就建上索引？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答案是否定的。因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引。</span><br><span class="line"></span><br><span class="line">第一种情况是表记录比较少 另一种不建议建索引的情况是索引的选择性较低。</span><br></pre></td></tr></table></figure><h3 id="什么是脏读，不可重复读，幻读-https-juejin-im-entry-5b835dfbf265da43531d0593"><a href="#什么是脏读，不可重复读，幻读-https-juejin-im-entry-5b835dfbf265da43531d0593" class="headerlink" title="什么是脏读，不可重复读，幻读](https://juejin.im/entry/5b835dfbf265da43531d0593)"></a>什么是脏读，不可重复读，幻读](<a href="https://juejin.im/entry/5b835dfbf265da43531d0593" target="_blank" rel="noopener">https://juejin.im/entry/5b835dfbf265da43531d0593</a>)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脏读 一个事务中访问到了另外一个事务未提交的数据</span><br><span class="line">不可重复读 一个事务读取同一条记录2次，得到的结果不一致</span><br><span class="line">幻读 一个事务读取2次，得到的记录条数不一致</span><br></pre></td></tr></table></figure><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>使用数据版本来实现。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">共享锁</span><br><span class="line">排它锁</span><br></pre></td></tr></table></figure><h3 id="产生死锁的原因"><a href="#产生死锁的原因" class="headerlink" title="产生死锁的原因"></a>产生死锁的原因</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1） 因为系统资源不足。</span><br><span class="line">（2） 进程运行推进的顺序不合适。</span><br><span class="line">（3） 资源分配不当等。</span><br></pre></td></tr></table></figure><h3 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1） 互斥条件：一个资源每次只能被一个进程使用。</span><br><span class="line">（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</span><br><span class="line">（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。</span><br><span class="line">（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）死锁预防：通过确保死锁的一个必要条件不会满足，保证不会发生死锁</span><br><span class="line">（2）死锁检测：允许死锁的发生，但是可以通过系统设置的检测结构及时的检测出死锁的发生，采取一些措施，将死锁清除掉</span><br><span class="line">（3）死锁避免：在资源分配过程中，使用某种方法避免系统进入不安全的状态，从而避免发生死锁</span><br><span class="line">（4）死锁解除：与死锁检测相配套的一种措施。当检测到系统中已发生死锁，需将进程从死锁状态中解脱出来。</span><br></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### mvcc</span><br><span class="line">http:&#x2F;&#x2F;blog.codinglabs.org&#x2F;articles&#x2F;theory-of-mysql-index.html</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;86a1fd2d7406</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就数据库的常见问题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="数据库" scheme="http://lcf12307.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MYSQL" scheme="http://lcf12307.github.io/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】网络</title>
    <link href="http://lcf12307.github.io/2019/11/06/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%BD%91%E7%BB%9C/"/>
    <id>http://lcf12307.github.io/2019/11/06/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%BD%91%E7%BB%9C/</id>
    <published>2019-11-05T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就网络的常见问题进行了讨论</p></blockquote><a id="more"></a><ol><li>http的特性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">无连接无状态。建立在tcp&#x2F;ip协议上 的应用层上。</span><br><span class="line"></span><br><span class="line">http请求包含三个部分：状态头，请求头，消息主体。</span><br><span class="line"></span><br><span class="line">http的基本方法包含 get post put delete</span><br><span class="line"></span><br><span class="line">响应报文包含三个状态：状态行，响应头，响应正文。</span><br><span class="line"></span><br><span class="line">缺点是明文传输</span><br></pre></td></tr></table></figure><ol start="2"><li>什么是会话</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</span><br><span class="line"></span><br><span class="line">会话跟踪指的是对同一个用户对服务器的连续的请求和接受响应的监视。</span><br><span class="line"></span><br><span class="line">会话跟踪常用的方法：</span><br><span class="line"></span><br><span class="line">   i. url携带参数</span><br><span class="line"></span><br><span class="line">  ii. 隐藏表单域</span><br><span class="line"></span><br><span class="line">  iii. cookie</span><br><span class="line"></span><br><span class="line">  iv. session</span><br><span class="line"></span><br><span class="line">cookie是可以被客户端禁用的，session的实现依赖cookie，如果cookie被禁用，session就会失效。</span><br></pre></td></tr></table></figure><ol start="3"><li>跨站攻击</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">csrf 伪造用户请求， 可以通过检查reffer，token，验证码等方式避免</span><br><span class="line"></span><br><span class="line">xss 通过正常的交互将脚本嵌入页面，用户访问的时候即可启用。</span><br></pre></td></tr></table></figure><ol start="4"><li>https</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https又称HTTP over SSL 在http协议上增加了ssl https安全的基础是ssl </span><br><span class="line"></span><br><span class="line">- 对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全</span><br><span class="line">- 对网站服务器进行真实身份认证</span><br><span class="line"></span><br><span class="line">在交换密钥环节使用非对称加密方式解密证书（安全性高），之后的建立通信交换报文阶段则使用对称加密方式（解密效率高）。 </span><br><span class="line"></span><br><span class="line">缺点是 消耗资源较大和节省证书开销</span><br></pre></td></tr></table></figure><ol start="5"><li>spdy</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">多路复用：HTTP 1.x 在一条 TCP 连接上，多个请求只能串行执行。而 SPDY 使多个请求 stream 共享一个 TCP 连接的方式，做到了同时响应多个请求，解决了队头阻塞的问题。</span><br><span class="line"></span><br><span class="line">请求优先级</span><br><span class="line">header压缩</span><br><span class="line">服务端推送</span><br><span class="line">强制使用https</span><br></pre></td></tr></table></figure><ol start="6"><li>http2.0</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">多路复用</span><br><span class="line"></span><br><span class="line">压缩header</span><br><span class="line"></span><br><span class="line">服务端推送</span><br><span class="line"></span><br><span class="line">与spdy的区别：</span><br><span class="line"></span><br><span class="line">新的二进制格式</span><br><span class="line"></span><br><span class="line">支持明文传输</span><br><span class="line"></span><br><span class="line">header压缩方式不一样</span><br><span class="line"></span><br><span class="line">不强制使用https</span><br></pre></td></tr></table></figure><ol start="7"><li>osi七层模型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">物理层-&gt;数据链路层-&gt;网络层-&gt;传输层-&gt;会话层-&gt;表示层-&gt;应用层</span><br></pre></td></tr></table></figure><ol start="8"><li>tcp/ip协议五层模型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">物理层-&gt;数据链路层-&gt;网络层-&gt;传输层-&gt;应用层</span><br></pre></td></tr></table></figure><ol start="9"><li>建立连接需要三次握手 四次挥手</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么不用两次，如果网络不好，报文因为时间太久已失效。如果不三次握手，那么服务端同意连接，那么连接就会被连接起来，但是客户端一直不发送消息过来，服务端资源就会被占用了。</span><br></pre></td></tr></table></figure><ol start="10"><li>tcp和udp的区别</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保 证可靠交付</span><br><span class="line"><span class="bullet">- </span>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</span><br><span class="line"><span class="bullet">- </span>TCP首部开销20字节;UDP的首部开销小，只有8个字节</span><br><span class="line"><span class="bullet">- </span>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</span><br></pre></td></tr></table></figure><ol start="11"><li>什么叫syn攻击</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。  SYN 攻击是一种典型的 DoS&#x2F;DDoS 攻击。</span><br></pre></td></tr></table></figure><ol start="12"><li>tcp</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>TCP 提供一种面向连接的、可靠的<span class="strong">**字节流服务**</span></span><br><span class="line"><span class="bullet">- </span>在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP</span><br><span class="line"><span class="bullet">- </span>TCP 使用校验和，确认和重传机制来保证可靠传输</span><br><span class="line"><span class="bullet">- </span>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</span><br><span class="line"><span class="bullet">- </span>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</span><br><span class="line"></span><br><span class="line">keep-alive 是服务端每隔一段时间对客户端发一个检测包，如果收到ACK，则认为该链接还存活。类似soaagent的健康检查。由此引出小米网俄罗斯的问题。</span><br></pre></td></tr></table></figure><ol start="13"><li>udp</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>udp不具有可靠性的数据报协议</span><br><span class="line"><span class="bullet">- </span>udp是无连接的</span><br><span class="line"><span class="bullet">- </span>udp的数据包是有边界的，且大小会随着数据包传过去的</span><br><span class="line"><span class="bullet">- </span>可以多播或者广播</span><br></pre></td></tr></table></figure><ol start="14"><li>keepalive和websocket</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> keep-alive 只是一种为了达到复用tcp连接的“协商”行为，双方并没有建立正真的连接会话，服务端也可以不认可，也可以随时（在任何一次请求完成后）关闭掉。WebSocket 不同，它本身就规定了是正真的、双工的长连接，两边都必须要维持住连接的状态。</span><br><span class="line"></span><br><span class="line">keep-alive 一次 TCP 连接中完成多个 HTTP 请求，但是对每个请求仍然要单独发 header</span><br><span class="line"></span><br><span class="line">websocket 通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了，使得这个长连接变成了一个真.长连接</span><br></pre></td></tr></table></figure><ol start="15"><li>tcp拥塞控制</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">慢开始 拥塞避免</span><br><span class="line"></span><br><span class="line">快重传 快恢复</span><br></pre></td></tr></table></figure><ol start="16"><li>路由控制</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">路由控制(Routing)是指将分组数据发送到目标地址的功能，这个功能一般由路由器完成</span><br><span class="line"></span><br><span class="line">如果路由形成一个环路。</span><br></pre></td></tr></table></figure><ol start="17"><li><p>子网掩码</p></li><li><p>rpc.grpc</p></li></ol><table><thead><tr><th align="left">名词</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">RPC</td><td align="left">远程过程调用（分布式、微服务间的方法调用）</td></tr><tr><td align="left">HTTP</td><td align="left">无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）</td></tr><tr><td align="left">TCP</td><td align="left">面向连接，三次握手保证通信可靠</td></tr><tr><td align="left">UDP</td><td align="left">非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）</td></tr><tr><td align="left">socket</td><td align="left">TCP协议的接口实现，面向传输层进行网络编程</td></tr></tbody></table><hr><h4 id="单独来谈一谈gRPC"><a href="#单独来谈一谈gRPC" class="headerlink" title="单独来谈一谈gRPC"></a>单独来谈一谈gRPC</h4><p>gRPC是谷歌开源的一个 RPC 框架，面向移动和 HTTP/2 设计。</p><ul><li>内容交换格式采用ProtoBuf(Google Protocol Buffers)，开源已久，提供了一种灵活、高效、自动序列化结构数据的机制，作用与XML，Json类似，但使用二进制，（反）序列化速度快，压缩效率高。</li><li>传输协议 采用http2，性能比http1.1好了很多</li></ul><p><a href="https://thrift.apache.org/" target="_blank" rel="noopener">thrift</a>是Apache的一个跨语言的高性能的服务框架 这是一种描述语言，也是一个中间语言，IDL 一个使命就是规范和约束，规范使用类型，提供跨语言特性。通过工具分析 IDL 文件，生成各种语言代码</p><p>事实上的跨语言序列化方案只有三个： protobuf, thrift, json。</p><ul><li>json体积太大，并且缺少类型信息，实际上只用在RESTful接口上，并没有看到RPC框架会默认选json做序列化的。</li></ul><p>国内一些大公司的使用情况：</p><ul><li>protobuf ，腾迅，百度等</li><li>thrift，小米，美团等</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就网络的常见问题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="http" scheme="http://lcf12307.github.io/tags/http/"/>
    
      <category term="网络" scheme="http://lcf12307.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>【第一课】缓存</title>
    <link href="http://lcf12307.github.io/2019/11/05/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%BC%93%E5%AD%98/"/>
    <id>http://lcf12307.github.io/2019/11/05/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%BC%93%E5%AD%98/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要就redis的常见面试问题进行了讨论</p></blockquote><a id="more"></a><h2 id="为什么用redis？"><a href="#为什么用redis？" class="headerlink" title="为什么用redis？"></a>为什么用redis？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为传统的关系型数据库如Mysql已经不能适用所有的场景了，比如秒杀的库存扣减，APP首页的访问流量高峰等等，都很容易把数据库打崩，所以引入了缓存中间件，目前市面上比较常用的缓存中间件有 **Redis** 和 **Memcached** 不过中和考虑了他们的优缺点，最后选择了Redis。</span><br></pre></td></tr></table></figure><h2 id="redis和memecache的区别"><a href="#redis和memecache的区别" class="headerlink" title="redis和memecache的区别"></a>redis和memecache的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">存储方式 Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis有部份存在硬盘上，这样能保证数据的持久性。</span><br><span class="line">数据支持类型 Memcache对数据类型支持相对简单。Redis有复杂的数据类型。redis的数据类型更多string,set,zset, list, hash, ， memcache只支持简单字符串</span><br><span class="line">使用底层模型不同 它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</span><br><span class="line">value大小 redis最大可以达到1GB，而memcache只有1MB</span><br><span class="line">redis支持数据备份 即主从备份</span><br><span class="line">redis支持数据的持久化 可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</span><br></pre></td></tr></table></figure><h2 id="为什么要用缓存？"><a href="#为什么要用缓存？" class="headerlink" title="为什么要用缓存？"></a>为什么要用缓存？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于一个服务其性能瓶颈往往都在DB，传统关系型存储尤甚。我们在创建表的时候，并不会未所有的字段创建索引，这意味着如果我们需要读取非缓存数据就要从磁盘拿数据。这个过程至少需要十几毫秒的时间。而缓存往往是基于内存的，这要比DB读数据快两个数量级。这是我们用缓存的根本原因原因。</span><br></pre></td></tr></table></figure><h2 id="缓存这么好，为什么不都用缓存"><a href="#缓存这么好，为什么不都用缓存" class="headerlink" title="缓存这么好，为什么不都用缓存"></a>缓存这么好，为什么不都用缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内存这东西虽然很快，同时它还很贵。动辄百十来G的数据都扔内存这有点太浪费。依据二八定律，我们只需找到那最紧俏的百分之二十就行了。这是非常重要的。否则你加了缓存效果反而更差。对于缓存有一个衡量指标，叫做缓存命中率。这个指标高说明我们请求的数据大部分来自缓存。证明我们加缓存这件事的收益越高。</span><br></pre></td></tr></table></figure><h2 id="缓存适用的场景"><a href="#缓存适用的场景" class="headerlink" title="缓存适用的场景"></a>缓存适用的场景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">会话缓存 如存储用户购物车中的数据的时候，利用redis持久化的特点，使其不会丢失数据。</span><br><span class="line">全页缓存 缓存页内数据</span><br><span class="line">队列 利用redis的list数据结构的push&#x2F;pop操作， 对数据进行操作</span><br><span class="line">排行榜 利用zset数据结构进行rank排行操作</span><br><span class="line">计数器 使用set来统计集合内的数据量</span><br><span class="line">订阅发布 利用订阅发布功能功能甚至可以搭建聊天室</span><br></pre></td></tr></table></figure><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">缓存穿透指的是如果我们访问一个缓存中没有的数据的时候就会去查询数据库， 如果数据库里也没有的话，一般是不更新缓存的， 这时候如果用户一直刷就会造成缓存穿透</span><br><span class="line">缓存空对象 或者缓存预测</span><br></pre></td></tr></table></figure><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多个用户同时访问一个热点缓存，在这个key失效的瞬间 就会造成多次访问数据库， 造成缓存击穿。</span><br><span class="line">缓存预热 缓存加锁</span><br></pre></td></tr></table></figure><h2 id="缓存防雪崩"><a href="#缓存防雪崩" class="headerlink" title="缓存防雪崩"></a>缓存防雪崩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">缓存服务暂时崩溃，导致大量请求访问数据库。</span><br><span class="line">采用高可用的缓存方案 限流</span><br></pre></td></tr></table></figure><h2 id="redis的新增数据结构"><a href="#redis的新增数据结构" class="headerlink" title="redis的新增数据结构"></a>redis的新增数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geo 地理索引 基于zset</span><br><span class="line">HyperLogLog 寻找集合中的基数，即去重后的数据</span><br><span class="line">pub&#x2F;sub 发布订阅，如上文</span><br></pre></td></tr></table></figure><h2 id="如果有大量的key需要设置同一时间过期，一般需要注意什么？"><a href="#如果有大量的key需要设置同一时间过期，一般需要注意什么？" class="headerlink" title="如果有大量的key需要设置同一时间过期，一般需要注意什么？"></a>如果有大量的key需要设置同一时间过期，一般需要注意什么？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果我们过期时间设在同一时间，很有可能会造成缓存雪崩，大量访问指向数据库， 我们给定时时间一个随机值</span><br></pre></td></tr></table></figure><h2 id="那你使用过Redis分布式锁么，它是什么回事？"><a href="#那你使用过Redis分布式锁么，它是什么回事？" class="headerlink" title="那你使用过Redis分布式锁么，它是什么回事？"></a>那你使用过Redis分布式锁么，它是什么回事？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先使用setnx争抢锁 用expire给这个key添加过期时间，防止忘记释放。</span><br></pre></td></tr></table></figure><h2 id="然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？"><a href="#然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？" class="headerlink" title="然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？"></a>然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这时候这个锁就永远无法释放了。 可以通过set里的nx,ex两个命令行参数来进行原子化操作。</span><br></pre></td></tr></table></figure><h2 id="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"><a href="#假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？" class="headerlink" title="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？"></a>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用keys命令可以扫出制定模式的</span><br></pre></td></tr></table></figure><h2 id="如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"><a href="#如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？" class="headerlink" title="如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"></a>如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis是单线程的，线上会停顿，直到这个指令结束。 使用scan可以无阻塞的提出指定模式的keys，但是可能会重复</span><br></pre></td></tr></table></figure><h2 id="使用redis怎么实现异步队列？"><a href="#使用redis怎么实现异步队列？" class="headerlink" title="使用redis怎么实现异步队列？"></a>使用redis怎么实现异步队列？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用list数据类型， rpush 发送消息， lpop接收消息， 接收不到消息的时候适当的sleep一段时间</span><br></pre></td></tr></table></figure><h2 id="可不可以不用sleep"><a href="#可不可以不用sleep" class="headerlink" title="可不可以不用sleep"></a>可不可以不用sleep</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list有个指令 blpop 可以在消息不来的时候阻塞住知道消息到来</span><br></pre></td></tr></table></figure><h2 id="能不能一次生产-多次消费"><a href="#能不能一次生产-多次消费" class="headerlink" title="能不能一次生产 多次消费"></a>能不能一次生产 多次消费</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用pub&#x2F;sub模式，可以实现1:n的消息队列</span><br></pre></td></tr></table></figure><h2 id="pub-sub有什么缺点"><a href="#pub-sub有什么缺点" class="headerlink" title="pub/sub有什么缺点"></a>pub/sub有什么缺点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一旦消费者下线， 消息就会丢失。 建议还是使用专业的消息队列， \**RocketMQ rabbitmq\*</span><br></pre></td></tr></table></figure><h2 id="Redis如何实现延时队列？"><a href="#Redis如何实现延时队列？" class="headerlink" title="Redis如何实现延时队列？"></a>Redis如何实现延时队列？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用zset 值为时间戳 key为消息内容 使用zadd添加消息 使用zrangebyscore获取n秒前的数据。</span><br></pre></td></tr></table></figure><h2 id="redis怎么持久化的-主从数据怎么进行交互？"><a href="#redis怎么持久化的-主从数据怎么进行交互？" class="headerlink" title="redis怎么持久化的 主从数据怎么进行交互？"></a>redis怎么持久化的 主从数据怎么进行交互？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdb进行镜像全量同步， aof做增量持久化。 因为rdb耗费时间较久 需要配合aof来使用。 当redis重启时， 使用rdb持久化文件重新构建内存， 再用aof重放近期的操作指令来恢复重启前的状态</span><br></pre></td></tr></table></figure><h2 id="突然停电怎么办"><a href="#突然停电怎么办" class="headerlink" title="突然停电怎么办"></a>突然停电怎么办</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">取决于 aof的sync配置，如果不考虑性能的话每条指令后都sync下就不会丢失，但是一般来说，不会这么配置，如果配置每秒同步一次的话，丢失的就是这一秒的数据</span><br></pre></td></tr></table></figure><h2 id="rdb的原理"><a href="#rdb的原理" class="headerlink" title="rdb的原理"></a>rdb的原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fork 和 cow 父进程fork一个子进程，并且开始进行rdb， 子进程创建后，父子共享数据段， 父进程继续进行读写操作。</span><br><span class="line">redis每隔几分钟形成一个快照</span><br><span class="line"></span><br><span class="line">- rdb</span><br><span class="line">保存了redis某个时间点的数据集合， 体积较小</span><br><span class="line">适合用于灾难回复 恢复大量数据的时候比aof快 但是会丢失数据</span><br><span class="line"></span><br><span class="line">- aof</span><br><span class="line">同步频率快且不影响redis性能。</span><br><span class="line">有序追加对redis的操作指令</span><br><span class="line">但是体积较大</span><br></pre></td></tr></table></figure><h2 id="Pipline的好处是什么"><a href="#Pipline的好处是什么" class="headerlink" title="Pipline的好处是什么"></a>Pipline的好处是什么</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以把多次io缩减为1次</span><br></pre></td></tr></table></figure><h2 id="redis的同步机制"><a href="#redis的同步机制" class="headerlink" title="redis的同步机制"></a>redis的同步机制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主从同步和从从同步， 主节点做一次bgsave，生成rdb镜像， 并保存后续的操作记录。 待完成后，主节点把rdb全量同步给复制节点， 复制节点加载完rdb后， 增量数据使用aof同步。</span><br></pre></td></tr></table></figure><h2 id="redis集群的高可用怎么保证，-原理是什么"><a href="#redis集群的高可用怎么保证，-原理是什么" class="headerlink" title="redis集群的高可用怎么保证， 原理是什么"></a>redis集群的高可用怎么保证， 原理是什么</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis Sentinal 着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。   </span><br><span class="line">Redis Cluster  着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</span><br></pre></td></tr></table></figure><h2 id="pika和redis"><a href="#pika和redis" class="headerlink" title="pika和redis"></a>pika和redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pika相对于redis，最大的不同就是pika是持久化存储，数据存在磁盘上，而redis是内存存储，由此不同也给pika带来了相对于redis的优势和劣势**</span><br><span class="line"></span><br><span class="line">大容量redis 遇到的问题</span><br><span class="line"></span><br><span class="line">- 恢复时间长</span><br><span class="line">- 一主多从, 主从切换代价大</span><br><span class="line">- 缓冲区写满问题</span><br><span class="line">- 内存太贵</span><br><span class="line"></span><br><span class="line">Pika的特点</span><br><span class="line"></span><br><span class="line">1. 容量大，支持百G数据量的存储</span><br><span class="line">2. 兼容Redis，不用修改代码即可平滑从Redis迁移到Pika</span><br><span class="line">3. 支持主从(slaveof)</span><br><span class="line">4. 完善的运维命令</span><br><span class="line"></span><br><span class="line">优势:</span><br><span class="line"></span><br><span class="line">- 容量大：Pika没有Redis的内存限制, 最大使用空间等于磁盘空间的大小**</span><br><span class="line">- 加载db速度快：Pika 在写入的时候, 数据是落盘的, 所以即使节点挂了, 不需要rbd或者aof，pika 重启不用重新加载数据到内存而是直接使用已经持久化在磁盘上的数据, 不需要任何数据回放操作，这大大降低了重启成本。**</span><br><span class="line">- 备份速度快：Pika备份的速度大致等同于cp的速度（拷贝数据文件后还有一个快照的恢复过程，会花费一些时间），这样在对于百G大库的备份是快捷的，更快的备份速度更好的解决了主从的全同步问题</span><br><span class="line"></span><br><span class="line">劣势：</span><br><span class="line"></span><br><span class="line">由于Pika是基于内存和文件来存放数据, 所以性能肯定比Redis低一些, 但是我们一般使用SSD盘来存放数据, 尽可能跟上Redis的性能。</span><br><span class="line"></span><br><span class="line">从以上的对比可以看出, 如果你的业务场景的数据比较大，Redis 很难支撑， 比如大于50G，或者你的数据很重要，不允许断电丢失，那么使用Pika 就可以解决你的问题。</span><br><span class="line">而在实际使用中，大多数场景下pika的性能大约是Redis的50%~80%，在某些特定场景下，例如range 500，pika的性能只有redis的20%，针对这些场景我们仍然在改进</span><br></pre></td></tr></table></figure><h2 id="从pika迁移到pika"><a href="#从pika迁移到pika" class="headerlink" title="从pika迁移到pika"></a>从pika迁移到pika</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> DBA需要做的</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>DBA迁移Redis数据到Pika</span><br><span class="line"><span class="bullet">2. </span>DBA将Redis的数据实时同步到Pika，确保Redis与Pika的数据始终一致</span><br><span class="line"><span class="bullet">3. </span>DBA切换LVS后端ip，由Pika替换Redis</span><br></pre></td></tr></table></figure><h2 id="redis数据过期的问题"><a href="#redis数据过期的问题" class="headerlink" title="redis数据过期的问题"></a>redis数据过期的问题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在单机版Redis中，存在两种删除策略：</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>惰性删除：服务器不会主动删除数据，只有当客户端查询某个数据时，服务器判断该数据是否过期，如果过期则删除。</span><br><span class="line"><span class="bullet">- </span>定期删除：服务器执行定时任务删除过期数据，但是考虑到内存和CPU的折中（删除会释放内存，但是频繁的删除操作对CPU不友好），该删除的频率和执行时间都受到了限制。</span><br><span class="line"></span><br><span class="line">在主从复制场景下，为了主从节点的数据一致性，从节点不会主动删除数据，而是由主节点控制从节点中过期数据的删除。由于主节点的惰性删除和定期删除策略，都不能保证主节点及时对过期数据执行删除操作，因此，当客户端通过Redis从节点读取数据时，很容易读取到已经过期的数据。</span><br></pre></td></tr></table></figure><h2 id="如果定期删除漏掉了很多过期-key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期-key-堆积在内存里，导致-redis-内存块耗尽了，咋整？"><a href="#如果定期删除漏掉了很多过期-key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期-key-堆积在内存里，导致-redis-内存块耗尽了，咋整？" class="headerlink" title="如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？"></a>如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">内存淘汰机制。</span><br><span class="line"></span><br><span class="line">redis 内存淘汰机制有以下几个：</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。</span><br><span class="line"><span class="bullet">- </span>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。</span><br><span class="line"><span class="bullet">- </span>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的 key 给干掉啊。</span><br><span class="line"><span class="bullet">- </span>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key（这个一般不太合适）。</span><br><span class="line"><span class="bullet">- </span>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key。</span><br><span class="line"><span class="bullet">- </span>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除。</span><br></pre></td></tr></table></figure><h2 id="实现lru"><a href="#实现lru" class="headerlink" title="实现lru"></a>实现lru</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用链表来实现， 当命中某个值的时候 把它移到链表头部， 淘汰尾部</span><br><span class="line"></span><br><span class="line">lru-k 使用两个队列，一个是访问历史队列，先进先出</span><br><span class="line"></span><br><span class="line">一个lru队列</span><br></pre></td></tr></table></figure><h2 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了解决redis主从复制模式致命缺点，当主节点宕机，影响整个系统运行，引入哨兵机制Sentinel。</span><br><span class="line"></span><br><span class="line">Sentinel哨兵主要解决以下问题：</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>监控，监控每个节点以及哨兵运行状态</span><br><span class="line"><span class="bullet">- </span>报警，当发现某个节点或哨兵出现问题，通知其他哨兵</span><br><span class="line"><span class="bullet">- </span>自动故障转化，当主节点宕机时，哨兵从原主节点下的所有可用从节点中选举出一个作为主节点，原主节点降为从节点，并将其他从节点的主节点配置改为指定新主节点</span><br><span class="line"><span class="bullet">- </span>配置中心，客户端初始化连接的是哨兵节点集合</span><br></pre></td></tr></table></figure><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要就redis的常见面试问题进行了讨论&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="redis" scheme="http://lcf12307.github.io/tags/redis/"/>
    
      <category term="memcache" scheme="http://lcf12307.github.io/tags/memcache/"/>
    
      <category term="缓存" scheme="http://lcf12307.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>【常见问题】wine下的应用无法输入中文，解决办法</title>
    <link href="http://lcf12307.github.io/2019/07/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/wine%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/"/>
    <id>http://lcf12307.github.io/2019/07/21/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/wine%E5%BA%94%E7%94%A8%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</id>
    <published>2019-07-21T06:51:25.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为工作环境是linux，免不了用wine装微信等工具，但是支持不了中文，因此进行一下调研</p></blockquote><a id="more"></a><p>我用的搜狗输入法，属于fcitx框架。桌面是gnome3。</p><p>解决方法：</p><p>1、尝试设置环境变量</p><p>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=”@im=fcitx”<br>设置完后，尝试在当前终端下，用wine启动程序试试，如果可以就是环境变量的问题</p><p>2、尝试以下命令</p><p>gsettings set org.gnome.settings-daemon.plugins.keyboard active false<br>3、以上都不好使的情况下，放大招（偶然发现，我就是这么搞定的）</p><p> 用wine打开程序后，发现不能正确切换到输入法，此时请重启fcitx服务，重启后，意外发现wine打开的程序中可以使用输入法了。而且执行一次后，后续用wine启动其他应用，都可以正常输入，好神奇。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;因为工作环境是linux，免不了用wine装微信等工具，但是支持不了中文，因此进行一下调研&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="php" scheme="http://lcf12307.github.io/tags/php/"/>
    
      <category term="服务器" scheme="http://lcf12307.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>bash快捷键</title>
    <link href="http://lcf12307.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/bash%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://lcf12307.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/bash%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2019-04-23T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<p>今天敲命令行时想在单词间移动，竟然不记得快速移动的快捷键。试了<code>Ctrl + W</code>和<code>Ctrl + B/F</code>均不凑效，于是怀念之前某博主分享的终端快捷键说明图。</p><p>好在很快从浏览记录中找到了链接。原博主(<a href="https://link.juejin.im/?target=https%3A%2F%2Ftwitter.com%2Flinuxtoy">@linuxtoy</a>)分享的终端跳转解说图为：</p><p><a href="https://link.juejin.im/?target=https%3A%2F%2Ftlanyan.me%2Fbash-shortcuts%2Fbash-shortcut%2F"><img src="https://user-gold-cdn.xitu.io/2019/2/10/168d7a68490a6ba5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></a></p><p>虽然命令难记，但解说图清晰易懂，让人印象深刻。</p><p>趁热打铁，马上找了篇解说<code>bash</code>快捷键的文章温习一下。博主<a href="https://link.juejin.im/?target=https%3A%2F%2Fskorks.com">Alan Skorkin</a>的”<a href="https://link.juejin.im/?target=1">Bash Shortcuts For Maximum Productivity</a>“一文写得十分详细，故在此翻译和分享，并部分内容做注释和修正。</p><p>Alan Skorkin将bash快捷键分成四类，接下来一一给出。</p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><ul><li><strong>Ctrl + a</strong> – 跳到行首</li><li><strong>Ctrl + e</strong> – 跳到行尾</li><li><strong>Ctrl + k</strong> – 删除当前光标至行尾内容</li><li><strong>Ctrl + u</strong> – 删除当前光标至行首内容</li><li><strong>Ctrl + w</strong> – 删除当前光标至<strong>词首</strong>内容</li><li><strong>Ctrl + y</strong> – 将剪切的内容粘贴在光标后</li><li><strong>Ctrl + xx</strong> – 在行首和当前光标处(来回)移动</li><li><strong>Alt + b</strong> – 跳到词首</li><li><strong>Alt + f</strong> – 跳到词尾</li><li><strong>Alt + d</strong> – 删除自光标处起的<strong>单词</strong>内容</li><li><strong>Alt + c</strong> – 大写光标处的字符（<strong>注：该条内容与原文不同</strong>）</li><li><strong>Alt + u</strong> – 大写自光标处起的<strong>单词</strong>内容</li><li><strong>Alt + l</strong> – 小写自光标处起的<strong>单词</strong>内容</li><li><strong>Alt + t</strong> – 将光标处单词与上一个词交换</li><li><strong>Ctrl + f</strong> – 向前移动一个字符(相当于按向左箭头)</li><li><strong>Ctrl + b</strong> – 向后移动一个字符(相当于按向右箭头)</li><li><strong>Ctrl + d</strong> – 删除光标后一个字符（相当于按Delete）</li><li><strong>Ctrl + h</strong> – 删除光标前一个字符（相当于按后退键）</li><li><strong>Ctrl + t</strong> – 交换光标处的两个字符</li></ul><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><ul><li><strong>Ctrl + r</strong> – 反向搜索历史命令</li><li><strong>Ctrl + g</strong> – 退出历史搜索模式（相当于按Esc）</li><li><strong>Ctrl + p</strong> – 上一个历史命令（相当于按向上箭头）</li><li><strong>Ctrl + n</strong> – 下一个历史命令（相当于按向下箭头）</li><li><strong>Alt + .</strong> – 使用上一个命令的最后一个单词</li></ul><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><ul><li><strong>Ctrl + l</strong> – 清屏</li><li><strong>Ctrl + s</strong> – 终止输出到屏幕（对长时间运行并打印详细信息的命令）</li><li><strong>Ctrl + q</strong> – 允许输出到屏幕（如果之前用过终止输出命令）</li><li><strong>Ctrl + c</strong> – 终止命令</li><li><strong>Ctrl + z</strong> – 中断命令</li></ul><h2 id="Bang-即感叹号"><a href="#Bang-即感叹号" class="headerlink" title="Bang(即感叹号)"></a>Bang(即感叹号)</h2><ul><li><strong>!!</strong> – 执行上一条命令</li><li><strong>!blah</strong> –执行最近运行过的以<code>blah</code>开头的命令</li><li><strong>!blah:p</strong> – 打印<code>!blah</code>要执行的命令（并将其作为最后一条命令加入到命令历史中）</li><li><strong>!$</strong> – 上一条命令的最后一个单词 (等同于<code>Alt + .</code>)</li><li><strong>!$:p</strong> – 打印<code>!$</code>指代的单词</li><li><strong>!*</strong> – 上一条命令除最后一个词的部分</li><li><strong>!*:p</strong> – 打印<code>!*</code>指代部分</li></ul><p>如果错误，敬请指正！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天敲命令行时想在单词间移动，竟然不记得快速移动的快捷键。试了&lt;code&gt;Ctrl + W&lt;/code&gt;和&lt;code&gt;Ctrl + B/F&lt;/code&gt;均不凑效，于是怀念之前某博主分享的终端快捷键说明图。&lt;/p&gt;
&lt;p&gt;好在很快从浏览记录中找到了链接。原博主(&lt;a href
      
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="快捷键" scheme="http://lcf12307.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vim快捷键</title>
    <link href="http://lcf12307.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://lcf12307.github.io/2019/04/24/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2019-04-23T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.008Z</updated>
    
    <content type="html"><![CDATA[<p><em>经使用了两年多的Vim，手册也翻过一遍。虽然现在不怎么用vim了，曾经的笔记还是贴出来，与喜欢vim的朋友分享。</em></p><a id="more"></a><h1 id="1-关于Vim"><a href="#1-关于Vim" class="headerlink" title="1. 关于Vim"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id59" target="_blank" rel="noopener">1. 关于Vim</a></h1><p>vim是我最喜欢的编辑器，也是linux下第二强大的编辑器。 虽然emacs是公认的世界第一，我认为使用emacs并没有使用vi进行编辑来得高效。 如果是初学vi，运行一下vimtutor是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的vimtutor，就运行vimtutor zh）</p><h2 id="1-1-Vim的几种模式"><a href="#1-1-Vim的几种模式" class="headerlink" title="1.1 Vim的几种模式"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id60" target="_blank" rel="noopener">1.1 Vim的几种模式</a></h2><ul><li>正常模式：可以使用快捷键命令，或按:输入命令行。</li><li>插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。</li><li>可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。</li><li>替换模式：正常模式下，按R进入。</li></ul><h1 id="2-启动Vim"><a href="#2-启动Vim" class="headerlink" title="2. 启动Vim"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id61" target="_blank" rel="noopener">2. 启动Vim</a></h1><ul><li>vim -c cmd file: 在打开文件前，先执行指定的命令；</li><li>vim -r file: 恢复上次异常退出的文件；</li><li>vim -R file: 以只读的方式打开文件，但可以强制保存；</li><li>vim -M file: 以只读的方式打开文件，不可以强制保存；</li><li>vim -y num file: 将编辑窗口的大小设为num行；</li><li>vim + file: 从文件的末尾开始；</li><li>vim +num file: 从第num行开始；</li><li>vim +/string file: 打开file，并将光标停留在第一个找到的string上。</li><li>vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</li></ul><h1 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id62" target="_blank" rel="noopener">3. 文档操作</a></h1><ul><li>:e file –关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。</li><li>:e! file –放弃对当前文件的修改，编辑新的文件。</li><li>:e+file – 开始新的文件，并从文件尾开始编辑。</li><li>:e+n file – 开始新的文件，并从第n行开始编辑。</li><li>:enew –编译一个未命名的新文档。(CTRL-W n)</li><li>:e – 重新加载当前文档。</li><li>:e! – 重新加载当前文档，并丢弃已做的改动。</li><li>:e#或ctrl+^ – 回到刚才编辑的文件，很实用。</li><li>:f或ctrl+g – 显示文档名，是否修改，和光标位置。</li><li>:f filename – 改变编辑的文件名，这时再保存相当于另存为。</li><li>gf – 打开以光标所在字符串为文件名的文件。</li><li>:w – 保存修改。</li><li>:n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</li><li>:wq – 保存并退出。</li><li>ZZ – 保存并退出。</li><li>:x – 保存并退出。</li><li>:q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</li><li>:saveas newfilename – 另存为</li><li>:browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：<ul><li>:set browsedir=last – 用上次访问过的目录（默认）；</li><li>:set browsedir=buffer – 用当前文件所在目录；</li><li>:set browsedir=current – 用当前工作目录；</li></ul></li><li>:Sex – 水平分割一个窗口，浏览文件系统；</li><li>:Vex – 垂直分割一个窗口，浏览文件系统；</li></ul><h1 id="4-光标的移动"><a href="#4-光标的移动" class="headerlink" title="4. 光标的移动"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id63" target="_blank" rel="noopener">4. 光标的移动</a></h1><h2 id="4-1-基本移动"><a href="#4-1-基本移动" class="headerlink" title="4.1 基本移动"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id64" target="_blank" rel="noopener">4.1 基本移动</a></h2><p>以下移动都是在normal模式下。</p><ul><li>h或退格: 左移一个字符；</li><li>l或空格: 右移一个字符；</li><li>j: 下移一行；</li><li>k: 上移一行；</li><li>gj: 移动到一段内的下一行；</li><li>gk: 移动到一段内的上一行；</li><li>+或Enter: 把光标移至下一行第一个非空白字符。</li><li>-: 把光标移至上一行第一个非空白字符。</li><li>w: 前移一个单词，光标停在下一个单词开头；</li><li>W: 移动下一个单词开头，但忽略一些标点；</li><li>e: 前移一个单词，光标停在下一个单词末尾；</li><li>E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；</li><li>b: 后移一个单词，光标停在上一个单词开头；</li><li>B: 移动到上一个单词开头，忽略一些标点；</li><li>ge: 后移一个单词，光标停在上一个单词末尾；</li><li>gE: 同 ge ，不过‘单词’包含单词相邻的标点。</li><li>(: 前移1句。</li><li>): 后移1句。</li><li>{: 前移1段。</li><li>}: 后移1段。</li><li>fc: 把光标移到同一行的下一个c字符处</li><li>Fc: 把光标移到同一行的上一个c字符处</li><li>tc: 把光标移到同一行的下一个c字符前</li><li>Tc: 把光标移到同一行的上一个c字符后</li><li>;: 配合f &amp; t使用，重复一次</li><li>,: 配合f &amp; t使用，反向重复一次</li></ul><p>上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。</p><ul><li>0: 移动到行首。</li><li>g0: 移到光标所在屏幕行行首。</li><li>^: 移动到本行第一个非空白字符。</li><li>g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。</li><li>$: 移动到行尾。</li><li>g$: 移动光标所在屏幕行行尾。</li><li>n|: 把光标移到递n列上。</li><li>nG: 到文件第n行。</li><li>:n<cr> 移动到第n行。</li><li>:$<cr> 移动到最后一行。</li><li>H: 把光标移到屏幕最顶端一行。</li><li>M: 把光标移到屏幕中间一行。</li><li>L: 把光标移到屏幕最底端一行。</li><li>gg: 到文件头部。</li><li>G: 到文件尾部。</li></ul><h2 id="4-2-翻屏"><a href="#4-2-翻屏" class="headerlink" title="4.2 翻屏"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id65" target="_blank" rel="noopener">4.2 翻屏</a></h2><ul><li>ctrl+f: 下翻一屏。</li><li>ctrl+b: 上翻一屏。</li><li>ctrl+d: 下翻半屏。</li><li>ctrl+u: 上翻半屏。</li><li>ctrl+e: 向下滚动一行。</li><li>ctrl+y: 向上滚动一行。</li><li>n%: 到文件n%的位置。</li><li>zz: 将当前行移动到屏幕中央。</li><li>zt: 将当前行移动到屏幕顶端。</li><li>zb: 将当前行移动到屏幕底端。</li></ul><h2 id="4-3-标记"><a href="#4-3-标记" class="headerlink" title="4.3 标记"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id66" target="_blank" rel="noopener">4.3 标记</a></h2><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 <em>后退</em> 和 <em>前进</em> 。</p><ul><li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li><li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</li><li>`{a-z}: 移动到标记位置。</li><li>‘{a-z}: 移动到标记行的行首。</li><li>`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</li><li><code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code>精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</li><li>`”: 移动到上次离开的地方。</li><li>`.: 移动到最后改动的地方。</li><li>:marks 显示所有标记。</li><li>:delmarks a b – 删除标记a和b。</li><li>:delmarks a-c – 删除标记a、b和c。</li><li>:delmarks a c-f – 删除标记a、c、d、e、f。</li><li>:delmarks! – 删除当前缓冲区的所有标记。</li><li>:help mark-motions 查看更多关于mark的知识。</li></ul><h1 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id67" target="_blank" rel="noopener">5. 插入文本</a></h1><h2 id="5-1-基本插入"><a href="#5-1-基本插入" class="headerlink" title="5.1 基本插入"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id68" target="_blank" rel="noopener">5.1 基本插入</a></h2><ul><li>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</li><li>I: 在当前行第一个非空字符前插入；</li><li>gI: 在当前行第一列插入；</li><li>a: 在光标后插入；</li><li>A: 在当前行最后插入；</li><li>o: 在下面新建一行插入；</li><li>O: 在上面新建一行插入；</li><li>:r filename在当前位置插入另一个文件的内容。</li><li>:[n]r filename在第n行插入另一个文件的内容。</li><li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li></ul><h2 id="5-2-改写插入"><a href="#5-2-改写插入" class="headerlink" title="5.2 改写插入"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id69" target="_blank" rel="noopener">5.2 改写插入</a></h2><ul><li>c[n]w: 改写光标后1(n)个词。</li><li>c[n]l: 改写光标后n个字母。</li><li>c[n]h: 改写光标前n个字母。</li><li>[n]cc: 修改当前[n]行。</li><li>[n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。</li><li>[n]S: 删除指定数目的行，并以所输入文本代替之。</li></ul><p>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。</p><h1 id="6-剪切复制和寄存器"><a href="#6-剪切复制和寄存器" class="headerlink" title="6. 剪切复制和寄存器"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id70" target="_blank" rel="noopener">6. 剪切复制和寄存器</a></h1><h2 id="6-1-剪切和复制、粘贴"><a href="#6-1-剪切和复制、粘贴" class="headerlink" title="6.1 剪切和复制、粘贴"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id71" target="_blank" rel="noopener">6.1 剪切和复制、粘贴</a></h2><ul><li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li><li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li><li>y: 复制在可视模式下选中的文本。</li><li>yy or Y: 复制整行文本。</li><li>y[n]w: 复制一(n)个词。</li><li>y[n]l: 复制光标右边1(n)个字符。</li><li>y[n]h: 复制光标左边1(n)个字符。</li><li>y$: 从光标当前位置复制到行尾。</li><li>y0: 从光标当前位置复制到行首。</li><li>:m,ny<cr> 复制m行到n行的内容。</li><li>y1G或ygg: 复制光标以上的所有行。</li><li>yG: 复制光标以下的所有行。</li><li>yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。</li><li>d: 删除（剪切）在可视模式下选中的文本。</li><li>d$ or D: 删除（剪切）当前位置到行尾的内容。</li><li>d[n]w: 删除（剪切）1(n)个单词</li><li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li><li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li><li>d0: 删除（剪切）当前位置到行首的内容</li><li>[n] dd: 删除（剪切）1(n)行。</li><li>:m,nd<cr> 剪切m行到n行的内容。</li><li>d1G或dgg: 剪切光标以上的所有行。</li><li>dG: 剪切光标以下的所有行。</li><li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li><li>d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</li><li>p: 在光标之后粘贴。</li><li>P: 在光标之前粘贴。</li></ul><h2 id="6-2-文本对象"><a href="#6-2-文本对象" class="headerlink" title="6.2 文本对象"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id72" target="_blank" rel="noopener">6.2 文本对象</a></h2><ul><li>aw：一个词</li><li>as：一句。</li><li>ap：一段。</li><li>ab：一块（包含在圆括号中的）。</li></ul><p>y, d, c, v都可以跟文本对象。</p><h2 id="6-3-寄存器"><a href="#6-3-寄存器" class="headerlink" title="6.3 寄存器"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id73" target="_blank" rel="noopener">6.3 寄存器</a></h2><ul><li>a-z：都可以用作寄存器名。”ayy把当前行的内容放入a寄存器。</li><li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如”Ayy把当前行的内容追加到a寄存器中。</li><li>:reg 显示所有寄存器的内容。</li><li>“”：不加寄存器索引时，默认使用的寄存器。</li><li>“<em>：当前选择缓冲区，”</em>yy把当前行的内容放入当前选择缓冲区。</li><li>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</li></ul><h1 id="7-查找与替换"><a href="#7-查找与替换" class="headerlink" title="7. 查找与替换"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id74" target="_blank" rel="noopener">7. 查找与替换</a></h1><h2 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id75" target="_blank" rel="noopener">7.1 查找</a></h2><ul><li>/something: 在后面的文本中查找something。</li><li>?something: 在前面的文本中查找something。</li><li>/pattern/+number: 将光标停在包含pattern的行后面第number行上。</li><li>/pattern/-number: 将光标停在包含pattern的行前面第number行上。</li><li>n: 向后查找下一个。</li><li>N: 向前查找下一个。</li></ul><p>可以用grep或vimgrep查找一个模式都在哪些地方出现过，</p><p>其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。</p><p>用法为： :vim[grep]/pattern/[g] [j] files</p><p>g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。</p><p>j的含义是grep结束后，结果停在第j项，默认是停在第一项。</p><p>vimgrep前面可以加数字限定搜索结果的上限，如</p><p>:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。</p><p>其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。</p><p>比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：</p><p>:vim/^d{1,}./ %</p><p>然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，</p><p>就更像个目录了。</p><h2 id="7-2-替换"><a href="#7-2-替换" class="headerlink" title="7.2 替换"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id76" target="_blank" rel="noopener">7.2 替换</a></h2><ul><li>:s/old/new - 用new替换当前行第一个old。</li><li>:s/old/new/g - 用new替换当前行所有的old。</li><li>:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。</li><li>:%s/old/new/g - 用new替换文件中所有的old。</li><li>:%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。</li><li>:%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。</li><li>所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。</li></ul><p>还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，</p><p>语法为 :[range]g/pattern/command</p><p>例如 :%g/^ xyz/normal dd。</p><p>表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。</p><p>关于range的规定为：</p><ul><li>如果不指定range，则表示当前行。</li><li>m,n: 从m行到n行。</li><li>0: 最开始一行（可能是这样）。</li><li>$: 最后一行</li><li>.: 当前行</li><li>%: 所有行</li></ul><h2 id="7-3-正则表达式"><a href="#7-3-正则表达式" class="headerlink" title="7.3 正则表达式"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id77" target="_blank" rel="noopener">7.3 正则表达式</a></h2><p>高级的查找替换就要用到正则表达式。</p><ul><li>\d: 表示十进制数（我猜的）</li><li>\s: 表示空格</li><li>\S: 非空字符</li><li>\a: 英文字母</li><li>|: 表示 或</li><li>.: 表示.</li><li>{m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a{m,n} 表示m 到n个英文字母。</li><li>{m,}: 表示m到无限多个字符。</li><li>**: 当前目录下的所有子目录。</li></ul><p>:help pattern得到更多帮助。</p><hr><h1 id="8-排版"><a href="#8-排版" class="headerlink" title="8. 排版"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id78" target="_blank" rel="noopener">8. 排版</a></h1><h2 id="8-1-基本排版"><a href="#8-1-基本排版" class="headerlink" title="8.1 基本排版"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id79" target="_blank" rel="noopener">8.1 基本排版</a></h2><ul><li>&lt;&lt; 向左缩进一个shiftwidth</li><li>&gt;&gt; 向右缩进一个shiftwidth</li><li>:ce(nter) 本行文字居中</li><li>:le(ft) 本行文字靠左</li><li>:ri(ght) 本行文字靠右</li><li>gq 对选中的文字重排，即对过长的文字进行断行</li><li>gqq 重排当前行</li><li>gqnq 重排n行</li><li>gqap 重排当前段</li><li>gqnap 重排n段</li><li>gqnj 重排当前行和下面n行</li><li>gqQ 重排当前段对文章末尾</li><li>J 拼接当前行和下一行</li><li>gJ 同 J ，不过合并后不留空格。</li></ul><h2 id="8-2-拼写检查"><a href="#8-2-拼写检查" class="headerlink" title="8.2 拼写检查"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id80" target="_blank" rel="noopener">8.2 拼写检查</a></h2><ul><li>:set spell－开启拼写检查功能</li><li>:set nospell－关闭拼写检查功能</li><li>]s－移到下一个拼写错误的单词</li><li>[s－作用与上一命令类似，但它是从相反方向进行搜索</li><li>z=－显示一个有关拼写错误单词的列表，可从中选择</li><li>zg－告诉拼写检查器该单词是拼写正确的</li><li>zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的</li></ul><h2 id="8-3-统计字数"><a href="#8-3-统计字数" class="headerlink" title="8.3 统计字数"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id81" target="_blank" rel="noopener">8.3 统计字数</a></h2><p>g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</p><hr><h1 id="9-编辑多个文件"><a href="#9-编辑多个文件" class="headerlink" title="9. 编辑多个文件"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id82" target="_blank" rel="noopener">9. 编辑多个文件</a></h1><h2 id="9-1-一次编辑多个文件"><a href="#9-1-一次编辑多个文件" class="headerlink" title="9.1 一次编辑多个文件"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id83" target="_blank" rel="noopener">9.1 一次编辑多个文件</a></h2><p>我们可以一次打开多个文件，如</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi a.txt b.txt c.txt</span><br></pre></td></tr></table></figure></blockquote><ul><li>使用:next(:n)编辑下一个文件。</li><li>:2n 编辑下2个文件。</li><li>使用:previous或:N编辑上一个文件。</li><li>使用:wnext，保存当前文件，并编辑下一个文件。</li><li>使用:wprevious，保存当前文件，并编辑上一个文件。</li><li>使用:args 显示文件列表。</li><li>:n filenames或:args filenames 指定新的文件列表。</li><li>vi -o filenames 在水平分割的多个窗口中编辑多个文件。</li><li>vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</li></ul><h2 id="9-2-多标签编辑"><a href="#9-2-多标签编辑" class="headerlink" title="9.2 多标签编辑"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id84" target="_blank" rel="noopener">9.2 多标签编辑</a></h2><ul><li>vim -p files: 打开多个文件，每个文件占用一个标签页。</li><li>:tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。</li><li>^w gf – 在新的标签页里打开光标下路径指定的文件。</li><li>:tabn – 切换到下一个标签。Control + PageDown，也可以。</li><li>:tabp – 切换到上一个标签。Control + PageUp，也可以。</li><li>[n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。</li><li>:tab split – 将当前缓冲区的内容在新页签中打开。</li><li>:tabc[lose] – 关闭当前的标签页。</li><li>:tabo[nly] – 关闭其它的标签页。</li><li>:tabs – 列出所有的标签页和它们包含的窗口。</li><li>:tabm[ove] [N] – 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</li></ul><h2 id="9-3-缓冲区"><a href="#9-3-缓冲区" class="headerlink" title="9.3 缓冲区"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id85" target="_blank" rel="noopener">9.3 缓冲区</a></h2><ul><li>:buffers或:ls或:files 显示缓冲区列表。</li><li>ctrl+^：在最近两个缓冲区间切换。</li><li>:bn – 下一个缓冲区。</li><li>:bp – 上一个缓冲区。</li><li>:bl – 最后一个缓冲区。</li><li>:b[n]或:[n]b – 切换到第n个缓冲区。</li><li>:nbw(ipeout) – 彻底删除第n个缓冲区。</li><li>:nbd(elete) – 删除第n个缓冲区，并未真正删除，还在unlisted列表中。</li><li>:ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</li></ul><h1 id="10-分屏编辑"><a href="#10-分屏编辑" class="headerlink" title="10. 分屏编辑"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id86" target="_blank" rel="noopener">10. 分屏编辑</a></h1><ul><li>vim -o file1 file2:水平分割窗口，同时打开file1和file2</li><li>vim -O file1 file2:垂直分割窗口，同时打开file1和file2</li></ul><h2 id="10-1-水平分割"><a href="#10-1-水平分割" class="headerlink" title="10.1 水平分割"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id87" target="_blank" rel="noopener">10.1 水平分割</a></h2><ul><li>:split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。</li><li>:split filename – 水平分割窗口，并在新窗口中显示另一个文件。</li><li>:nsplit(:nsp) – 水平分割出一个n行高的窗口。</li><li>:[N]new – 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)</li><li>ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。</li><li>C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</li></ul><h2 id="10-2-垂直分割"><a href="#10-2-垂直分割" class="headerlink" title="10.2 垂直分割"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id88" target="_blank" rel="noopener">10.2 垂直分割</a></h2><ul><li>:vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)</li><li>:[N]vne[w] – 垂直分割出一个新窗口。</li><li>:vertical 水平分割的命令： 相应的垂直分割。</li></ul><h2 id="10-3-关闭子窗口"><a href="#10-3-关闭子窗口" class="headerlink" title="10.3 关闭子窗口"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id89" target="_blank" rel="noopener">10.3 关闭子窗口</a></h2><ul><li>:qall – 关闭所有窗口，退出vim。</li><li>:wall – 保存所有修改过的窗口。</li><li>:only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)</li><li>:close – 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )</li></ul><h2 id="10-4-调整窗口大小"><a href="#10-4-调整窗口大小" class="headerlink" title="10.4 调整窗口大小"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id90" target="_blank" rel="noopener">10.4 调整窗口大小</a></h2><ul><li>ctrl+w + –当前窗口增高一行。也可以用n增高n行。</li><li>ctrl+w - –当前窗口减小一行。也可以用n减小n行。</li><li>ctrl+w _ –当前窗口扩展到尽可能的大。也可以用n设定行数。</li><li>:resize n – 当前窗口n行高。</li><li>ctrl+w = – 所有窗口同样高度。</li><li>n ctrl+w _ – 当前窗口的高度设定为n行。</li><li>ctrl+w &lt; –当前窗口减少一列。也可以用n减少n列。</li><li>ctrl+w &gt; –当前窗口增宽一列。也可以用n增宽n列。</li><li>ctrl+w | –当前窗口尽可能的宽。也可以用n设定列数。</li></ul><h2 id="10-5-切换和移动窗口"><a href="#10-5-切换和移动窗口" class="headerlink" title="10.5 切换和移动窗口"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id91" target="_blank" rel="noopener">10.5 切换和移动窗口</a></h2><p>如果支持鼠标，切换和调整子窗口的大小就简单了。</p><ul><li>ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。</li><li>ctrl+w p: 切换到前一个窗口。</li><li>ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。</li><li>ctrl+w t(b):切换到最上（下）面的窗口。<BR></li><li>ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。</li><li>ctrl+w r：旋转窗口的位置。</li><li>ctrl+w T: 将当前的窗口移动到新的标签页上。</li></ul><h1 id="11-快速编辑"><a href="#11-快速编辑" class="headerlink" title="11. 快速编辑"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id92" target="_blank" rel="noopener">11. 快速编辑</a></h1><h2 id="11-1-改变大小写"><a href="#11-1-改变大小写" class="headerlink" title="11.1 改变大小写"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id93" target="_blank" rel="noopener">11.1 改变大小写</a></h2><ul><li>~: 反转光标所在字符的大小写。</li><li>可视模式下的U或u：把选中的文本变为大写或小写。</li><li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。</li></ul><h2 id="11-2-替换（normal模式）"><a href="#11-2-替换（normal模式）" class="headerlink" title="11.2 替换（normal模式）"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id94" target="_blank" rel="noopener">11.2 替换（normal模式）</a></h2><ul><li>r: 替换光标处的字符，同样支持汉字。</li><li>R: 进入替换模式，按esc回到正常模式。</li></ul><h2 id="11-3-撤消与重做（normal模式）"><a href="#11-3-撤消与重做（normal模式）" class="headerlink" title="11.3 撤消与重做（normal模式）"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id95" target="_blank" rel="noopener">11.3 撤消与重做（normal模式）</a></h2><ul><li>[n] u: 取消一(n)个改动。</li><li>:undo 5 – 撤销5个改变。</li><li>:undolist – 你的撤销历史。</li><li>ctrl + r: 重做最后的改动。</li><li>U: 取消当前行中所有的改动。</li><li>:earlier 4m – 回到4分钟前</li><li>:later 55s – 前进55秒</li></ul><h2 id="11-4-宏"><a href="#11-4-宏" class="headerlink" title="11.4 宏"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id96" target="_blank" rel="noopener">11.4 宏</a></h2><ul><li>. –重复上一个编辑动作</li><li>qa：开始录制宏a（键盘操作记录）</li><li>q：停止录制</li><li>@a：播放宏a</li></ul><h1 id="12-编辑特殊文件"><a href="#12-编辑特殊文件" class="headerlink" title="12. 编辑特殊文件"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id97" target="_blank" rel="noopener">12. 编辑特殊文件</a></h1><h2 id="12-1-文件加解密"><a href="#12-1-文件加解密" class="headerlink" title="12.1 文件加解密"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id98" target="_blank" rel="noopener">12.1 文件加解密</a></h2><ul><li>vim -x file: 开始编辑一个加密的文件。</li><li>:X – 为当前文件设置密码。</li><li>:set key= – 去除文件的密码。</li></ul><p><a href="http://www.cnblogs.com/jiqingwu/admin/vim-quick-edit.html" target="_blank" rel="noopener">这里是</a> 滇狐总结的比较高级的vi技巧。</p><h2 id="12-2-文件的编码"><a href="#12-2-文件的编码" class="headerlink" title="12.2 文件的编码"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id99" target="_blank" rel="noopener">12.2 文件的编码</a></h2><ul><li>:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。</li><li>:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。</li><li>:set fenc或:set fileencoding，查看当前文件的编码。</li><li>在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。</li></ul><p>让vim 正确处理文件格式和文件编码，有赖于 <a href="http://www.cnblogs.com/jiqingwu/admin/vimrc.html" target="_blank" rel="noopener">~/.vimrc的正确配置</a></p><h2 id="12-3-文件格式"><a href="#12-3-文件格式" class="headerlink" title="12.3 文件格式"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id100" target="_blank" rel="noopener">12.3 文件格式</a></h2><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。</p><ul><li>:e ++ff=dos filename, 让vim用dos格式打开这个文件。</li><li>:w ++ff=mac filename, 以mac格式存储这个文件。</li><li>:set ff，显示当前文件的格式。</li><li>在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。</li></ul><h1 id="13-编程辅助"><a href="#13-编程辅助" class="headerlink" title="13. 编程辅助"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id101" target="_blank" rel="noopener">13. 编程辅助</a></h1><h2 id="13-1-一些按键"><a href="#13-1-一些按键" class="headerlink" title="13.1 一些按键"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id102" target="_blank" rel="noopener">13.1 一些按键</a></h2><ul><li>gd: 跳转到局部变量的定义处；</li><li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li><li>g;: 上一个修改过的地方；</li><li>g,: 下一个修改过的地方；</li><li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li><li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li><li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li><li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li><li>[{: 跳转到当前块开始处；</li><li>]}: 跳转到当前块结束处；</li><li>[/: 跳转到当前注释块开始处；</li><li>]/: 跳转到当前注释块结束处；</li><li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li></ul><p>下面的括号匹配对编程很实用的。</p><ul><li>ci’, di’, yi’：修改、剪切或复制’之间的内容。</li><li>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。</li><li>ci”, di”, yi”：修改、剪切或复制”之间的内容。</li><li>ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。</li><li>ci(, di(, yi(：修改、剪切或复制()之间的内容。</li><li>ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。</li><li>ci[, di[, yi[：修改、剪切或复制[]之间的内容。</li><li>ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。</li><li>ci{, di{, yi{：修改、剪切或复制{}之间的内容。</li><li>ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。</li><li>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。</li><li>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。</li></ul><h2 id="13-2-ctags"><a href="#13-2-ctags" class="headerlink" title="13.2 ctags"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id103" target="_blank" rel="noopener">13.2 ctags</a></h2><ul><li>ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags</li><li>:set tags=path/tags – 告诉ctags使用哪个tag文件</li><li>:tag xyz – 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t</li><li>:stag xyz – 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口</li><li>:ptag xyz – 在预览窗口中打开xyz的定义，热键是C-w }。</li><li>:pclose – 关闭预览窗口。热键是C-w z。</li><li>:pedit abc.h – 在预览窗口中编辑abc.h</li><li>:psearch abc – 搜索当前文件和当前文件include的文件，显示包含abc的行。</li></ul><p>有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。</p><ul><li>:[n]tnext – 下一[n]个匹配。</li><li>:[n]tprev – 上一[n]个匹配。</li><li>:tfirst – 第一个匹配</li><li>:tlast – 最后一个匹配</li><li>:tselect tagname – 打开选择列表</li></ul><p>tab键补齐</p><ul><li>:tag xyz<tab> – 补齐以xyz开头的tag名，继续按tab键，会显示其他的。</li><li>:tag /xyz<tab> – 会用名字中含有xyz的tag名补全。</li></ul><h2 id="13-3-cscope"><a href="#13-3-cscope" class="headerlink" title="13.3 cscope"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id104" target="_blank" rel="noopener">13.3 cscope</a></h2><ul><li>cscope -Rbq: 生成cscope.out文件</li><li>:cs add /path/to/cscope.out /your/work/dir</li><li>:cs find c func – 查找func在哪些地方被调用</li><li>:cw – 打开quickfix窗口查看结果</li></ul><h2 id="13-4-gtags"><a href="#13-4-gtags" class="headerlink" title="13.4 gtags"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id105" target="_blank" rel="noopener">13.4 gtags</a></h2><p>Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。</p><ul><li>:Gtags funcname 定位到 funcname 的定义处。</li><li>:Gtags -r funcname 查询 funcname被引用的地方。</li><li>:Gtags -s symbol 定位 symbol 出现的地方。</li><li>:Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。</li><li>:Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。</li><li>:Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。</li></ul><h2 id="13-5-编译"><a href="#13-5-编译" class="headerlink" title="13.5 编译"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id106" target="_blank" rel="noopener">13.5 编译</a></h2><p>vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。</p><p>如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set makeprg&#x3D;javac\ abc.java</span><br></pre></td></tr></table></figure><p>然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setl efm&#x3D;%A%f:%l:\ %m,%-Z%p^,%-C%.%#</span><br></pre></td></tr></table></figure><p>%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p><h2 id="13-6-快速修改窗口"><a href="#13-6-快速修改窗口" class="headerlink" title="13.6 快速修改窗口"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id107" target="_blank" rel="noopener">13.6 快速修改窗口</a></h2><p>其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)</p><ul><li>:copen – 打开快速修改窗口。</li><li>:cclose – 关闭快速修改窗口。</li></ul><p>快速修改窗口在make程序时非常有用，当make之后：</p><ul><li>:cl – 在快速修改窗口中列出错误。</li><li>:cn – 定位到下一个错误。</li><li>:cp – 定位到上一个错误。</li><li>:cr – 定位到第一个错误。</li></ul><h2 id="13-7-自动补全"><a href="#13-7-自动补全" class="headerlink" title="13.7 自动补全"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id108" target="_blank" rel="noopener">13.7 自动补全</a></h2><ul><li>C-x C-s – 拼写建议。</li><li>C-x C-v – 补全vim选项和命令。</li><li>C-x C-l – 整行补全。</li><li>C-x C-f – 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。</li><li>C-x C-p 和C-x C-n – 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。</li><li>C-x C-o – 编程时可以补全关键字和函数名啊。</li><li>C-x C-i – 根据头文件内关键字补全。</li><li>C-x C-d – 补全宏定义。</li><li>C-x C-n – 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。</li></ul><p>当弹出补全菜单后：</p><ul><li>C-p 向前切换成员；</li><li>C-n 向后切换成员；</li><li>C-e 退出下拉菜单，并退回到原来录入的文字；</li><li>C-y 退出下拉菜单，并接受当前选项。</li></ul><h2 id="13-8-多行缩进缩出"><a href="#13-8-多行缩进缩出" class="headerlink" title="13.8 多行缩进缩出"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id109" target="_blank" rel="noopener">13.8 多行缩进缩出</a></h2><ul><li>正常模式下，按两下&gt;;光标所在行会缩进。</li><li>如果先按了n，再按两下&gt;;，光标以下的n行会缩进。</li><li>对应的，按两下&lt;;，光标所在行会缩出。</li><li>如果在编辑代码文件，可以用=进行调整。</li><li>在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。</li><li>或者n =，调整n行代码的缩排。</li></ul><h2 id="13-9-折叠"><a href="#13-9-折叠" class="headerlink" title="13.9 折叠"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id110" target="_blank" rel="noopener">13.9 折叠</a></h2><ul><li>zf – 创建折叠的命令，可以在一个可视区域上使用该命令；</li><li>zd – 删除当前行的折叠；</li><li>zD – 删除当前行的折叠；</li><li>zfap – 折叠光标所在的段；</li><li>zo – 打开折叠的文本；</li><li>zc – 收起折叠；</li><li>za – 打开/关闭当前折叠；</li><li>zr – 打开嵌套的折行；</li><li>zm – 收起嵌套的折行；</li><li>zR (zO) – 打开所有折行；</li><li>zM (zC) – 收起所有折行；</li><li>zj – 跳到下一个折叠处；</li><li>zk – 跳到上一个折叠处；</li><li>zi – enable/disable fold;</li></ul><h1 id="14-命令行"><a href="#14-命令行" class="headerlink" title="14. 命令行"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id111" target="_blank" rel="noopener">14. 命令行</a></h1><p>normal模式下按:进入命令行模式</p><h2 id="14-1-命令行模式下的快捷键："><a href="#14-1-命令行模式下的快捷键：" class="headerlink" title="14.1 命令行模式下的快捷键："></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id112" target="_blank" rel="noopener">14.1 命令行模式下的快捷键：</a></h2><ul><li>上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。</li><li>左右方向键：左/右移一个字符。</li><li>C-w： 向前删除一个单词。</li><li>C-h： 向前删除一个字符，等同于Backspace。</li><li>C-u： 从当前位置移动到命令行开头。</li><li>C-b： 移动到命令行开头。</li><li>C-e： 移动到命令行末尾。</li><li>Shift-Left： 左移一个单词。</li><li>Shift-Right： 右移一个单词。</li><li>@： 重复上一次的冒号命令。</li><li>q： 正常模式下，q然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。</li><li>q/和q? 可以打开查找历史记录。</li></ul><h2 id="14-2-执行外部命令"><a href="#14-2-执行外部命令" class="headerlink" title="14.2 执行外部命令"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id113" target="_blank" rel="noopener">14.2 执行外部命令</a></h2><ul><li>:! cmd 执行外部命令。</li><li>:!! 执行上一次的外部命令。</li><li>:sh 调用shell，用exit返回vim。</li><li>:r !cmd 将命令的返回结果插入文件当前位置。</li><li>:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。</li></ul><h1 id="15-其它"><a href="#15-其它" class="headerlink" title="15. 其它"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id114" target="_blank" rel="noopener">15. 其它</a></h1><h2 id="15-1-工作目录"><a href="#15-1-工作目录" class="headerlink" title="15.1 工作目录"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id115" target="_blank" rel="noopener">15.1 工作目录</a></h2><ul><li>:pwd 显示vim的工作目录。</li><li>:cd path 改变vim的工作目录。</li><li>:set autochdir 可以让vim 根据编辑的文件自动切换工作目录。</li></ul><h2 id="15-2-一些快捷键（收集中）"><a href="#15-2-一些快捷键（收集中）" class="headerlink" title="15.2 一些快捷键（收集中）"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id116" target="_blank" rel="noopener">15.2 一些快捷键（收集中）</a></h2><ul><li>K: 打开光标所在词的manpage。</li><li>*: 向下搜索光标所在词。</li><li>g*: 同上，但部分符合即可。</li><li>#: 向上搜索光标所在词。</li><li>g#: 同上，但部分符合即可。</li><li>g C-g: 统计全文或统计部分的字数。</li></ul><h2 id="15-3-在线帮助"><a href="#15-3-在线帮助" class="headerlink" title="15.3 在线帮助"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id117" target="_blank" rel="noopener">15.3 在线帮助</a></h2><ul><li>:h(elp)或F1 打开总的帮助。</li><li>:help user-manual 打开用户手册。</li><li>命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。</li><li>:helptags somepath 为somepath中的文档生成索引。</li><li>:helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。</li><li>Ctrl+] 跳转到tag主题，Ctrl+t 跳回。</li><li>:ver 显示版本信息。</li></ul><h2 id="15-4-一些小功能"><a href="#15-4-一些小功能" class="headerlink" title="15.4 一些小功能"></a><a href="http://www.cnblogs.com/jiqingwu/archive/2012/06/14/vim_notes.html#id118" target="_blank" rel="noopener">15.4 一些小功能</a></h2><ul><li>简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;经使用了两年多的Vim，手册也翻过一遍。虽然现在不怎么用vim了，曾经的笔记还是贴出来，与喜欢vim的朋友分享。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="快捷键" scheme="http://lcf12307.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>go语言规范</title>
    <link href="http://lcf12307.github.io/2019/02/20/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%B2%BE%E9%80%89%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://lcf12307.github.io/2019/02/20/%E9%9D%A2%E8%AF%95/%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/%E7%B2%BE%E9%80%89%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-系统知识"><a href="#1-系统知识" class="headerlink" title="1. 系统知识"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#1-系统知识" target="_blank" rel="noopener">1. 系统知识</a></h2><p>系统知识主要用于评判候选人是否为资深软件工程师</p><a id="more"></a><h3 id="1-1-网络"><a href="#1-1-网络" class="headerlink" title="1.1 网络"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#11-网络" target="_blank" rel="noopener">1.1 网络</a></h3><p>考察对象: 工作三年以上</p><h5 id="1-1-1-网络七层模型"><a href="#1-1-1-网络七层模型" class="headerlink" title="1.1.1 网络七层模型"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#111-网络七层模型" target="_blank" rel="noopener">1.1.1 网络七层模型</a></h5><p>又称OSI 模型，从下到上分别为：</p><ul><li>物理层：底层数据传输，如网线；网卡标准。</li><li>数据链路层：定义数据的基本格式，如何传输，如何标识；如网卡MAC地址。</li><li>网络层：定义IP编址，定义路由功能；如不同设备的数据转发。</li><li>传输层：端到端传输数据的基本功能；如 TCP、UDP。</li><li>会话层：控制应用程序之间会话能力；如不同软件数据分发给不同软件。</li><li>标识层：数据格式标识，基本压缩加密功能。</li><li>应用层：各种应用软件，包括 Web 应用。</li></ul><h5 id="1-1-2-网络四层模型"><a href="#1-1-2-网络四层模型" class="headerlink" title="1.1.2 网络四层模型"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#112-网络四层模型" target="_blank" rel="noopener">1.1.2 网络四层模型</a></h5><p>从下到上分别为：</p><ul><li>网络访问层：ARP、RARP等协议</li><li>互联网层：ICMP、IP等协议</li><li>传输层：TCP、UDP等协议</li><li>应用层：DNS、FTP、HTTP、SMTP、TELNET、IRC、WHOIS等协议</li></ul><h5 id="1-1-3-TCP、UDP、IP-协议"><a href="#1-1-3-TCP、UDP、IP-协议" class="headerlink" title="1.1.3 TCP、UDP、IP 协议"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#113-tcpudpip-协议" target="_blank" rel="noopener">1.1.3 TCP、UDP、IP 协议</a></h5><ul><li>TCP与UDP的区别<ol><li>TCP属于有状态的可靠连接，通过ack、拆包组包机制保障数据按照顺序传递，一旦建立好连接，路由路线是固定的；UDP本身是无状态的不可靠连接，没有固定的路由路线，优先选择速度快的路由路线，顺序靠应用程序自己保障。</li><li>TCP是基于数据流的，对应用层来说没有固定包大小，在TCP内部会发生拆包组包；UDP是基于数据包的，对应用程序来说有固定大小，UDP内部不会发生拆包组包。但不管是TCP还是UDP，在IP层都有可能发生拆包组包。</li></ol></li><li>TCP粘包问题<ol><li>发送端需要等缓冲区满才发送出去，造成粘包（nalge算法也可能造成粘包现象），可以通过设置socket为 nodelay解决。</li><li>接收方不及时接收缓冲区的包，造成多个包接收。应用程序对每个数据包添加包头来区分数据界限解决。</li></ol></li><li>TCP拆包问题<ol><li>发送的TCP报文大于TCP发送缓冲区剩余空间大小。</li><li>缓冲区中待发送的数据大小大于MSS（最大报文长度） 拆包问题，可以通过压缩数据得到改善。</li></ol></li><li>TCP快速重传、快速恢复、慢启动、滑动窗口<ol><li>TCP使用滑动窗口机制进行拥塞控制，避免网络质量变差时ACK时间过长导致丢包以及网络质量变好时频繁的ACK导致网络速度无法提升。</li><li>所谓的慢启动是指滑动窗口的调整是缓慢的调整，即使是网络质量很好的情况下，滑动窗口调整到合适大小也是需要一定时间。</li><li>快速重传：接收方接收到无序的包时，会立即发送ACK给发送方请求重传缺失的包，如果发送方连续收到3个或者3个以上的重传ACK，那么就判定丢包了，立即重传丢失的包。</li><li>快速恢复：丢包意味着网络环境变差，默认情况下TCP会恢复到慢启动来进行重传。快速恢复算法在收到3个重传ACK的时候判定网络环境质量并不差，决定不恢复到慢启动，直接重传丢失的包。</li></ol></li><li>IP层拆包组包 当报文超过MTU（最大传输单元）大小时，将发生IP层的拆包组包。MTU由路由协商决定，取路由两端以太网帧大小中较小的值。</li></ul><h5 id="1-1-4-TCP端口快速回收与重用"><a href="#1-1-4-TCP端口快速回收与重用" class="headerlink" title="1.1.4 TCP端口快速回收与重用"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#114-tcp端口快速回收与重用" target="_blank" rel="noopener">1.1.4 TCP端口快速回收与重用</a></h5><p>由于http协议是短连接，请求完毕后会关闭连接，导致服务器频繁的建立、断开连接，而TCP的回收是有等待时间的，在高并发的http服务器上，我们需要对TCP连接进行调优。否则，容易出现大量time_wait状态的连接占用大量资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line"># 开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line"># 开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1</span><br><span class="line"># 修改系統默认的TIMEOUT时间</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 30</span><br><span class="line">net.ipv4.tcp_timestamps &#x3D; 1</span><br></pre></td></tr></table></figure><p>服务端程序监听端口的socket也可能会遇到回收慢的问题。服务因意外挂掉没及时关闭socket，导致重启时无法监听端口。可以在代码里设置socket的reuse参数</p><h3 id="1-2-系统调用与函数调用"><a href="#1-2-系统调用与函数调用" class="headerlink" title="1.2 系统调用与函数调用"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#12-系统调用与函数调用" target="_blank" rel="noopener">1.2 系统调用与函数调用</a></h3><p>考察对象: 工作三年以上 附加考察点：应用程序地址空间的划分</p><p>应用程序地址空间的最高1G的内存空间是内核态内存空间，其余的属于用户态内存空间。内核态内存空间主要用于系统调用时在内核态保存数据。</p><h5 id="1-2-1-系统调用"><a href="#1-2-1-系统调用" class="headerlink" title="1.2.1 系统调用"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#121-系统调用" target="_blank" rel="noopener">1.2.1 系统调用</a></h5><p>系统调用是指通过软中断调用系统内核函数的过程。</p><ul><li>应用程序调用C函数库中的函数（GO例外，GO自己封装了系统库函数）</li><li>C函数库中触发软中断 INT 0x80，把系统调用号放入 %eax 寄存器</li><li>保存应用程序上下文到应用程序栈内存，主要是保存各种寄存器的值，其中最重要的是程序计数器（PC）和栈指针寄存器（SP）</li><li>陷入内核态</li><li>调用<code>copy_from_user</code>将参数从用户态内存复制到内核态内存</li><li>调用内核函数</li><li>调用<code>copy_to_user</code>将返回值从内核态内存复制到用户态内存</li><li>返回用户态</li><li>恢复应用程序上下文，并将PC所指内存地址的指令加载到指令寄存器（IP）</li><li>继续执行应用程序</li></ul><h5 id="1-2-2-函数调用"><a href="#1-2-2-函数调用" class="headerlink" title="1.2.2 函数调用"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#122-函数调用" target="_blank" rel="noopener">1.2.2 函数调用</a></h5><p>函数调用是指给定特定参数调用函数功能并获取返回结果的过程。</p><ul><li>保存函数参数到函数栈帧</li><li>保存函数调用完成后执行的下一条指令的地址到栈帧</li><li>跳转到函数地址</li><li>执行函数体</li><li>将返回值保存到栈帧</li><li>从栈帧加载下一条指令地址</li><li>执行下一条指令</li></ul><h5 id="1-2-3-系统调用与函数调用的区别"><a href="#1-2-3-系统调用与函数调用的区别" class="headerlink" title="1.2.3 系统调用与函数调用的区别"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#123-系统调用与函数调用的区别" target="_blank" rel="noopener">1.2.3 系统调用与函数调用的区别</a></h5><ul><li>函数调用不需要触发软中断</li><li>函数调用不需要执行上下文切换</li><li>系统调用是调用系统内核函数，函数调用是调用应用程序的函数</li></ul><h3 id="1-3-并发与并行"><a href="#1-3-并发与并行" class="headerlink" title="1.3 并发与并行"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#13-并发与并行" target="_blank" rel="noopener">1.3 并发与并行</a></h3><p>并发：某一时间段内处理多个任务的能力。 并行：某一时间点处理多个任务的能力。</p><h5 id="1-3-1-并发"><a href="#1-3-1-并发" class="headerlink" title="1.3.1 并发"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#131-并发" target="_blank" rel="noopener">1.3.1 并发</a></h5><p>并发强调的是单个处理单元在单位时间内处理任务的能力。常见的并发场景有：</p><ul><li>单个CPU核单位时间内执行的任务（线程）数。如通过top查看到的load avrage在一定程度上反馈了CPU的并发数</li><li>单个服务器单位时间内处理的请求数。如QPS这一指标一定程度上衡量了一台服务器的处理能力。</li></ul><h4 id="1-3-2-并行"><a href="#1-3-2-并行" class="headerlink" title="1.3.2 并行"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#132-并行" target="_blank" rel="noopener">1.3.2 并行</a></h4><p>并行强调的是整个系统某一时间点同时处理任务的能力。常见的并行场景有：</p><ul><li>CPU的指令流水线同时处理的指令数。如三级流水线表示整个流水线能同时处理三条指令：取指（加载指令）、预处理、执行。</li><li>CORE I7 处理器4核8线程，能同时让8个线程在上面工作。</li><li>一个拥有10个节点的集群，能同时处理至少10个网络请求。</li></ul><h4 id="1-3-3-多线程同步"><a href="#1-3-3-多线程同步" class="headerlink" title="1.3.3 多线程同步"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#133-多线程同步" target="_blank" rel="noopener">1.3.3 多线程同步</a></h4><p>原因：CPU内核有缓存，现代多核CPU缓存中寄存器、L1缓存是独占的，L2、L3缓存是多核共享。多线程不同步的原因本质上是CPU核之间缓存不同步、CPU缓存与内存不同步。 解决方案：1、加锁，强制同步CPU核之间的缓存，适合复杂数据类型。2、volatile关键字，禁止寄存器优化，适合简单数据类型（如整数），但只能降低概率，并不能保证原子性。3、原子操作，CPU利用内存屏障，在CPU对内容进行“读-修改-写”这一连续操作时，锁定内存总线，屏蔽其他的读写操作。内存屏障分为读屏障（load barrier）、写屏障（store barrier）、全屏障（full barrier）。读屏障是加在指令前强制让CPU缓存失效，直接从内存读取；写屏障是加在指令后强制将CPU缓存中的数据写入到内存。</p><h2 id="2-架构能力"><a href="#2-架构能力" class="headerlink" title="2. 架构能力"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#2-架构能力" target="_blank" rel="noopener">2. 架构能力</a></h2><p>考察对象：工作五年以上 架构能力考察候选人软件架构方面的知识和能力。</p><h3 id="2-1-分布式与集群"><a href="#2-1-分布式与集群" class="headerlink" title="2.1 分布式与集群"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#21-分布式与集群" target="_blank" rel="noopener">2.1 分布式与集群</a></h3><p>集群：多个处理相同任务的节点组成集群。 分布式：多个处理不同子任务的节点组成分布式系统。 分布式系统中往往涉及关键数据的同步，需要用到分布式锁。</p><h5 id="2-1-1-分布式锁"><a href="#2-1-1-分布式锁" class="headerlink" title="2.1.1 分布式锁"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#211-分布式锁" target="_blank" rel="noopener">2.1.1 分布式锁</a></h5><p>分布式锁基本理论：CAP、悲观锁、乐观锁（CAS） CAP：任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。 CAS： compare and swap，比较并交换。在修改正式数据之前，先会把现有数据版本与修改前的数据版本比较：如果相等则执行修改操作；如果不相等则需要重新获取数据和版本并提交CAS请求。 悲观锁：假设所有操作都可能会修改数据，默认执行加锁操作，直到等待锁释放后才能加锁成功。相当于互斥锁。 乐观锁：假设所有操作中读操作远比写操作多，在修改数据之前检查条件，条件符合则执行修改操作，条件不符合则返回失败。</p><p>常用的分布式锁主要有以下几种</p><ul><li><p>基于redis、memcached等缓存实现 redis的悲观锁： 加锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx test 1</span><br></pre></td></tr></table></figure><p>，如果test已经存在，则返回0表示加锁失败。解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del test</span><br></pre></td></tr></table></figure><p> redis的乐观锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch</span><br><span class="line">multi</span><br><span class="line">set test 1</span><br><span class="line">get test</span><br><span class="line">exec</span><br><span class="line">unwatch</span><br></pre></td></tr></table></figure><p>判断get test的返回值是否为 set 的值来判断是否加锁成功</p></li><li><p>基于zookeeper、etcd等集群管理软件实现 etcd 的悲观锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个key</span><br><span class="line">2. 如果key不存在返回成功并执行第 5 步</span><br><span class="line">3. 如果key存在则返回失败，需要watch这个key等待key被删除</span><br><span class="line">4. 如果key被删除则重试第 1 步</span><br><span class="line">5. 执行需要的操作</span><br></pre></td></tr></table></figure><p>etcd 的乐观锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 读取数据以及数据的版本号 ModifiedIndex</span><br><span class="line">2. 修改数据时用ModifiedIndex作为数据的比较条件</span><br><span class="line">3. 如果ModifiedIndex与现有数据的相同，则修改成功；否则修改失败，重试第 1 步</span><br></pre></td></tr></table></figure><p>etcd v3 已经提供了lock和unlock的接口</p></li><li><p>基于mysql等数据库实现 悲观锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM methodLock WHERE method_name&#x3D;xxx FOR UPDATE</span><br><span class="line">UPDATE tb_stock SET number&#x3D;number-1</span><br></pre></td></tr></table></figure><p>乐观锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_stock set number&#x3D;number-1 where product_id&#x3D;xxx</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-微服务"><a href="#2-2-微服务" class="headerlink" title="2.2 微服务"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#22-微服务" target="_blank" rel="noopener">2.2 微服务</a></h3><ul><li>SOA：服务注册与发现、配置管理 ETCD、zookeeper的用法</li><li>RPC：微服务调用 thrift、protobuf、grpc的原理和用法</li><li>MQ：异步调用、日志收集 rabbitmq、kafka的架构和用法</li><li>容器：服务调度和治理 docker、kubernetes的原理和用法</li></ul><h2 id="3-编程语言"><a href="#3-编程语言" class="headerlink" title="3. 编程语言"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#3-编程语言" target="_blank" rel="noopener">3. 编程语言</a></h2><h3 id="3-1-PHP"><a href="#3-1-PHP" class="headerlink" title="3.1 PHP"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#31-php" target="_blank" rel="noopener">3.1 PHP</a></h3><h3 id="3-2-Golang"><a href="#3-2-Golang" class="headerlink" title="3.2 Golang"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#32-golang" target="_blank" rel="noopener">3.2 Golang</a></h3><p>考察点：</p><ul><li>go调度器模型</li><li>channel的各种用法</li><li>goroutine的各种用法</li><li>interface的各种用法</li><li>sync包的用法</li><li>time包定时器的用法</li><li>context包用法和实现原理</li></ul><h5 id="3-2-1-Golang的调度器模型"><a href="#3-2-1-Golang的调度器模型" class="headerlink" title="3.2.1 Golang的调度器模型"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#321-golang的调度器模型" target="_blank" rel="noopener">3.2.1 Golang的调度器模型</a></h5><p>用这个知识点来初步判断候选人是否真的对golang感兴趣并了解过golang</p><h5 id="3-2-2-channel"><a href="#3-2-2-channel" class="headerlink" title="3.2.2 channel"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#322-channel" target="_blank" rel="noopener">3.2.2 channel</a></h5><p><strong>种类</strong></p><ul><li>nil 值为nil的channel，读写都会block。主要用于select的时候将close掉的channel置为nil，防止触发相应case。</li><li>无缓冲 读写都会block，读操作在写操作之前完成。一般用于同步通知。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ch :&#x3D; make(chan struct&#123;&#125;)</span><br><span class="line">go func()&#123;</span><br><span class="line">&#x2F;&#x2F;do something</span><br><span class="line">    close(ch)</span><br><span class="line">&#125;()</span><br><span class="line">&#x2F;&#x2F;wait goroutine finish</span><br><span class="line">&lt;- ch</span><br><span class="line">&#x2F;&#x2F;do something</span><br></pre></td></tr></table></figure><ul><li>单缓冲 无数据时，读操作block；有数据时，写操作block。用于保证数据有序传递并且限制接收端的最大速度。</li><li>多缓冲 只要缓冲区有数据，读操作不会被block；即使有数据，只要缓冲区有空间，写操作不会被block。可以保证数据有序传递，但无法限制接收端的最大速度，只能限制接收端的平均速度。</li></ul><h5 id="3-2-3-goroutine"><a href="#3-2-3-goroutine" class="headerlink" title="3.2.3 goroutine"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#323-goroutine" target="_blank" rel="noopener">3.2.3 goroutine</a></h5><h2 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#4-数据库" target="_blank" rel="noopener">4. 数据库</a></h2><h3 id="4-1-关联查询"><a href="#4-1-关联查询" class="headerlink" title="4.1 关联查询"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#41-关联查询" target="_blank" rel="noopener">4.1 关联查询</a></h3><ul><li>内联结：将两个表中存在联结关系的字段符合联结关系的那些记录形成记录集的联结。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.Name B.Hobby FROM A, B WHERE A.id &#x3D; B.id</span><br><span class="line">或者</span><br><span class="line">SELECT A.Name FROM A INNER JOIN B ON A.id &#x3D; B.id</span><br></pre></td></tr></table></figure><ul><li>外联结：分为外左联结和外右联结。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.Name FROM A LEFT JOIN B ON A.id &#x3D; B.id</span><br><span class="line">或者</span><br><span class="line">SELECT A.Name FROM B RIGHT JOIN A ON A.id &#x3D; B.id</span><br></pre></td></tr></table></figure><ul><li>全联结：将两个表中存在联结关系的字段的所有记录取出形成记录集的联结。 mysql本身没有实现全联结，可以使用<code>左连接 union 右连接</code>来实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT L.*,r.* FROM left_table L LEFT JOIN right_table r on L.age&#x3D;r.age UNION</span><br><span class="line">SELECT L.*,r.* FROM left_table L RIGHT JOIN right_table r on L.age&#x3D;r.age</span><br></pre></td></tr></table></figure><ul><li>无联结：没有使用联结功能，也有自联结的说法。</li></ul><p>假如要取两个用户共同评论过的商品详情，如何写SQL语句？</p><h3 id="4-2-事务"><a href="#4-2-事务" class="headerlink" title="4.2 事务"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#42-事务" target="_blank" rel="noopener">4.2 事务</a></h3><h5 id="4-2-1-ACID特性"><a href="#4-2-1-ACID特性" class="headerlink" title="4.2.1 ACID特性"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#421-acid特性" target="_blank" rel="noopener">4.2.1 ACID特性</a></h5><ul><li>原子性（Atomicity） 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。</li><li>一致性（Consistency） 一致性是指事务必须使数据库从一个一致的状态变到另外一个一致的状态，也就是执行事务之前和之后的状态都必须处于一致的状态。</li><li>隔离性(Isolation) 隔离性是指当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li><li>持久性(Durability) 持久性是指一个事务一旦被提交了，那么对于数据库中的数据改变就是永久性的，即便是在数据库系统遭遇到故障的情况下也不会丢失提交事务的操作。</li></ul><h5 id="4-2-2-事务的使用"><a href="#4-2-2-事务的使用" class="headerlink" title="4.2.2 事务的使用"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#422-事务的使用" target="_blank" rel="noopener">4.2.2 事务的使用</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set autocommit &#x3D; 0;</span><br><span class="line">start transaction;</span><br><span class="line">update accout set money&#x3D;money+100 where name&#x3D;&quot;Jason&quot;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h5 id="4-2-3-事务的回滚"><a href="#4-2-3-事务的回滚" class="headerlink" title="4.2.3 事务的回滚"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#423-事务的回滚" target="_blank" rel="noopener">4.2.3 事务的回滚</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set autocommit &#x3D; 0;</span><br><span class="line">start transaction;</span><br><span class="line">update account set money&#x3D;money-100 where name&#x3D;&quot;justin&quot;;</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><h5 id="4-4-4-事务隔离级别"><a href="#4-4-4-事务隔离级别" class="headerlink" title="4.4.4 事务隔离级别"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#444-事务隔离级别" target="_blank" rel="noopener">4.4.4 事务隔离级别</a></h5><p>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><p>设置当前session的下一个事务的隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set transaction isolation level Read uncommitted;</span><br></pre></td></tr></table></figure><p>设置当前session以后所有事务的隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level Read uncommitted;</span><br></pre></td></tr></table></figure><p>设置之后的所有session的隔离级别，不包括当前session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level Read uncommitted;</span><br></pre></td></tr></table></figure><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3 索引"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#43-索引" target="_blank" rel="noopener">4.3 索引</a></h3><h3 id="4-4-锁"><a href="#4-4-锁" class="headerlink" title="4.4 锁"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#44-锁" target="_blank" rel="noopener">4.4 锁</a></h3><h5 id="4-4-1-锁方案"><a href="#4-4-1-锁方案" class="headerlink" title="4.4.1 锁方案"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#441-锁方案" target="_blank" rel="noopener">4.4.1 锁方案</a></h5><ul><li>一次封锁：可以避免大量并发情况下的死锁，前提条件是已知要在哪些数据加锁，不适合用在数据库事务中。</li><li>两段锁：两段锁协议将事务分成两个阶段：加锁阶段和解锁阶段。在事务开始时加锁，事务结束后解锁。无法避免死锁，但能保证事务的串行化。</li></ul><h5 id="4-4-2-锁类型"><a href="#4-4-2-锁类型" class="headerlink" title="4.4.2 锁类型"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#442-锁类型" target="_blank" rel="noopener">4.4.2 锁类型</a></h5><ul><li>表锁：对一整张表加锁，并发能力低下（即使有分读锁、写锁），一般在DDL处理时使用。</li><li>行锁：只锁住特定行的数据，并发能力强，MySQL一般都是用行锁来处理并发事务。</li><li>GAP锁（间隙锁）：是MySQL使用索引对行锁两边的区间进行加锁，避免其他事务在这两个区间insert的一种锁。</li><li>Next-Key锁：Next-Key锁是行锁和GAP锁的合并（MySQL使用它来避免幻读）</li><li>MVVC(多版本并发控制）：Innodb中的乐观锁实现。通过它提高MySQL的读取操作的性能。并能解决MySQL的重复读问题。</li></ul><h2 id="5-缓存"><a href="#5-缓存" class="headerlink" title="5. 缓存"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#5-缓存" target="_blank" rel="noopener">5. 缓存</a></h2><h3 id="5-1-缓存金字塔"><a href="#5-1-缓存金字塔" class="headerlink" title="5.1 缓存金字塔"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#51-缓存金字塔" target="_blank" rel="noopener">5.1 缓存金字塔</a></h3><p>从上到下速度由快到慢，容量由小到大</p><ul><li>寄存器</li><li>L1缓存</li><li>L2缓存、L3缓存</li><li>系统缓存：缓存系统元数据和文件数据。</li><li>内存缓存：redis、memcached等使用内存来保存数据的缓存</li><li>磁盘缓存：交换分区、缓存文件等</li><li>网络缓存：CDN等通过网络来访问的缓存</li></ul><h3 id="5-2-http请求的缓存过程"><a href="#5-2-http请求的缓存过程" class="headerlink" title="5.2 http请求的缓存过程"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#52-http请求的缓存过程" target="_blank" rel="noopener">5.2 http请求的缓存过程</a></h3><p>从上到下优先级从高到低</p><ul><li>浏览器内存缓存</li><li>浏览器文件缓存</li><li>浏览器DNS缓存</li><li>CDN缓存</li><li>nginx缓存</li><li>web服务缓存</li><li>redis缓存</li><li>数据库缓存</li></ul><h2 id="6-web开发"><a href="#6-web开发" class="headerlink" title="6. web开发"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#6-web开发" target="_blank" rel="noopener">6. web开发</a></h2><ul><li>http缓存</li><li>http状态码</li><li>web后端框架</li><li>websocket建立过程</li><li>http2基本原理</li></ul><h2 id="7-数据结构和算法"><a href="#7-数据结构和算法" class="headerlink" title="7. 数据结构和算法"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#7-数据结构和算法" target="_blank" rel="noopener">7. 数据结构和算法</a></h2><ul><li>树操作：前序遍历、中序遍历、后序遍历；平衡二叉树调整子节点</li><li>堆：TopN 问题</li><li>数组：快排、归并</li></ul><h2 id="8-shell脚本"><a href="#8-shell脚本" class="headerlink" title="8. shell脚本"></a><a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#8-shell脚本" target="_blank" rel="noopener">8. shell脚本</a></h2><ul><li>awk 输出第一列、第二列、最后一列，用一个空格隔开。</li><li>逐行读取文件，在每行行首添加行号，用空格隔开</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-系统知识&quot;&gt;&lt;a href=&quot;#1-系统知识&quot; class=&quot;headerlink&quot; title=&quot;1. 系统知识&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://wiki.n.miui.com/pages/viewpage.action?pageId=115214950#1-系统知识&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1. 系统知识&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;系统知识主要用于评判候选人是否为资深软件工程师&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://lcf12307.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="go" scheme="http://lcf12307.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go使用protocbuf</title>
    <link href="http://lcf12307.github.io/2019/02/18/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>http://lcf12307.github.io/2019/02/18/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</id>
    <published>2019-02-17T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<ol><li>git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</li><li>git stash #把所有没有提交的修改暂存到stash里面。可用git stash <a href="https://www.baidu.com/s?wd=pop&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">pop</a>回复。</li><li>git reset –hard HASH #返回到某个节点，不保留修改。</li><li>git reset –soft HASH #返回到某个节点。</li><li>保留修改git clean -df #返回到某个节点</li><li>git clean 参数-n 显示 将要 删除的文件和目录-f 删除 文件-df 删除文件和目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">回退命令：</span><br><span class="line">$ git reset --hard HEAD^         回退到上个版本</span><br><span class="line">$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前</span><br><span class="line">$ git reset --hard commit_id     退到/进到 指定commit的sha码</span><br><span class="line"></span><br><span class="line">强推到远程：</span><br><span class="line">$ git push origin HEAD --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态&lt;/li&gt;
&lt;li&gt;git stash #把所有没有提交的修改暂存到stash里面。可用git stash &lt;a href=&quot;https://www.baidu.com/s?wd=p
      
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="git" scheme="http://lcf12307.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>配置mysql远程访问</title>
    <link href="http://lcf12307.github.io/2018/09/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%85%8D%E7%BD%AEmysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
    <id>http://lcf12307.github.io/2018/09/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%85%8D%E7%BD%AEmysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</id>
    <published>2018-09-05T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.008Z</updated>
    
    <content type="html"><![CDATA[<p>1.使用yum命令安装mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]#  yum -y install mysql-server</span><br></pre></td></tr></table></figure><a id="more"></a><p>2.设置开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]#  chkconfig mysqld on</span><br></pre></td></tr></table></figure><p>3.启动MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]#  service mysqld start</span><br></pre></td></tr></table></figure><p>4.设置MySQL的root用户设置密码</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]#  mysql -u root  </span><br><span class="line">mysql&gt; select user,host,password from mysql.user;  </span><br><span class="line">+------+-----------+----------+  </span><br><span class="line">| user | host      | password |  </span><br><span class="line">+------+-----------+----------+  </span><br><span class="line">| root | localhost |          |  </span><br><span class="line">| root | bogon     |          |  </span><br><span class="line">| root | 127.0.0.1 |          |  </span><br><span class="line">|      | localhost |          |  </span><br><span class="line">|      | bogon     |          |  </span><br><span class="line">+------+-----------+----------+  </span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>查询用户的密码，都为空，用下面的命令设置root的密码为root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost&#x3D;password(&#39;root&#39;);  </span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><p>6.创建mysql新用户test_user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &#39;test_user&#39;@&#39;%&#39; identified by &#39;test_user&#39;;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>7.给新用户test_user授权，让他可以从外部登陆和本地登陆<br>注意：@左边是用户名，右边是域名、IP和%，表示可以访问mysql的域名和IP，%表示外部任何地址都能访问。</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#39;test_user&#39;@&#39;localhost&#39; identified by &#39;test_user&#39;;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">mysql&gt; grant all privileges on *.* to &#39;test_user&#39;@&#39;%&#39; identified by &#39;test_user&#39;;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">mysql&gt; select user,host,password from mysql.user;  </span><br><span class="line">+----------+-----------+-------------------------------------------+  </span><br><span class="line">| user     | host      | password                                  |  </span><br><span class="line">+----------+-----------+-------------------------------------------+  </span><br><span class="line">| root     | localhost | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |  </span><br><span class="line">| root     | bogon     |                                           |  </span><br><span class="line">| root     | 127.0.0.1 |                                           |  </span><br><span class="line">|          | localhost |                                           |  </span><br><span class="line">|          | bogon     |                                           |  </span><br><span class="line">| test_user | %         | *3046CF87132BBD4FDDF06F321C6859074843B7D3 |  </span><br><span class="line">| test_user | localhost | *3046CF87132BBD4FDDF06F321C6859074843B7D3 |  </span><br><span class="line">+----------+-----------+-------------------------------------------+  </span><br><span class="line">7 rows in set (0.00 sec)  </span><br><span class="line">mysql&gt; flush privileges;  </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>8.查看mysql5.1的默认存储引擎<br>从下面的执行结果可以看出，mysql的默认引擎是MyISAM，这个引擎是不支持事务的。</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show engines;  </span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+  </span><br><span class="line">| Engine     | Support | Comment                                                    | Transactions | XA   | Savepoints |  </span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+  </span><br><span class="line">| MRG_MYISAM | YES     | Collection of identical MyISAM tables                      | NO           | NO   | NO         |  </span><br><span class="line">| CSV        | YES     | CSV storage engine                                         | NO           | NO   | NO         |  </span><br><span class="line">| MyISAM     | DEFAULT | Default engine as of MySQL 3.23 with great performance     | NO           | NO   | NO         |  </span><br><span class="line">| InnoDB     | YES     | Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |  </span><br><span class="line">| MEMORY     | YES     | Hash based, stored in memory, useful for temporary tables  | NO           | NO   | NO         |  </span><br><span class="line">+------------+---------+------------------------------------------------------------+--------------+------+------------+  </span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>也可以以下面的方式查看</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;storage_engine&#39;;  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">| Variable_name  | Value  |  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">| storage_engine | MyISAM |  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>9.修改mysql的默认引擎为InnoDB<br>9.1 停止mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; exit;  </span><br><span class="line">[root@bogon ~]# service mysqld stop</span><br></pre></td></tr></table></figure><p>9.2 修改/etc/my.cnf<br>[mysqld] 后加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=InnoDB</span><br></pre></td></tr></table></figure><p>加入后my.cnf的内容为：</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon etc]<span class="comment"># more my.cnf  </span></span><br><span class="line">[mysqld]  </span><br><span class="line">datadir=/var/lib/mysql  </span><br><span class="line">socket=/var/lib/mysql/mysql.sock  </span><br><span class="line">user=mysql  </span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks  </span></span><br><span class="line">symbolic-links=0  </span><br><span class="line">  </span><br><span class="line">default-storage-engine=InnoDB  </span><br><span class="line">  </span><br><span class="line">[mysqld_safe]  </span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.log  </span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>9.3 启动mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon etc]<span class="comment"># service mysqld start  </span></span><br><span class="line">Starting mysqld:  [  OK  ]</span><br></pre></td></tr></table></figure><p>9.4 查看mysql默认存储引擎</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon etc]# mysql -u root -p  </span><br><span class="line">Enter password:   </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.  </span><br><span class="line">Your MySQL connection id is 2  </span><br><span class="line">Server version: 5.1.73 Source distribution  </span><br><span class="line">  </span><br><span class="line">Copyright (c) 2000, 2013, Oracle and&#x2F;or its affiliates. All rights reserved.  </span><br><span class="line">  </span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its  </span><br><span class="line">affiliates. Other names may be trademarks of their respective  </span><br><span class="line">owners.  </span><br><span class="line">  </span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.  </span><br><span class="line">  </span><br><span class="line">mysql&gt; show variables like &#39;storage_engine&#39;;  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">| Variable_name  | Value  |  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">| storage_engine | InnoDB |  </span><br><span class="line">+----------------+--------+  </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>10.CentOS6.5开放mysql端口3306<br>CentOS6.5默认是不开放端口的，如果要让外部的系统访问CentOS6.5上的mysql，必须开放mysql的端口3306<br>10.1 修改/etc/sysconfig/iptables<br>添加下面一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><p>修改后iptables中的内容是</p><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon etc]# more &#x2F;etc&#x2F;sysconfig&#x2F;iptables  </span><br><span class="line"># Firewall configuration written by system-config-firewall  </span><br><span class="line"># Manual customization of this file is not recommended.  </span><br><span class="line">*filter  </span><br><span class="line">:INPUT ACCEPT [0:0]  </span><br><span class="line">:FORWARD ACCEPT [0:0]  </span><br><span class="line">:OUTPUT ACCEPT [0:0]  </span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT  </span><br><span class="line">-A INPUT -p icmp -j ACCEPT  </span><br><span class="line">-A INPUT -i lo -j ACCEPT  </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT  </span><br><span class="line">#添加配置项  </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT  </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 11211 -j ACCEPT  </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT  </span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited  </span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited  </span><br><span class="line">  </span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p><img src="https://app.yinxiang.com/shard/s37/res/00d39035-814c-4a24-b570-5fc3b75a3a50.gif" alt="复制代码"></p><p>11.重启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon etc]<span class="comment"># service iptables restart</span></span><br></pre></td></tr></table></figure><p>这样就可以从外部访问mysql了。</p><p>至此，mysql在CentOS6.5上的安装过程、用户创建、外部访问的步骤全部完成。</p><p>—————————分割线—————————————</p><p>上面都是从别人发表的文章中截取的<del>~</del>作者要是看到了莫怪，我只是想收藏，怕源文被删就看不到了，谢谢你们这些摘树的前人。</p><p>其实这样在云主机上设置mysql并访问是OK的。适用于一切的centos6.5，亦或者其他linux系统。万变不离其宗，系统的改变，无非是命令行语言的改变，其宗旨是不会变的。</p><p>LZ第一次用云主机，想试试在本地远程访问一下，结果发现，咦，连接出错了<del>~</del>，后来试了很多方法，还是没有能成功。</p><p>刚开始，用Navicat连接远程数据库，出现如下错误：应该就是远程不允许访问了。</p><p><img src="https://app.yinxiang.com/shard/s37/res/1697e3b0-837f-41b0-8baa-8e4578dda4c8.png" alt="img"></p><p>远程拒绝访问的情况可能有两种：</p><p>一、mysql设置中，不允许远程访问.也即你使用的mysql登陆账号没有远程访问的权限。比如root账号，在我们之前看到的use权限列表中，root就没有远程访问的权限。现在来设置root的远程访问权限。</p><p>方法一：实现远程连接(授权法)</p><p>mysql&gt; use mysql;</p><p>Database changed</p><p>mysql&gt; grant all privileges  on <em>.</em> to root@’%’ identified by “root”;</p><p>mysql&gt; select host,user,password from user;</p><p>+————–+——+——————————————-+</p><p>| host     | user | password                  |</p><p>+————–+——+——————————————-+</p><p>| localhost   | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |</p><p>| 192.168.1.1 | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |</p><p>| %       | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |</p><p>+————–+——+——————————————-+</p><p>3 rows in set (0.00 sec)</p><p>这样机器就可以以用户名root密码root远程访问该机器上的MySql.</p><p>方法二：实现远程连接（改表法）</p><p>将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。 </p><p>mysql&gt; use mysql;</p><p>Database changed</p><p>mysql&gt; update user set host = ‘%’ where user = ‘root’;</p><p>这时，root将权限改为ALL PRIVILEGES；</p><p>这样在远端就可以通过root用户访问Mysql.</p><p>二、确定服务器上的防火墙没有阻止 3306 端口。也即服务器上面有没有开放mysql的端口~（我的就是这个问题）</p><p>　　看到上面的第10条中，在端口管理iptables中添加3306端口的开放配置，这样算是硬件的配置。然后看看你的云主机设置里面有没有开放对应的端口，或者说是不是开放了所有端口~我的云主机如下图：</p><p><img src="https://app.yinxiang.com/shard/s37/res/5269b539-f016-491c-b76c-a43e8e5833d5.png" alt="img">)<img src="https://app.yinxiang.com/shard/s37/res/900f746d-0def-457f-92df-c08e0894825d.png" alt="img"></p><p>腾讯云主机中，貌似是没有开放所有端口的，所以需要我们自己在这里稍微设置一下，勾选“默认安全组放通全部端口”选项，“确定”。基本上，我们能做的都做了，要不然就是配置文件出错了，再返回去看看。设置好了以后，我去试了一下连接，结果成功了~</p><p><img src="https://app.yinxiang.com/shard/s37/res/a5e1fa91-d624-48e2-95fd-9b9e261f5b65.png" alt="img"></p><p>哈哈，好高兴<del>以后遇到这些问题就知道在哪些地方找问题了</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.使用yum命令安装mysql&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@bogon ~]#  yum -y install mysql-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="mysql" scheme="http://lcf12307.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>nginx 403报错</title>
    <link href="http://lcf12307.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx403/"/>
    <id>http://lcf12307.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx403/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<p>由于开发需要，在本地环境中配置了LNMP环境，使用的是Centos 6.5 的yum安装，安装一切正常，但是由于默认网站文件夹比较奇葩，于是把网站文件用mv命令移动到了新的目录，并相应修改了配置文件，并重启Nginx。</p><a id="more"></a><p>那么好，问题来了！本以为重启就OK了。居然报个“403 is forbidden“的错误。。查看/var/log/nginx/error.log日志显示：xxx 403 forbidden (13: Permission denied)错误。我勒个去~</p><p>引起nginx 403 forbidden通常是三种情况：一是缺少索引文件，二是权限问题，三是SELinux状态。</p><p>一、缺少index.html或者index.php文件，就是配置文件中index index.html index.htm这行中的指定的文件。</p><p>我是按照腾讯云官网文档进行配置的， 官网上应该给index增加index.php 索引文件，此外最好设置权限</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于开发需要，在本地环境中配置了LNMP环境，使用的是Centos 6.5 的yum安装，安装一切正常，但是由于默认网站文件夹比较奇葩，于是把网站文件用mv命令移动到了新的目录，并相应修改了配置文件，并重启Nginx。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://lcf12307.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>访问php直接下载，而不是访问</title>
    <link href="http://lcf12307.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%AE%BF%E9%97%AEphp%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD/"/>
    <id>http://lcf12307.github.io/2018/08/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E8%AE%BF%E9%97%AEphp%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.008Z</updated>
    
    <content type="html"><![CDATA[<p>遇到这种问题，首先确认你web服务器配置中的.php是不是被指定给FastCGI server处理：</p><a id="more"></a><p>location ~ .php$ {<br>fastcgi_pass 127.0.0.1:9000;</p><p>}</p><p>如已配置，那么可能是由于fastcgi_script_name访问脚本路径不正确引起的。</p><p>尤其是带有子目录的情况，比如对于Yii框架而言，路径通常是project/web</p><p>那么如果在URL中访问 /project/index.php，那么nginx配置中的SCRIPT_NAME会是全路径：project/index.php</p><p>如果你配置中的代码如下：</p><p>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</p><p>那么实际访问的文件就是/var/site_root/project/web/project/index.php，这显然不是我们想要的结果，我们想访问的是/project/web/index.php。</p><p>这些错误可以通过查看php-fpm.log（错误日志）来跟踪。</p><p>解决方法是修改相应的路径配置。</p><p>此时我们先在查看下错误日志 error.log，发现里面都是清一色的报错：</p><p>connect() failed (111: Connection refused) while connecting to upstream ……   fastcgi://127.0.0.1:9000 ……</p><p>提示的意思就是说连接不上9000端口，这就奇怪了，其实在平时配置nginx的server里面，大部分应该都是配置127.0.0.1:9000 作为分发端口。</p><p>现在需要查看一下是否有监听9000端口：</p><p>[root@izwz9glf2r6p2z8ytslvblz /]# netstat -ant | grep 9000<br>发现并没有监听到，但实际上我们的php-fpm已经启动，那现在怎么办呢？<br>我们去查看一下php-fpm.conf里面的配置：</p><p>[root@izwz9glf2r6p2z8ytslvblz /]# vim /usr/local/php/etc/php-fpm.conf</p><p>找到listen：<br><value name="listen_address">/tmp/php-cgi.sock</value></p><p>此时我们需要根据配置文件的listen地址做对应的修改：</p><p>location ~ .php$ {<br>fastcgi_pass 127.0.0.1:9000;<br>fastcgi_index index.php;<br>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>include fastcgi_params;</p><p>}</p><p>改成：<br>location ~ .php$ {<br>fastcgi_pass unix:/tmp/php-cgi.sock;<br>fastcgi_index index.php;<br>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>include fastcgi_params;<br>}</p><p>重启nginx。访问成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到这种问题，首先确认你web服务器配置中的.php是不是被指定给FastCGI server处理：&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="php" scheme="http://lcf12307.github.io/tags/php/"/>
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://lcf12307.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>linux命令-scp</title>
    <link href="http://lcf12307.github.io/2018/08/17/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E5%91%BD%E4%BB%A4-scp/"/>
    <id>http://lcf12307.github.io/2018/08/17/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E5%91%BD%E4%BB%A4-scp/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p><a id="more"></a><p>1．命令格式：</p><p>scp [参数] [原路径] [目标路径]</p><p>2．命令功能：</p><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p><p>3．命令参数：</p><p>-1 强制scp命令使用协议ssh1 </p><p>-2 强制scp命令使用协议ssh2 </p><p>-4 强制scp命令只使用IPv4寻址 </p><p>-6 强制scp命令只使用IPv6寻址 </p><p>-B 使用批处理模式（传输过程中不询问传输口令或短语） </p><p>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能） </p><p>-p 保留原文件的修改时间，访问时间和访问权限。 </p><p>-q 不显示传输进度条。 </p><p>-r 递归复制整个目录。 </p><p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。 </p><p>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。 </p><p>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。 </p><p>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。  </p><p>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。  </p><p>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式， </p><p>-P port 注意是大写的P, port是指定数据传输用到的端口号 </p><p>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p><p>4．使用实例：</p><p>scp命令的实际应用概述： </p><p>从本地服务器复制到远程服务器：</p><p>(1) 复制文件： </p><p>命令格式： </p><p>scp local_file remote_username@remote_ip:remote_folder </p><p>或者 </p><p>scp local_file remote_username@remote_ip:remote_file </p><p>或者 </p><p>scp local_file remote_ip:remote_folder </p><p>或者 </p><p>scp local_file remote_ip:remote_file </p><p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名 </p><p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名 </p><p>(2) 复制目录： </p><p>命令格式： </p><p>scp -r local_folder remote_username@remote_ip:remote_folder </p><p>或者 </p><p>scp -r local_folder remote_ip:remote_folder </p><p>第1个指定了用户名，命令执行后需要输入用户密码； </p><p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p><p>从远程服务器复制到本地服务器：</p><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p><p>实例1：从远处复制文件到本地目录</p><p>命令：</p><p>scp <a href="mailto:root@192.168.120.204">root@192.168.120.204</a>:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</p><p>输出：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装vs code</title>
    <link href="http://lcf12307.github.io/2018/07/19/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85vscode/"/>
    <id>http://lcf12307.github.io/2018/07/19/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85vscode/</id>
    <published>2018-07-18T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu16-04安装visual-studio-code"><a href="#ubuntu16-04安装visual-studio-code" class="headerlink" title="ubuntu16.04安装visual-studio-code"></a><a href="https://www.cnblogs.com/iamhenanese/p/5628275.html" target="_blank" rel="noopener">ubuntu16.04安装visual-studio-code</a></h1><p><a href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="noopener">微软主页的安装说明</a>，<a href="https://code.visualstudio.com/docs/setup/linux" target="_blank" rel="noopener">https://code.visualstudio.com/docs/setup/linux</a>  </p><p>有<strong>一点</strong>英语基础就能看懂，写的很好，一切以官方文档为主</p><p>方法一：可以使用umake，（要先安装，非常牛逼的工具，可以安装很多种流行的开发工具）</p><p>sudo apt install ubuntu-make</p><p>umake web visual-studio-code  ,会问你安装目录，回车即可，接受，完成安装，快捷方式会出现在快速启动栏，不过有个问题，我不懂如何命令行启动，这让我用的不舒服。</p><p>umake -r web visual-studio-code   即可删除</p><p>方法二：或者到微软的vscode网站  （下载地址）<a href="https://code.visualstudio.com/Download，即可安装，可以使用（" target="_blank" rel="noopener">https://code.visualstudio.com/Download，即可安装，可以使用（</a>  命令行输入code .  在任何目录中打开该编辑器，只用deb安装的可以命令行打开，其他不行） 推荐使用这种方法，bug最少，启动最方便</p><p>方法三：或者直接下载一个.zip文件，双击一个叫code的可执行文件即可。</p><p>感觉非常棒，但是换编辑器太花时间，而且atom已经用的比较习惯了，所以先放一放。</p><p>如果不能安装成功，可以看一看参考<a href="http://os.51cto.com/art/201509/490032.htm" target="_blank" rel="noopener">Arun Pyasi的文章</a>，他写的更详细，网址<a href="http://os.51cto.com/art/201509/490032.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201509/490032.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu16-04安装visual-studio-code&quot;&gt;&lt;a href=&quot;#ubuntu16-04安装visual-studio-code&quot; class=&quot;headerlink&quot; title=&quot;ubuntu16.04安装visual-studio-cod
      
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="应用安装" scheme="http://lcf12307.github.io/tags/%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Navicat for MySQL安装以及破解方案</title>
    <link href="http://lcf12307.github.io/2018/07/18/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85navicat/"/>
    <id>http://lcf12307.github.io/2018/07/18/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85navicat/</id>
    <published>2018-07-17T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<p>今天安装了Navicat for MySQL有LINUX版本了哈， 开心的说，</p><a id="more"></a><p>首先上官网上下载LINUX版本： <a href="http://www.navicat.com/download" target="_blank" rel="noopener">http://www.navicat.com/download/navicat-for-mysql</a></p><ol><li><p>下载 navicat110_mysql_en.tar.gz 文件 </p></li><li><p>下载后解压tar文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /home/rain/download/navicat8_mysql_en.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>解压后 进入解压后的目录运行命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start_navicat</span><br></pre></td></tr></table></figure><p>OK，这样就完啦</p><p>连接上<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>后里面的中文数据是乱码,把Ubuntu的字符集修改为zh_CN.utf8就行了,修改方法:</p><p>1.查看系统支持的字符集: locale -a </p><p>2,修改字符集: export LANG=zh_CN.utf8 </p><p><strong>破解方案：</strong></p><p>第一次执行start_navicat时，会在用户主目录下生成一个名为.navicat的隐藏文件夹。</p><p>cd /home/rain/.navicat/ </p><p>此文件夹下有一个system.reg文件</p><p>rm system.reg</p><p>把此文件删除后，下次启动navicat 会重新生成此文件，30天试用期会按新的时间开始计算。</p><p><strong>问题：</strong><br><strong><a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">Linux</a>下MySQL workbench连接<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>，表中数据不乱码，但是我下载安装类Navicat for mysql 64位 英文版，其中显示的中文数据乱码</strong></p><p>解决步骤：<br>1、下载好navicat112_mysql_en_x64.tar.gz压缩文件，解压出文件，我用的命令是 tar xvf navicat112_mysql_en_x64.tar.gz<br>2、我连接上mysql数据库，其中表中字段有中文全部乱码，打开navicat112_mysql_en_x64.tar.gz解压的目录，用文本编辑器方式打开start_navicat会看到 export LANG=”en_US.UTF-8”，改为export LANG=”zh_CN.UTF-8”，然后保存。<br>3、打开navicat，新建连接，对连接进行 Edit Connection ，Advanced 其中到Encoding  我选择的是Auto</p><p>4、保存之后，打开数据库表中数据中文数据显示正常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天安装了Navicat for MySQL有LINUX版本了哈， 开心的说，&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="mysql" scheme="http://lcf12307.github.io/tags/mysql/"/>
    
      <category term="应用安装" scheme="http://lcf12307.github.io/tags/%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>【常见问题】Ubuntu下利用deepin-wine安装软件简要方案</title>
    <link href="http://lcf12307.github.io/2018/07/12/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85wine%E5%BA%94%E7%94%A8/"/>
    <id>http://lcf12307.github.io/2018/07/12/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/ubuntu%E5%AE%89%E8%A3%85wine%E5%BA%94%E7%94%A8/</id>
    <published>2018-07-12T06:51:25.000Z</published>
    <updated>2021-06-22T15:55:01.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直以来，Linux作为开发机比较给力，但是常用软件(如QQ、微信等)的缺乏使Linux在桌面端一直不火，用户量低于Windows以及macOS，今天分享一个Ubuntu下安装常用软件的方法。</p></blockquote><a id="more"></a><h3 id="博主电脑环境"><a href="#博主电脑环境" class="headerlink" title="博主电脑环境"></a>博主电脑环境</h3><ul><li>Ubuntu 18.10 x64</li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><h4 id="安装deepin-wine"><a href="#安装deepin-wine" class="headerlink" title="安装deepin-wine"></a>安装deepin-wine</h4><p>输入以下命令即可</p><p>复制</p><table><thead><tr><th><code>123</code></th><th><code>git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.gitcd deepin-wine-ubuntu./install</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ul><li><p>下载软件(GUI下载或wget等均可)<br><a href="http://mirrors.aliyun.com/deepin/pool/non-free/" target="_blank" rel="noopener">http://mirrors.aliyun.com/deepin/pool/non-free/</a></p></li><li><p>使用如下命令安装软件</p><p>复制</p><table><thead><tr><th><code>1</code></th><th><code>sudo dpkg -i xxx.deb</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ul><blockquote><p>目前博主已经成功安装Tim、微信、百度网盘、迅雷精简版、foobar2000等。</p></blockquote><p>或者： <a href="https://github.com/hillwoodroc/winetricks-zh" target="_blank" rel="noopener">https://github.com/hillwoodroc/winetricks-zh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直以来，Linux作为开发机比较给力，但是常用软件(如QQ、微信等)的缺乏使Linux在桌面端一直不火，用户量低于Windows以及macOS，今天分享一个Ubuntu下安装常用软件的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="wine" scheme="http://lcf12307.github.io/tags/wine/"/>
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux多命令连接</title>
    <link href="http://lcf12307.github.io/2018/07/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E5%A4%9A%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5/"/>
    <id>http://lcf12307.github.io/2018/07/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E5%A4%9A%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<p>当我们需要一次执行多个命令的时候，命令之间需要用连接符连接，不同的连接符有不同的效果。下面我们总结一下，加以区分。</p><a id="more"></a><p>(1)  ; </p><p>分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p><p>(2) ||</p><p>逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p><p>(3) &amp;&amp;</p><p>逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p><p>(4) |</p><p>管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</p><p>例 ls | grep *.txt</p><p>﻿</p><p><strong>在linux中，&amp;和&amp;&amp;,|和||介绍如下：</strong></p><p><strong>&amp;  表示任务在后台执行，如要在后台运行redis-server,则有 redis-server &amp;</strong></p><p><strong>&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令 ，如 echo ‘1‘ &amp;&amp; echo ‘2’</strong>   </p><p><strong>| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo ‘yes’ | wc -l</strong></p><p><strong>|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo “fail”</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们需要一次执行多个命令的时候，命令之间需要用连接符连接，不同的连接符有不同的效果。下面我们总结一下，加以区分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>linux搜索</title>
    <link href="http://lcf12307.github.io/2018/07/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
    <id>http://lcf12307.github.io/2018/07/06/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/linux%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu的which、whereis、locate和find命令"><a href="#Ubuntu的which、whereis、locate和find命令" class="headerlink" title="Ubuntu的which、whereis、locate和find命令"></a><a href="https://www.cnblogs.com/andrewlee0708/p/Linux_locate.html" target="_blank" rel="noopener">Ubuntu的which、whereis、locate和find命令</a></h1><a id="more"></a><p>which 只能寻找执行文件 ，并在PATH变量里面寻找。</p><p>whereis 从linux文件数据库（/var/lib/slocate/slocate.db）寻找，所以有可能找到刚刚删除，或者没有发现新建的文件。</p><p>locate 同上,不过文件名是部分匹配。</p><p>find 是直接在硬盘上搜寻，功能强大，但耗硬盘，一般不要用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu的which、whereis、locate和find命令&quot;&gt;&lt;a href=&quot;#Ubuntu的which、whereis、locate和find命令&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu的which、whereis、locate和find命令&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/andrewlee0708/p/Linux_locate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu的which、whereis、locate和find命令&lt;/a&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mysql 忘记密码</title>
    <link href="http://lcf12307.github.io/2018/05/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://lcf12307.github.io/2018/05/23/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2021-06-22T15:55:01.007Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 忘记密码时，如何进行恢复</p><a id="more"></a><p>I. 在终端输入sudo gedit /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>II. 在[mysqld]下方的skip-external-locking下面添加一行：</p><p>skip-grant-tables</p><p>III. 重启MySQL服务：</p><p>sudo service mysql restart</p><p>IV. 在终端输入命令：mysql 进入mysql</p><p>V. 输入USE mysql （切换至mysql数据库）</p><p>VI. 将root用户的密码修改为0000：</p><p>UPDATE mysql.user SET authentication_string=password(‘0000’) WHERE User=’root’ AND Host =’localhost’;</p><p>VII. 修改字段plugin：</p><p>UPDATE user SET plugin=”mysql_native_password”;</p><p>（Plugin字段标识可以用于验证用户身份的插件，如果字段为空，服务器使用内建授权验证机制验证用户身份。 ）</p><p>VIII. 输入flush privileges;</p><p>IX. 输入quit;</p><p>X. 把/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行注释掉<br>-——————–<br>作者：rhanqtlnuse<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/hq815601489/article/details/78608644" target="_blank" rel="noopener">https://blog.csdn.net/hq815601489/article/details/78608644</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql 忘记密码时，如何进行恢复&lt;/p&gt;
    
    </summary>
    
    
      <category term="常见问题" scheme="http://lcf12307.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="mysql" scheme="http://lcf12307.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="http://lcf12307.github.io/tags/linux/"/>
    
      <category term="云服务器" scheme="http://lcf12307.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
